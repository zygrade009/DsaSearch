bank account summary ii sql schema table: users +--------------+---------+ | column name | type | +--------------+---------+ | account | int | | name | varchar | +--------------+---------+ account is the primary key for this table. each row of this table contains the account number of each user in the bank. there will be no two users having the same name in the table. table: transactions +---------------+---------+ | column name | type | +---------------+---------+ | trans_id | int | | account | int | | amount | int | | transacted_on | date | +---------------+---------+ trans_id is the primary key for this table. each row of this table contains all changes made to all accounts. amount is positive if the user received money and negative if they transferred money. all accounts start with a balance of 0. write an sql query to report the name and balance of users with a balance higher than 10000. the balance of an account is equal to the sum of the amounts of all transactions involving that account. return the result table in any order. the query result format is in the following example.
subsets ii given an integer array nums that may contain duplicates, return all possible subsets (the power set). the solution set must not contain duplicate subsets. return the solution in any order.
print foobar alternately suppose you are given the following code: class foobar { public void foo() { for (int i = 0; i < n; i++) { print("foo"); } } public void bar() { for (int i = 0; i < n; i++) { print("bar"); } } } the same instance of foobar will be passed to two different threads: thread a will call foo(), while thread b will call bar(). modify the given program to output "foobar" n times.
match substring after replacement you are given two strings s and sub. you are also given a 2d character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times: replace a character oldi of sub with newi. each character in sub cannot be replaced more than once. return true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. otherwise, return false. a substring is a contiguous non-empty sequence of characters within a string.
number of ways to split array you are given a 0-indexed integer array nums of length n. nums contains a valid split at index i if the following are true: the sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements. there is at least one element to the right of i. that is, 0 <= i < n - 1. return the number of valid splits in nums.
maximum sum with exactly k elements you are given a 0-indexed integer array nums and an integer k. your task is to perform the following operation exactly k times in order to maximize your score: select an element m from nums. remove the selected element m from the array. add a new element with a value of m + 1 to the array. increase your score by m. return the maximum score you can achieve after performing the operation exactly k times.
build a matrix with conditions you are given a positive integer k. you are also given: a 2d integer array rowconditions of size n where rowconditions[i] = [abovei, belowi], and a 2d integer array colconditions of size m where colconditions[i] = [lefti, righti]. the two arrays contain integers from 1 to k. you have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. the remaining cells should have the value 0. the matrix should also satisfy the following conditions: the number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from 0 to n - 1. the number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from 0 to m - 1. return any matrix that satisfies the conditions. if no answer exists, return an empty matrix.
max dot product of two subsequences given two arrays nums1 and nums2. return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length. a subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).
count and say the count-and-say sequence is a sequence of digit strings defined by the recursive formula: countandsay(1) = "1" countandsay(n) is the way you would "say" the digit string from countandsay(n-1), which is then converted into a different digit string. to determine how you "say" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. then for each substring, say the number of digits, then say the digit. finally, concatenate every said digit. for example, the saying and conversion for digit string "3322251": given a positive integer n, return the nth term of the count-and-say sequence.
find substring with given hash value the hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function: hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m. where val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26. you are given a string s and the integers power, modulo, k, and hashvalue. return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashvalue. the test cases will be generated such that an answer always exists. a substring is a contiguous non-empty sequence of characters within a string.
fancy sequence write an api that generates fancy sequences using the append, addall, and multall operations. implement the fancy class: fancy() initializes the object with an empty sequence. void append(val) appends an integer val to the end of the sequence. void addall(inc) increments all existing values in the sequence by an integer inc. void multall(m) multiplies all existing values in the sequence by an integer m. int getindex(idx) gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. if the index is greater or equal than the length of the sequence, return -1.
remove linked list elements given the head of a linked list and an integer val, remove all the nodes of the linked list that has node.val == val, and return the new head.
best time to buy and sell stock you are given an array prices where prices[i] is the price of a given stock on the ith day. you want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. return the maximum profit you can achieve from this transaction. if you cannot achieve any profit, return 0.
find all good indices you are given a 0-indexed integer array nums of size n and a positive integer k. we call an index i in the range k <= i < n - k good if the following conditions are satisfied: the k elements that are just before the index i are in non-increasing order. the k elements that are just after the index i are in non-decreasing order. return an array of all good indices sorted in increasing order.
split linked list in parts given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts. the length of each part should be as equal as possible: no two parts should have a size differing by more than one. this may lead to some parts being null. the parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later. return an array of the k parts.
promise time limit given an asyncronous function fn and a time t in milliseconds, return a new time limited version of the input function. a time limited function is a function that is identical to the original unless it takes longer than t milliseconds to fullfill. in that case, it will reject with "time limit exceeded". note that it should reject with a string, not an error.
smallest number in infinite set you have a set which contains all positive integers [1, 2, 3, 4, 5, ...]. implement the smallestinfiniteset class: smallestinfiniteset() initializes the smallestinfiniteset object to contain all positive integers. int popsmallest() removes and returns the smallest integer contained in the infinite set. void addback(int num) adds a positive integer num back into the infinite set, if it is not already in the infinite set.
sqrt(x) given a non-negative integer x, return the square root of x rounded down to the nearest integer. the returned integer should be non-negative as well. you must not use any built-in exponent function or operator. for example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
tree node sql schema table: tree +-------------+------+ | column name | type | +-------------+------+ | id | int | | p_id | int | +-------------+------+ id is the primary key column for this table. each row of this table contains information about the id of a node and the id of its parent node in a tree. the given structure is always a valid tree. each node in the tree can be one of three types: "leaf": if the node is a leaf node. "root": if the node is the root of the tree. "inner": if the node is neither a leaf node nor a root node. write an sql query to report the type of each node in the tree. return the result table in any order. the query result format is in the following example.
check if it is a good array given an array nums of positive integers. your task is to select some subset of nums, multiply each element by an integer and add all these numbers. the array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand. return true if the array is good otherwise return false.
minimum elements to add to form a given sum you are given an integer array nums and two integers limit and goal. the array nums has an interesting property that abs(nums[i]) <= limit. return the minimum number of elements you need to add to make the sum of the array equal to goal. the array must maintain its property that abs(nums[i]) <= limit. note that abs(x) equals x if x >= 0, and -x otherwise.
single number ii given an integer array nums where every element appears three times except for one, which appears exactly once. find the single element and return it. you must implement a solution with a linear runtime complexity and use only constant extra space.
big countries sql schema table: world +-------------+---------+ | column name | type | +-------------+---------+ | name | varchar | | continent | varchar | | area | int | | population | int | | gdp | bigint | +-------------+---------+ name is the primary key column for this table. each row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its gdp value. a country is big if: it has an area of at least three million (i.e., 3000000 km2), or it has a population of at least twenty-five million (i.e., 25000000). write an sql query to report the name, population, and area of the big countries. return the result table in any order. the query result format is in the following example.
odd even jump you are given an integer array arr. from some starting index, you can make a series of jumps. the (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. note that the jumps are numbered, not the indices. you may jump forward from index i to index j (with i < j) in the following way: during odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. if there are multiple such indices j, you can only jump to the smallest such index j. during even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. if there are multiple such indices j, you can only jump to the smallest such index j. it may be the case that for some index i, there are no legal jumps. a starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once). return the number of good starting indices.
sliding window median the median is the middle value in an ordered integer list. if the size of the list is even, there is no middle value. so the median is the mean of the two middle values. for examples, if arr = [2,3,4], the median is 3. for examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5. you are given an integer array nums and an integer k. there is a sliding window of size k which is moving from the very left of the array to the very right. you can only see the k numbers in the window. each time the sliding window moves right by one position. return the median array for each window in the original array. answers within 10-5 of the actual value will be accepted.
find the distinct difference array you are given a 0-indexed array nums of length n. the distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i]. return the distinct difference array of nums. note that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. particularly, if i > j then nums[i, ..., j] denotes an empty subarray.
maximum frequency stack design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack. implement the freqstack class: freqstack() constructs an empty frequency stack. void push(int val) pushes an integer val onto the top of the stack. int pop() removes and returns the most frequent element in the stack. if there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.
prime arrangements return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.) (recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.) since the answer may be large, return the answer modulo 10^9 + 7.
best time to buy and sell stock iv you are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k. find the maximum profit you can achieve. you may complete at most k transactions: i.e. you may buy at most k times and sell at most k times. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
maximum subarray given an integer array nums, find the subarray with the largest sum, and return its sum.
check if binary string has at most one segment of ones given a binary string s without leading zeros, return true if s contains at most one contiguous segment of ones. otherwise, return false.
flip binary tree to match preorder traversal you are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. you are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree. any node in the binary tree can be flipped by swapping its left and right subtrees. for example, flipping node 1 will have the following effect: flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage. return a list of the values of all flipped nodes. you may return the answer in any order. if it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].
number of good paths there is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. you are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. a good path is a simple path that satisfies the following conditions: the starting node and the ending node have the same value. all nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path). return the number of distinct good paths. note that a path and its reverse are counted as the same path. for example, 0 -> 1 is considered to be the same as 1 -> 0. a single node is also considered as a valid path.
remove colored pieces if both neighbors are the same color there are n pieces arranged in a line, and each piece is colored either by 'a' or by 'b'. you are given a string colors of length n where colors[i] is the color of the ith piece. alice and bob are playing a game where they take alternating turns removing pieces from the line. in this game, alice moves first. alice is only allowed to remove a piece colored 'a' if both its neighbors are also colored 'a'. she is not allowed to remove pieces that are colored 'b'. bob is only allowed to remove a piece colored 'b' if both its neighbors are also colored 'b'. he is not allowed to remove pieces that are colored 'a'. alice and bob cannot remove pieces from the edge of the line. if a player cannot make a move on their turn, that player loses and the other player wins. assuming alice and bob play optimally, return true if alice wins, or return false if bob wins.
fraction addition and subtraction given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format. the final result should be an irreducible fraction. if your final result is an integer, change it to the format of a fraction that has a denominator 1. so in this case, 2 should be converted to 2/1.
count special quadruplets given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that: nums[a] + nums[b] + nums[c] == nums[d], and a < b < c < d
next greater element iii given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. if no such positive integer exists, return -1. note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.
divide nodes into the maximum number of groups you are given a positive integer n representing the number of nodes in an undirected graph. the nodes are labeled from 1 to n. you are also given a 2d integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. notice that the given graph may be disconnected. divide the nodes of the graph into m groups (1-indexed) such that: each node in the graph belongs to exactly one group. for every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1. return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. return -1 if it is impossible to group the nodes with the given conditions.
minimum moves to reach target score you are playing a game with integers. you start with the integer 1 and you want to reach the integer target. in one move, you can either: increment the current integer by one (i.e., x = x + 1). double the current integer (i.e., x = 2 * x). you can use the increment operation any number of times, however, you can only use the double operation at most maxdoubles times. given the two integers target and maxdoubles, return the minimum number of moves needed to reach target starting with 1.
maximum alternating subsequence sum the alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices. for example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4. given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence). a subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.
balanced binary tree given a binary tree, determine if it is height-balanced .
maximum compatibility score sum there is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes). the survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. the answers of the students are represented by a 2d integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). the answers of the mentors are represented by a 2d integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed). each student will be assigned to one mentor, and each mentor will have one student assigned to them. the compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor. for example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same. you are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores. given students and mentors, return the maximum compatibility score sum that can be achieved.
basic calculator iv given an expression such as expression = "e + 8 - a + 5" and an evaluation map such as {"e": 1} (given in terms of evalvars = ["e"] and evalints = [1]), return a list of tokens representing the simplified expression, such as ["-1*a","14"] an expression alternates chunks and symbols, with a space separating each chunk and symbol. a chunk is either an expression in parentheses, a variable, or a non-negative integer. a variable is a string of lowercase letters (not including digits.) note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like "2x" or "-x". expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. for example, expression = "1 + 2 * 3" has an answer of ["7"]. the format of the output is as follows: for each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically. for example, we would never write a term like "b*a*c", only "a*b*c". terms have degrees equal to the number of free variables being multiplied, counting multiplicity. we write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. for example, "a*a*b*c" has degree 4. the leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) a leading coefficient of 1 is still printed. an example of a well-formatted answer is ["-2*a*a*a", "3*a*a*b", "3*b*b", "4*a", "5*c", "-6"]. terms (including constant terms) with coefficient 0 are not included. for example, an expression of "0" has an output of []. note: you may assume that the given expression is always valid. all intermediate results will be in the range of [-231, 231 - 1].
unique length-3 palindromic subsequences given a string s, return the number of unique palindromes of length three that are a subsequence of s. note that even if there are multiple ways to obtain the same subsequence, it is still only counted once. a palindrome is a string that reads the same forwards and backwards. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, "ace" is a subsequence of "abcde".
add to array-form of integer the array-form of an integer num is an array representing its digits in left to right order. for example, for num = 1321, the array form is [1,3,2,1]. given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.
minimum cost to reach destination in time there is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. the roads are represented as a 2d integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. there may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself. each time you pass through a city, you must pay a passing fee. this is represented as a 0-indexed integer array passingfees of length n where passingfees[j] is the amount of dollars you must pay when you pass through city j. in the beginning, you are at city 0 and want to reach city n - 1 in maxtime minutes or less. the cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities). given maxtime, edges, and passingfees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxtime minutes.
average salary excluding the minimum and maximum salary you are given an array of unique integers salary where salary[i] is the salary of the ith employee. return the average salary of employees excluding the minimum and maximum salary. answers within 10-5 of the actual answer will be accepted.
remove max number of edges to keep graph fully traversable alice and bob have an undirected graph of n nodes and three types of edges: type 1: can be traversed by alice only. type 2: can be traversed by bob only. type 3: can be traversed by both alice and bob. given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both alice and bob. the graph is fully traversed by alice and bob if starting from any node, they can reach all other nodes. return the maximum number of edges you can remove, or return -1 if alice and bob cannot fully traverse the graph.
smallest missing non-negative integer after operations you are given a 0-indexed integer array nums and an integer value. in one operation, you can add or subtract value from any element of nums. for example, if nums = [1,2,3] and value = 2, you can choose to subtract value from nums[0] to make nums = [-1,2,3]. the mex (minimum excluded) of an array is the smallest missing non-negative integer in it. for example, the mex of [-1,2,3] is 0 while the mex of [1,0,3] is 2. return the maximum mex of nums after applying the mentioned operation any number of times.
last stone weight ii you are given an array of integers stones where stones[i] is the weight of the ith stone. we are playing a game with the stones. on each turn, we choose any two stones and smash them together. suppose the stones have weights x and y with x <= y. the result of this smash is: if x == y, both stones are destroyed, and if x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. at the end of the game, there is at most one stone left. return the smallest possible weight of the left stone. if there are no stones left, return 0.
freedom trail in the video game fallout 4, the quest "road to freedom" requires players to reach a metal dial called the "freedom trail ring" and use the dial to spell a specific keyword to open the door. given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword. initially, the first character of the ring is aligned at the "12:00" direction. you should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the "12:00" direction and then by pressing the center button. at the stage of rotating the ring to spell the key character key[i]: you can rotate the ring clockwise or anticlockwise by one place, which counts as one step. the final purpose of the rotation is to align one of ring's characters at the "12:00" direction, where this character must equal key[i]. if the character key[i] has been aligned at the "12:00" direction, press the center button to spell, which also counts as one step. after the pressing, you could begin to spell the next character in the key (next stage). otherwise, you have finished all the spelling.
number of sets of k non-overlapping line segments given n points on a 1-d plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. the endpoints of each segment must have integral coordinates. the k line segments do not have to cover all n points, and they are allowed to share endpoints. return the number of ways we can draw k non-overlapping line segments. since this number can be huge, return it modulo 109 + 7.
maximum 69 number you are given a positive integer num consisting only of digits 6 and 9. return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).
shortest path in binary matrix given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. if there is no clear path, return -1. a clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that: all the visited cells of the path are 0. all the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner). the length of a clear path is the number of visited cells of this path.
minimum number of operations to make string sorted you are given a string s (0-indexed). you are asked to perform the following operation on s until you get a sorted string: find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1]. find the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive. swap the two characters at indices i - 1 and j. reverse the suffix starting at index i. return the number of operations needed to make the string sorted. since the answer can be too large, return it modulo 109 + 7.
check if point is reachable there exists an infinitely large grid. you are currently at point (1, 1), and you need to reach the point (targetx, targety) using a finite number of steps. in one step, you can move from point (x, y) to any one of the following points: (x, y - x) (x - y, y) (2 * x, y) (x, 2 * y) given two integers targetx and targety representing the x-coordinate and y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.
maximum subarray min-product the min-product of an array is equal to the minimum value in the array multiplied by the array's sum. for example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20. given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. since the answer may be large, return it modulo 109 + 7. note that the min-product should be maximized before performing the modulo operation. testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer. a subarray is a contiguous part of an array.
number of sub-arrays with odd sum given an array of integers arr, return the number of subarrays with an odd sum. since the answer can be very large, return it modulo 109 + 7.
insufficient nodes in root to leaf paths given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree. a node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit. a leaf is a node with no children.
numbers at most n given digit set given an array of digits which is sorted in non-decreasing order. you can write numbers using each digits[i] as many times as we want. for example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'. return the number of positive integers that can be generated that are less than or equal to a given integer n.
zuma game you are playing a variation of the game zuma. in this variation of zuma, there is a single row of colored balls on a board, where each ball can be colored red 'r', yellow 'y', blue 'b', green 'g', or white 'w'. you also have several colored balls in your hand. your goal is to clear all of the balls from the board. on each turn: pick any ball from your hand and insert it in between two balls in the row or on either end of the row. if there is a group of three or more consecutive balls of the same color, remove the group of balls from the board. if this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left. if there are no more balls on the board, then you win the game. repeat this process until you either win or do not have any more balls in your hand. given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. if you cannot clear all the balls from the board using the balls in your hand, return -1.
nth digit given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].
find the distance value between two arrays given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays. the distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.
detect capital we define the usage of capitals in a word to be right when one of the following cases holds: all letters in this word are capitals, like "usa". all letters in this word are not capitals, like "leetcode". only the first letter in this word is capital, like "google". given a string word, return true if the usage of capitals in it is right.
arithmetic slices an integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. for example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences. given an integer array nums, return the number of arithmetic subarrays of nums. a subarray is a contiguous subsequence of the array.
longest mountain in array you may recall that an array arr is a mountain array if and only if: arr.length >= 3 there exists some index i (0-indexed) with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given an integer array arr, return the length of the longest subarray, which is a mountain. return 0 if there is no mountain subarray.
longest increasing subsequence ii you are given an integer array nums and an integer k. find the longest subsequence of nums that meets the following requirements: the subsequence is strictly increasing and the difference between adjacent elements in the subsequence is at most k. return the length of the longest subsequence that meets the requirements. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
minimum falling path sum given an n x n array of integers matrix, return the minimum sum of any falling path through matrix. a falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).
maximum width ramp a ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. the width of such a ramp is j - i. given an integer array nums, return the maximum width of a ramp in nums. if there is no ramp in nums, return 0.
number of pairs of strings with concatenation equal to target given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.
string to integer (atoi) implement the myatoi(string s) function, which converts a string to a 32-bit signed integer (similar to c/c++'s atoi function). the algorithm for myatoi(string s) is as follows: read in and ignore any leading whitespace. check if the next character (if not already at the end of the string) is '-' or '+'. read this character in if it is either. this determines if the final result is negative or positive respectively. assume the result is positive if neither is present. read in next the characters until the next non-digit character or the end of the input is reached. the rest of the string is ignored. convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). if no digits were read, then the integer is 0. change the sign as necessary (from step 2). if the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1. return the integer as the final result. note: only the space character ' ' is considered a whitespace character. do not ignore any characters other than the leading whitespace or the rest of the string after the digits.
difference of number of distinct values on diagonals given a 0-indexed 2d grid of size m x n, you should find the matrix answer of size m x n. the value of each cell (r, c) of the matrix answer is calculated in the following way: let topleft[r][c] be the number of distinct values in the top-left diagonal of the cell (r, c) in the matrix grid. let bottomright[r][c] be the number of distinct values in the bottom-right diagonal of the cell (r, c) in the matrix grid. then answer[r][c] = |topleft[r][c] - bottomright[r][c]|. return the matrix answer. a matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. a cell (r1, c1) belongs to the top-left diagonal of the cell (r, c), if both belong to the same diagonal and r1 < r. similarly is defined bottom-right diagonal.
number of zero-filled subarrays given an integer array nums, return the number of subarrays filled with 0. a subarray is a contiguous non-empty sequence of elements within an array.
subsets given an integer array nums of unique elements, return all possible subsets (the power set). the solution set must not contain duplicate subsets. return the solution in any order.
determine the winner of a bowling game you are given two 0-indexed integer arrays player1 and player2, that represent the number of pins that player 1 and player 2 hit in a bowling game, respectively. the bowling game consists of n turns, and the number of pins in each turn is exactly 10. assume a player hit xi pins in the ith turn. the value of the ith turn for the player is: 2xi if the player hit 10 pins in any of the previous two turns. otherwise, it is xi. the score of the player is the sum of the values of their n turns. return 1 if the score of player 1 is more than the score of player 2, 2 if the score of player 2 is more than the score of player 1, and 0 in case of a draw.
number of steps to reduce a number to zero given an integer num, return the number of steps to reduce it to zero. in one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.
count unreachable pairs of nodes in an undirected graph you are given an integer n. there is an undirected graph with n nodes, numbered from 0 to n - 1. you are given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. return the number of pairs of different nodes that are unreachable from each other.
find nearest point that has the same x or y coordinate you are given two integers, x and y, which represent your current location on a cartesian grid: (x, y). you are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). a point is valid if it shares the same x-coordinate or the same y-coordinate as your location. return the index (0-indexed) of the valid point with the smallest manhattan distance from your current location. if there are multiple, return the valid point with the smallest index. if there are no valid points, return -1. the manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).
largest divisible subset given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies: answer[i] % answer[j] == 0, or answer[j] % answer[i] == 0 if there are multiple solutions, return any of them.
string compression ii run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). for example, to compress the string "aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". thus the compressed string becomes "a2bc3". notice that in this problem, we are not adding '1' after single characters. given a string s and an integer k. you need to delete at most k characters from s such that the run-length encoded version of s has minimum length. find the minimum length of the run-length encoded version of s after deleting at most k characters.
minimum number of days to make m bouquets you are given an integer array bloomday, an integer m and an integer k. you want to make m bouquets. to make a bouquet, you need to use k adjacent flowers from the garden. the garden consists of n flowers, the ith flower will bloom in the bloomday[i] and then can be used in exactly one bouquet. return the minimum number of days you need to wait to be able to make m bouquets from the garden. if it is impossible to make m bouquets return -1.
palindrome partitioning given a string s, partition s such that every substring of the partition is a palindrome . return all possible palindrome partitioning of s.
cousins in binary tree ii given the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values. two nodes of a binary tree are cousins if they have the same depth with different parents. return the root of the modified tree. note that the depth of a node is the number of edges in the path from the root node to it.
maximum number of non-overlapping subarrays with sum equals target given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.
build array where you can find the maximum exactly k comparisons you are given three integers n, m and k. consider the following algorithm to find the maximum element of an array of positive integers: you should build the array arr which has the following properties: arr has exactly n integers. 1 <= arr[i] <= m where (0 <= i < n). after applying the mentioned algorithm to arr, the value search_cost is equal to k. return the number of ways to build the array arr under the mentioned conditions. as the answer may grow large, the answer must be computed modulo 109 + 7.
uncrossed lines you are given two integer arrays nums1 and nums2. we write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines. we may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that: nums1[i] == nums2[j], and the line we draw does not intersect any other connecting (non-horizontal) line. note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line). return the maximum number of connecting lines we can draw in this way.
investments in 2016 sql schema table: insurance +-------------+-------+ | column name | type | +-------------+-------+ | pid | int | | tiv_2015 | float | | tiv_2016 | float | | lat | float | | lon | float | +-------------+-------+ pid is the primary key column for this table. each row of this table contains information about one policy where: pid is the policyholder's policy id. tiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016. lat is the latitude of the policy holder's city. it's guaranteed that lat is not null. lon is the longitude of the policy holder's city. it's guaranteed that lon is not null. write an sql query to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who: have the same tiv_2015 value as one or more other policyholders, and are not located in the same city like any other policyholder (i.e., the (lat, lon) attribute pairs must be unique). round tiv_2016 to two decimal places. the query result format is in the following example.
smallest value after replacing with sum of prime factors you are given a positive integer n. continuously replace n with the sum of its prime factors. note that if a prime factor divides n multiple times, it should be included in the sum as many times as it divides n. return the smallest value n will take on.
find latest group of size m given an array arr that represents a permutation of numbers from 1 to n. you have a binary string of size n that initially has all its bits set to zero. at each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1. you are also given an integer m. find the latest step at which there exists a group of ones of length m. a group of ones is a contiguous substring of 1's such that it cannot be extended in either direction. return the latest step at which there exists a group of ones of length exactly m. if no such group exists, return -1.
range product queries of powers given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. the array is sorted in non-decreasing order, and there is only one way to form the array. you are also given a 0-indexed 2d integer array queries, where queries[i] = [lefti, righti]. each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti. return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.
count the number of square-free subsets you are given a positive integer 0-indexed array nums. a subset of the array nums is square-free if the product of its elements is a square-free integer. a square-free integer is an integer that is divisible by no square number other than 1. return the number of square-free non-empty subsets of the array nums. since the answer may be too large, return it modulo 109 + 7. a non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. two subsets are different if and only if the chosen indices to delete are different.
number of valid words in a sentence a sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. each sentence can be broken down into one or more tokens separated by one or more spaces ' '. a token is a valid word if all three of the following are true: it only contains lowercase letters, hyphens, and/or punctuation (no digits). there is at most one hyphen '-'. if present, it must be surrounded by lowercase characters ("a-b" is valid, but "-ab" and "ab-" are not valid). there is at most one punctuation mark. if present, it must be at the end of the token ("ab,", "cd!", and "." are valid, but "a!b" and "c.," are not valid). examples of valid words include "a-b.", "afad", "ba-c", "a!", and "!". given a string sentence, return the number of valid words in sentence.
sum of digits in base k given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k. after converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.
diagonal traverse ii given a 2d integer array nums, return all elements of nums in diagonal order as shown in the below images.
convert object to json string given an object, return a valid json string of that object. you may assume the object only inludes strings, integers, arrays, objects, booleans, and null. the returned string should not include extra spaces. the order of keys should be the same as the order returned by object.keys(). please solve it without using the built-in json.stringify method.
daily temperatures given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. if there is no future day for which this is possible, keep answer[i] == 0 instead.
couples holding hands there are n couples sitting in 2n seats arranged in a row and want to hold hands. the people and seats are represented by an integer array row where row[i] is the id of the person sitting in the ith seat. the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1). return the minimum number of swaps so that every couple is sitting side by side. a swap consists of choosing any two people, then they stand up and switch seats.
valid anagram given two strings s and t, return true if t is an anagram of s, and false otherwise. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
maximum number of eaten apples there is a special kind of apple tree that grows apples every day for n days. on the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. on some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0. you decided to eat at most one apple a day (to keep the doctors away). note that you can keep eating after the first n days. given two integer arrays days and apples of length n, return the maximum number of apples you can eat.
employees earning more than their managers sql schema table: employee +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | | salary | int | | managerid | int | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id of an employee, their name, salary, and the id of their manager. write an sql query to find the employees who earn more than their managers. return the result table in any order. the query result format is in the following example.
sign of the product of an array there is a function signfunc(x) that returns: 1 if x is positive. -1 if x is negative. 0 if x is equal to 0. you are given an integer array nums. let product be the product of all values in the array nums. return signfunc(product).
broken calculator there is a broken calculator that has the integer startvalue on its display initially. in one operation, you can: multiply the number on display by 2, or subtract 1 from the number on display. given two integers startvalue and target, return the minimum number of operations needed to display target on the calculator.
count ways to group overlapping ranges you are given a 2d integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range. you are to split ranges into two (possibly empty) groups such that: each range belongs to exactly one group. any two overlapping ranges must belong to the same group. two ranges are said to be overlapping if there exists at least one integer that is present in both ranges. for example, [1, 3] and [2, 5] are overlapping because 2 and 3 occur in both ranges. return the total number of ways to split ranges into two groups. since the answer may be very large, return it modulo 109 + 7.
maximum strength of a group you are given a 0-indexed integer array nums representing the score of students in an exam. the teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik]. return the maximum strength of a group the teacher can create.
palindromic substrings given a string s, return the number of palindromic substrings in it. a string is a palindrome when it reads the same backward as forward. a substring is a contiguous sequence of characters within the string.
longest substring of one repeating character you are given a 0-indexed string s. you are also given a 0-indexed string querycharacters of length k and a 0-indexed array of integer indices queryindices of length k, both of which are used to describe k queries. the ith query updates the character in s at index queryindices[i] to the character querycharacters[i]. return an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.
count vowel strings in ranges you are given a 0-indexed array of strings words and a 2d array of integers queries. each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel. return an array ans of size queries.length, where ans[i] is the answer to the ith query. note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.
replace employee id with the unique identifier sql schema table: employees +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | name | varchar | +---------------+---------+ id is the primary key for this table. each row of this table contains the id and the name of an employee in a company. table: employeeuni +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | unique_id | int | +---------------+---------+ (id, unique_id) is the primary key for this table. each row of this table contains the id and the corresponding unique id of an employee in the company. write an sql query to show the unique id of each user, if a user does not have a unique id replace just show null. return the result table in any order. the query result format is in the following example.
sort the jumbled numbers you are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system. the mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9. you are also given another integer array nums. return the array nums sorted in non-decreasing order based on the mapped values of its elements. notes: elements with the same mapped values should appear in the same relative order as in the input. the elements of nums should only be sorted based on their mapped values and not be replaced by them.
angle between hands of a clock given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand. answers within 10-5 of the actual value will be accepted as correct.
top travellers sql schema table: users +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | name | varchar | +---------------+---------+ id is the primary key for this table. name is the name of the user. table: rides +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | user_id | int | | distance | int | +---------------+---------+ id is the primary key for this table. user_id is the id of the user who traveled the distance "distance". write an sql query to report the distance traveled by each user. return the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order. the query result format is in the following example.
find the longest balanced substring of a binary string you are given a binary string s consisting only of zeroes and ones. a substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. notice that the empty substring is considered a balanced substring. return the length of the longest balanced substring of s. a substring is a contiguous sequence of characters within a string.
sort characters by frequency given a string s, sort it in decreasing order based on the frequency of the characters. the frequency of a character is the number of times it appears in the string. return the sorted string. if there are multiple answers, return any of them.
add two numbers you are given two non-empty linked lists representing two non-negative integers. the digits are stored in reverse order, and each of their nodes contains a single digit. add the two numbers and return the sum as a linked list. you may assume the two numbers do not contain any leading zero, except the number 0 itself.
binary prefix divisible by 5 you are given a binary array nums (0-indexed). we define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit). for example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5. return an array of booleans answer where answer[i] is true if xi is divisible by 5.
two best non-overlapping events you are given a 0-indexed 2d integer array of events where events[i] = [starttimei, endtimei, valuei]. the ith event starts at starttimei and ends at endtimei, and if you attend this event, you will receive a value of valuei. you can choose at most two non-overlapping events to attend such that the sum of their values is maximized. return this maximum sum. note that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. more specifically, if you attend an event with end time t, the next event must start at or after t + 1.
check if all a's appears before all b's given a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. otherwise, return false.
pyramid transition matrix you are stacking blocks to form a pyramid. each block has a color, which is represented by a single letter. each row of blocks contains one less block than the row beneath it and is centered on top. to make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. a triangular pattern consists of a single block stacked on top of two blocks. the patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block. for example, "abc" represents a triangular pattern with a 'c' block stacked on top of an 'a' (left) and 'b' (right) block. note that this is different from "bac" where 'b' is on the left bottom and 'a' is on the right bottom. you start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid. given bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.
count number of ways to place houses there is a street with n * 2 plots, where there are n plots on each side of the street. the plots on each side are numbered from 1 to n. on each plot, a house can be placed. return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. since the answer may be very large, return it modulo 109 + 7. note that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.
redistribute characters to make all strings equal you are given an array of strings words (0-indexed). in one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j]. return true if you can make every string in words equal using any number of operations, and false otherwise.
minimum suffix flips you are given a 0-indexed binary string target of length n. you have another binary string s of length n that is initially set to all zeros. you want to make s equal to target. in one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. flip means changing '0' to '1' and '1' to '0'. return the minimum number of operations needed to make s equal to target.
walking robot simulation a robot on an infinite xy-plane starts at point (0, 0) facing north. the robot can receive a sequence of these three possible types of commands: -2: turn left 90 degrees. -1: turn right 90 degrees. 1 <= k <= 9: move forward k units, one unit at a time. some of the grid squares are obstacles. the ith obstacle is at grid point obstacles[i] = (xi, yi). if the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command. return the maximum euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25). note: north means +y direction. east means +x direction. south means -y direction. west means -x direction.
maximum trailing zeros in a cornered path you are given a 2d integer array grid of size m x n, where each cell contains a positive integer. a cornered path is defined as a set of adjacent cells with at most one turn. more specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. after the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell. the product of a path is defined as the product of all the values in the path. return the maximum number of trailing zeros in the product of a cornered path found in grid. note: horizontal movement means moving in either the left or right direction. vertical movement means moving in either the up or down direction.
apply discount to prices a sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. a word represents a price if it is a sequence of digits preceded by a dollar sign. for example, "$100", "$23", and "$6" represent prices while "100", "$", and "$1e5" do not. you are given a string sentence representing a sentence and an integer discount. for each word representing a price, apply a discount of discount% on the price and update the word in the sentence. all updated prices should be represented with exactly two decimal places. return a string representing the modified sentence. note that all prices will contain at most 10 digits.
count number of maximum bitwise-or subsets given an integer array nums, find the maximum possible bitwise or of a subset of nums and return the number of different non-empty subsets with the maximum bitwise or. an array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. two subsets are considered different if the indices of the elements chosen are different. the bitwise or of an array a is equal to a[0] or a[1] or ... or a[a.length - 1] (0-indexed).
length of last word given a string s consisting of words and spaces, return the length of the last word in the string. a word is a maximal substring consisting of non-space characters only.
reverse pairs given an integer array nums, return the number of reverse pairs in the array. a reverse pair is a pair (i, j) where: 0 <= i < j < nums.length and nums[i] > 2 * nums[j].
lru cache design a data structure that follows the constraints of a least recently used (lru) cache. implement the lrucache class: lrucache(int capacity) initialize the lru cache with positive size capacity. int get(int key) return the value of the key if the key exists, otherwise return -1. void put(int key, int value) update the value of the key if the key exists. otherwise, add the key-value pair to the cache. if the number of keys exceeds the capacity from this operation, evict the least recently used key. the functions get and put must each run in o(1) average time complexity.
relative sort array given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1. sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.
detect cycles in 2d grid given a 2d array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid. a cycle is a path of length 4 or more in the grid that starts and ends at the same cell. from a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell. also, you cannot move to the cell that you visited in your last move. for example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell. return true if any cycle of the same value exists in grid, otherwise, return false.
consecutive characters the power of the string is the maximum length of a non-empty substring that contains only one unique character. given a string s, return the power of s.
remove element given an integer array nums and an integer val, remove all occurrences of val in nums in-place. the order of the elements may be changed. then return the number of elements in nums which are not equal to val. consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things: change the array nums such that the first k elements of nums contain the elements which are not equal to val. the remaining elements of nums are not important as well as the size of nums. return k. custom judge: the judge will test your solution with the following code: int[] nums = [...]; // input array int val = ...; // value to remove int[] expectednums = [...]; // the expected answer with correct length. // it is sorted with no values equaling val. int k = removeelement(nums, val); // calls your implementation assert k == expectednums.length; sort(nums, 0, k); // sort the first k elements of nums for (int i = 0; i < actuallength; i++) { assert nums[i] == expectednums[i]; } if all assertions pass, then your solution will be accepted.
binary tree cameras you are given the root of a binary tree. we install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children. return the minimum number of cameras needed to monitor all nodes of the tree.
combination sum given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. you may return the combinations in any order. the same number may be chosen from candidates an unlimited number of times. two combinations are unique if the frequency of at least one of the chosen numbers is different. the test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
surface area of 3d shapes you are given an n x n grid where you have placed some 1 x 1 x 1 cubes. each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j). after placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3d shapes. return the total surface area of the resulting shapes. note: the bottom face of each shape counts toward its surface area.
check if n and its double exist given an array arr of integers, check if there exist two indices i and j such that : i != j 0 <= i, j < arr.length arr[i] == 2 * arr[j]
ugly number an ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. given an integer n, return true if n is an ugly number.
sliding puzzle on an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. a move consists of choosing 0 and a 4-directionally adjacent number and swapping it. the state of the board is solved if and only if the board is [[1,2,3],[4,5,0]]. given the puzzle board board, return the least number of moves required so that the state of the board is solved. if it is impossible for the state of the board to be solved, return -1.
find first and last position of element in sorted array given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. if target is not found in the array, return [-1, -1]. you must write an algorithm with o(log n) runtime complexity.
minimize deviation in array you are given an array nums of n positive integers. you can perform two types of operations on any element of the array any number of times: if the element is even, divide it by 2. for example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2]. if the element is odd, multiply it by 2. for example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4]. the deviation of the array is the maximum difference between any two elements in the array. return the minimum deviation the array can have after performing some number of operations.
subsequence with the minimum score you are given two strings s and t. you are allowed to remove any number of characters from the string t. the score of the string is 0 if no characters are removed from the string t, otherwise: let left be the minimum index among all removed characters. let right be the maximum index among all removed characters. then the score of the string is right - left + 1. return the minimum possible score to make t a subsequence of s. a subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
minimum incompatibility you are given an integer array nums and an integer k. you are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset. a subset's incompatibility is the difference between the maximum and minimum elements in that array. return the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible. a subset is a group integers that appear in the array with no particular order.
find all good strings given the strings s1 and s2 of size n and the string evil, return the number of good strings. a good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. since the answer can be a huge number, return this modulo 109 + 7.
random point in non-overlapping rectangles you are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. a point on the perimeter of a rectangle is included in the space covered by the rectangle. any integer point inside the space covered by one of the given rectangles should be equally likely to be returned. note that an integer point is a point that has integer coordinates. implement the solution class: solution(int[][] rects) initializes the object with the given rectangles rects. int[] pick() returns a random integer point [u, v] inside the space covered by one of the given rectangles.
plus one you are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. the digits are ordered from most significant to least significant in left-to-right order. the large integer does not contain any leading 0's. increment the large integer by one and return the resulting array of digits.
parsing a boolean expression a boolean expression is an expression that evaluates to either true or false. it can be in one of the following shapes: 't' that evaluates to true. 'f' that evaluates to false. '!(subexpr)' that evaluates to the logical not of the inner expression subexpr. '&(subexpr1, subexpr2, ..., subexprn)' that evaluates to the logical and of the inner expressions subexpr1, subexpr2, ..., subexprn where n >= 1. '|(subexpr1, subexpr2, ..., subexprn)' that evaluates to the logical or of the inner expressions subexpr1, subexpr2, ..., subexprn where n >= 1. given a string expression that represents a boolean expression, return the evaluation of that expression. it is guaranteed that the given expression is valid and follows the given rules.
split a string in balanced strings balanced strings are those that have an equal quantity of 'l' and 'r' characters. given a balanced string s, split it into some number of substrings such that: each substring is balanced. return the maximum number of balanced strings you can obtain.
design skiplist design a skiplist without using any built-in libraries. a skiplist is a data structure that takes o(log(n)) time to add, erase and search. comparing with treap and red-black tree which has the same function and performance, the code length of skiplist can be comparatively short and the idea behind skiplists is just simple linked lists. for example, we have a skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. the skiplist works this way: artyom kalinin [cc by-sa 3.0], via wikimedia commons you can see there are many layers in the skiplist. each layer is a sorted linked list. with the help of the top layers, add, erase and search can be faster than o(n). it can be proven that the average time complexity for each operation is o(log(n)) and space complexity is o(n). see more about skiplist: https://en.wikipedia.org/wiki/skip_list implement the skiplist class: skiplist() initializes the object of the skiplist. bool search(int target) returns true if the integer target exists in the skiplist or false otherwise. void add(int num) inserts the value num into the skiplist. bool erase(int num) removes the value num from the skiplist and returns true. if num does not exist in the skiplist, do nothing and return false. if there exist multiple num values, removing any one of them is fine. note that duplicates may exist in the skiplist, your code needs to handle this situation.
find the difference you are given two strings s and t. string t is generated by random shuffling string s and then add one more letter at a random position. return the letter that was added to t.
binary tree coloring game two players play a turn based game on a binary tree. we are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n. initially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. the first player colors the node with value x red, and the second player colors the node with value y blue. then, the players take turns starting with the first player. in each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.) if (and only if) a player cannot choose such a node in this way, they must pass their turn. if both players pass their turn, the game ends, and the winner is the player that colored more nodes. you are the second player. if it is possible to choose such a y to ensure you win the game, return true. if it is not possible, return false.
random pick with weight you are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index. you need to implement the function pickindex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. the probability of picking an index i is w[i] / sum(w). for example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
spiral matrix iv you are given two integers m and n, which represent the dimensions of a matrix. you are also given the head of a linked list of integers. generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. if there are remaining empty spaces, fill them with -1. return the generated matrix.
maximize the minimum powered city you are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city. each power station can provide power to every city in a fixed range. in other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1. note that |x| denotes absolute value. for example, |7 - 5| = 2 and |3 - 10| = 7. the power of a city is the total number of power stations it is being provided power from. the government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones. given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally. note that you can build the k power stations in multiple cities.
to lower case given a string s, return the string after replacing every uppercase letter with the same lowercase letter.
minimum cost to move chips to the same position we have n chips, where the position of the ith chip is position[i]. we need to move all the chips to the same position. in one step, we can change the position of the ith chip from position[i] to: position[i] + 2 or position[i] - 2 with cost = 0. position[i] + 1 or position[i] - 1 with cost = 1. return the minimum cost needed to move all the chips to the same position.
number of music playlists your music player contains n different songs. you want to listen to goal songs (not necessarily different) during your trip. to avoid boredom, you will create a playlist so that: every song is played at least once. a song can only be played again only if k other songs have been played. given n, goal, and k, return the number of possible playlists that you can create. since the answer can be very large, return it modulo 109 + 7.
maximum score from performing multiplication operations you are given two 0-indexed integer arrays nums and multipliers of size n and m respectively, where n >= m. you begin with a score of 0. you want to perform exactly m operations. on the ith operation (0-indexed) you will: choose one integer x from either the start or the end of the array nums. add multipliers[i] * x to your score. note that multipliers[0] corresponds to the first operation, multipliers[1] to the second operation, and so on. remove x from nums. return the maximum score after performing m operations.
jump game you are given an integer array nums. you are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. return true if you can reach the last index, or false otherwise.
binary tree postorder traversal given the root of a binary tree, return the postorder traversal of its nodes' values.
minimum operations to make a uni-value grid you are given a 2d integer grid of size m x n and an integer x. in one operation, you can add x to or subtract x from any element in the grid. a uni-value grid is a grid where all the elements of it are equal. return the minimum number of operations to make the grid uni-value. if it is not possible, return -1.
employee bonus sql schema table: employee +-------------+---------+ | column name | type | +-------------+---------+ | empid | int | | name | varchar | | supervisor | int | | salary | int | +-------------+---------+ empid is the primary key column for this table. each row of this table indicates the name and the id of an employee in addition to their salary and the id of their manager. table: bonus +-------------+------+ | column name | type | +-------------+------+ | empid | int | | bonus | int | +-------------+------+ empid is the primary key column for this table. empid is a foreign key to empid from the employee table. each row of this table contains the id of an employee and their respective bonus. write an sql query to report the name and bonus amount of each employee with a bonus less than 1000. return the result table in any order. the query result format is in the following example.
return length of arguments passed write a function argumentslength that returns the count of arguments passed to it.
maximum star sum of a graph there is an undirected graph consisting of n nodes numbered from 0 to n - 1. you are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. a star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. in other words, it is a subset of edges of the given graph such that there exists a common node for all edges. the image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node. the star sum is the sum of the values of all the nodes present in the star graph. given an integer k, return the maximum star sum of a star graph containing at most k edges.
minimum ascii delete sum for two strings given two strings s1 and s2, return the lowest ascii sum of deleted characters to make two strings equal.
two furthest houses with different colors there are n houses evenly lined up on the street, and each house is beautifully painted. you are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house. return the maximum distance between two houses with different colors. the distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.
maximum product subarray given an integer array nums, find a subarray that has the largest product, and return the product. the test cases are generated so that the answer will fit in a 32-bit integer.
find greatest common divisor of array given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums. the greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.
three consecutive odds given an integer array arr, return true if there are three consecutive odd numbers in the array. otherwise, return false.
time needed to buy tickets there are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line. you are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i]. each person takes exactly 1 second to buy a ticket. a person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. if a person does not have any tickets left to buy, the person will leave the line. return the time taken for the person at position k (0-indexed) to finish buying tickets.
swapping nodes in a linked list you are given the head of a linked list, and an integer k. return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).
number of 1 bits write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the hamming weight). note: note that in some languages, such as java, there is no unsigned integer type. in this case, the input will be given as a signed integer type. it should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. in java, the compiler represents the signed integers using 2's complement notation. therefore, in example 3, the input represents the signed integer. -3.
largest palindrome product given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. since the answer can be very large, return it modulo 1337.
k-diff pairs in an array given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array. a k-diff pair is an integer pair (nums[i], nums[j]), where the following are true: 0 <= i, j < nums.length i != j |nums[i] - nums[j]| == k notice that |val| denotes the absolute value of val.
rearrange characters to make target string you are given two 0-indexed strings s and target. you can take some letters from s and rearrange them to form new strings. return the maximum number of copies of target that can be formed by taking letters from s and rearranging them.
count unhappy friends you are given a list of preferences for n friends, where n is always even. for each person i, preferences[i] contains a list of friends sorted in the order of preference. in other words, a friend earlier in the list is more preferred than a friend later in the list. friends in each list are denoted by integers from 0 to n-1. all the friends are divided into pairs. the pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi. however, this pairing may cause some of the friends to be unhappy. a friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but: x prefers u over y, and u prefers x over v. return the number of unhappy friends.
flipping an image given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image. to flip an image horizontally means that each row of the image is reversed. for example, flipping [1,1,0] horizontally results in [0,1,1]. to invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. for example, inverting [0,1,1] results in [1,0,0].
most beautiful item for each query you are given a 2d integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively. you are also given a 0-indexed integer array queries. for each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. if no such item exists, then the answer to this query is 0. return an array answer of the same length as queries where answer[j] is the answer to the jth query.
count of smaller numbers after self given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].
contain virus a virus is spreading rapidly, and your task is to quarantine the infected area by installing walls. the world is modeled as an m x n binary grid isinfected, where isinfected[i][j] == 0 represents uninfected cells, and isinfected[i][j] == 1 represents cells contaminated with the virus. a wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary. every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. resources are limited. each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). there will never be a tie. return the number of walls used to quarantine all the infected regions. if the world will become fully infected, return the number of walls used.
swap nodes in pairs given a linked list, swap every two adjacent nodes and return its head. you must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
count all possible routes you are given an array of distinct positive integers locations where locations[i] represents the position of city i. you are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively. at each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. please notice that |x| denotes the absolute value of x. notice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish). return the count of all possible routes from start to finish. since the answer may be too large, return it modulo 109 + 7.
reverse substrings between each pair of parentheses you are given a string s that consists of lower case english letters and brackets. reverse the strings in each pair of matching parentheses, starting from the innermost one. your result should not contain any brackets.
design a food rating system design a food rating system that can do the following: modify the rating of a food item listed in the system. return the highest-rated food item for a type of cuisine in the system. implement the foodratings class: foodratings(string[] foods, string[] cuisines, int[] ratings) initializes the system. the food items are described by foods, cuisines and ratings, all of which have a length of n. foods[i] is the name of the ith food, cuisines[i] is the type of cuisine of the ith food, and ratings[i] is the initial rating of the ith food. void changerating(string food, int newrating) changes the rating of the food item with the name food. string highestrated(string cuisine) returns the name of the food item that has the highest rating for the given type of cuisine. if there is a tie, return the item with the lexicographically smaller name. note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.
product sales analysis i sql schema table: sales +-------------+-------+ | column name | type | +-------------+-------+ | sale_id | int | | product_id | int | | year | int | | quantity | int | | price | int | +-------------+-------+ (sale_id, year) is the primary key of this table. product_id is a foreign key to product table. each row of this table shows a sale on the product product_id in a certain year. note that the price is per unit. table: product +--------------+---------+ | column name | type | +--------------+---------+ | product_id | int | | product_name | varchar | +--------------+---------+ product_id is the primary key of this table. each row of this table indicates the product name of each product. write an sql query that reports the product_name, year, and price for each sale_id in the sales table. return the resulting table in any order. the query result format is in the following example.
remove digit from number to maximize result you are given a string number representing a positive integer and a character digit. return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. the test cases are generated such that digit occurs at least once in number.
optimal partition of string given a string s, partition the string into one or more substrings such that the characters in each substring are unique. that is, no letter appears in a single substring more than once. return the minimum number of substrings in such a partition. note that each character should belong to exactly one substring in a partition.
binary tree paths given the root of a binary tree, return all root-to-leaf paths in any order. a leaf is a node with no children.
max chunks to make sorted ii you are given an integer array arr. we split arr into some number of chunks (i.e., partitions), and individually sort each chunk. after concatenating them, the result should equal the sorted array. return the largest number of chunks we can make to sort the array.
degree of an array given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements. your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.
append characters to string to make subsequence you are given two strings s and t consisting of only lowercase english letters. return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
count of range sum given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive. range sum s(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.
brick wall there is a rectangular brick wall in front of you with n rows of bricks. the ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. the total width of each row is the same. draw a vertical line from the top to the bottom and cross the least bricks. if your line goes through the edge of a brick, then the brick is not considered as crossed. you cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. given the 2d array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.
flatten deeply nested array given a multi-dimensional array arr and a depth n, return a flattened version of that array. a multi-dimensional array is a recursive data structure that contains integers or other multi-dimensional arrays. a flattened array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. this flattening operation should only be done if the current depth of nesting is less than n. the depth of the elements in the first array are considered to be 0. please solve it without the built-in array.flat method.
remove duplicates from sorted list ii given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. return the linked list sorted as well.
h-index ii given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in ascending order, return the researcher's h-index. according to the definition of h-index on wikipedia: the h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times. you must write an algorithm that runs in logarithmic time.
form array by concatenating subarrays of another array you are given a 2d integer array groups of length n. you are also given an integer array nums. you are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups). return true if you can do this task, and false otherwise. note that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. a subarray is a contiguous sequence of elements within an array.
rectangle area given the coordinates of two rectilinear rectangles in a 2d plane, return the total area covered by the two rectangles. the first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2). the second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).
k-th smallest prime fraction you are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. you are also given an integer k. for every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j]. return the kth smallest fraction considered. return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].
minimum cost to make all characters equal you are given a 0-indexed binary string s of length n on which you can apply two types of operations: choose an index i and invert all characters from index 0 to index i (both inclusive), with a cost of i + 1 choose an index i and invert all characters from index i to index n - 1 (both inclusive), with a cost of n - i return the minimum cost to make all characters of the string equal. invert a character means if its value is '0' it becomes '1' and vice-versa.
spiral matrix given an m x n matrix, return all elements of the matrix in spiral order.
scramble string we can scramble a string s to get a string t using the following algorithm: if the length of the string is 1, stop. if the length of the string is > 1, do the following: split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y. randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x. apply step 1 recursively on each of the two substrings x and y. given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.
build array from permutation given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it. a zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).
matrix diagonal sum given a square matrix mat, return the sum of the matrix diagonals. only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.
cat and mouse a game on an undirected graph is played by two players, mouse and cat, who alternate turns. the graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph. the mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0. during each player's turn, they must travel along one edge of the graph that meets where they are. for example, if the mouse is at node 1, it must travel to any node in graph[1]. additionally, it is not allowed for the cat to travel to the hole (node 0.) then, the game can end in three ways: if ever the cat occupies the same node as the mouse, the cat wins. if ever the mouse reaches the hole, the mouse wins. if ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw. given a graph, and assuming both players play optimally, return 1 if the mouse wins the game, 2 if the cat wins the game, or 0 if the game is a draw.
word ladder a transformation sequence from word beginword to word endword using a dictionary wordlist is a sequence of words beginword -> s1 -> s2 -> ... -> sk such that: every adjacent pair of words differs by a single letter. every si for 1 <= i <= k is in wordlist. note that beginword does not need to be in wordlist. sk == endword given two words, beginword and endword, and a dictionary wordlist, return the number of words in the shortest transformation sequence from beginword to endword, or 0 if no such sequence exists.
pacific atlantic water flow there is an m x n rectangular island that borders both the pacific ocean and atlantic ocean. the pacific ocean touches the island's left and top edges, and the atlantic ocean touches the island's right and bottom edges. the island is partitioned into a grid of square cells. you are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c). the island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. water can flow from any cell adjacent to an ocean into the ocean. return a 2d list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the pacific and atlantic oceans.
shortest common supersequence given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. if there are multiple valid strings, return any of them. a string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.
triangle judgement sql schema table: triangle +-------------+------+ | column name | type | +-------------+------+ | x | int | | y | int | | z | int | +-------------+------+ (x, y, z) is the primary key column for this table. each row of this table contains the lengths of three line segments. write an sql query to report for every three line segments whether they can form a triangle. return the result table in any order. the query result format is in the following example.
transpose matrix given a 2d integer array matrix, return the transpose of matrix. the transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.
number of dice rolls with target sum you have n dice, and each die has k faces numbered from 1 to k. given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. since the answer may be too large, return it modulo 109 + 7.
smallest subarrays with maximum bitwise or you are given a 0-indexed array nums of length n, consisting of non-negative integers. for each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise or. in other words, let bij be the bitwise or of the subarray nums[i...j]. you need to find the smallest subarray starting at i, such that bitwise or of this subarray is equal to max(bik) where i <= k <= n - 1. the bitwise or of an array is the bitwise or of all the numbers in it. return an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise or. a subarray is a contiguous non-empty sequence of elements within an array.
group anagrams given an array of strings strs, group the anagrams together. you can return the answer in any order. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
hamming distance the hamming distance between two integers is the number of positions at which the corresponding bits are different. given two integers x and y, return the hamming distance between them.
minimum number of steps to make two strings anagram ii you are given two strings s and t. in one step, you can append any character to either s or t. return the minimum number of steps to make s and t anagrams of each other. an anagram of a string is a string that contains the same characters with a different (or the same) ordering.
restore ip addresses a valid ip address consists of exactly four integers separated by single dots. each integer is between 0 and 255 (inclusive) and cannot have leading zeros. for example, "0.1.2.201" and "192.168.1.1" are valid ip addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid ip addresses. given a string s containing only digits, return all possible valid ip addresses that can be formed by inserting dots into s. you are not allowed to reorder or remove any digits in s. you may return the valid ip addresses in any order.
maximum binary tree you are given an integer array nums with no duplicates. a maximum binary tree can be built recursively from nums using the following algorithm: create a root node whose value is the maximum value in nums. recursively build the left subtree on the subarray prefix to the left of the maximum value. recursively build the right subtree on the subarray suffix to the right of the maximum value. return the maximum binary tree built from nums.
minimum obstacle removal to reach corner you are given a 0-indexed 2d integer array grid of size m x n. each cell has one of two values: 0 represents an empty cell, 1 represents an obstacle that may be removed. you can move up, down, left, or right from and to an empty cell. return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).
path sum given the root of a binary tree and an integer targetsum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetsum. a leaf is a node with no children.
range addition ii you are given an m x n matrix m initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means m[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi. count and return the number of maximum integers in the matrix after performing all the operations.
to be or not to be write a function expect that helps developers test their code. it should take in any value val and return an object with the following two functions. tobe(val) accepts another value and returns true if the two values === each other. if they are not equal, it should throw an error "not equal". nottobe(val) accepts another value and returns true if the two values !== each other. if they are equal, it should throw an error "equal".
destination city you are given the array paths, where paths[i] = [cityai, citybi] means there exists a direct path going from cityai to citybi. return the destination city, that is, the city without any path outgoing to another city. it is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.
find and replace in string you are given a 0-indexed string s that you must perform k replacement operations on. the replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k. to complete the ith replacement operation: check if the substring sources[i] occurs at index indices[i] in the original string s. if it does not occur, do nothing. otherwise if it does occur, replace that substring with targets[i]. for example, if s = "abcd", indices[i] = 0, sources[i] = "ab", and targets[i] = "eee", then the result of this replacement will be "eeecd". all replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. the testcases will be generated such that the replacements will not overlap. for example, a testcase with s = "abc", indices = [0, 1], and sources = ["ab","bc"] will not be generated because the "ab" and "bc" replacements overlap. return the resulting string after performing all replacement operations on s. a substring is a contiguous sequence of characters in a string.
height of binary tree after subtree removal queries you are given the root of a binary tree with n nodes. each node is assigned a unique value from 1 to n. you are also given an array queries of size m. you have to perform m independent queries on the tree where in the ith query you do the following: remove the subtree rooted at the node with the value queries[i] from the tree. it is guaranteed that queries[i] will not be equal to the value of the root. return an array answer of size m where answer[i] is the height of the tree after performing the ith query. note: the queries are independent, so the tree returns to its initial state after each query. the height of a tree is the number of edges in the longest simple path from the root to some node in the tree.
occurrences after bigram given two strings first and second, consider occurrences in some text of the form "first second third", where second comes immediately after first, and third comes immediately after second. return an array of all the words third for each occurrence of "first second third".
longest arithmetic subsequence given an array nums of integers, return the length of the longest arithmetic subsequence in nums. note that: a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. a sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).
construct k palindrome strings given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.
allocate mailboxes given the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street. return the minimum total distance between each house and its nearest mailbox. the test cases are generated so that the answer fits in a 32-bit integer.
max chunks to make sorted you are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1]. we split arr into some number of chunks (i.e., partitions), and individually sort each chunk. after concatenating them, the result should equal the sorted array. return the largest number of chunks we can make to sort the array.
count subtrees with max distance between cities there are n cities numbered from 1 to n. you are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. there exists a unique path between each pair of cities. in other words, the cities form a tree. a subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. two subtrees are different if there is a city in one subtree that is not present in the other. for each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d. return an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d. notice that the distance between the two cities is the number of edges in the path between them.
minimum number of steps to make two strings anagram you are given two strings of the same length s and t. in one step you can choose any character of t and replace it with another character. return the minimum number of steps to make t an anagram of s. an anagram of a string is a string that contains the same characters with a different (or the same) ordering.
most common word given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. it is guaranteed there is at least one word that is not banned, and that the answer is unique. the words in paragraph are case-insensitive and the answer should be returned in lowercase.
filling bookcase shelves you are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. you are also given an integer shelfwidth. we want to place these books in order onto bookcase shelves that have a total width shelfwidth. we choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfwidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. we repeat this process until there are no more books to place. note that at each step of the above process, the order of the books we place is the same order as the given sequence of books. for example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. return the minimum possible height that the total bookshelf can be after placing shelves in this manner.
smallest range ii you are given an integer array nums and an integer k. for each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k. the score of nums is the difference between the maximum and minimum elements in nums. return the minimum score of nums after changing the values at each index.
groups of strings you are given a 0-indexed array of strings words. each string consists of lowercase english letters only. no letter occurs more than once in any string of words. two strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations: adding exactly one letter to the set of the letters of s1. deleting exactly one letter from the set of the letters of s1. replacing exactly one letter from the set of the letters of s1 with any letter, including itself. the array words can be divided into one or more non-intersecting groups. a string belongs to a group if any one of the following is true: it is connected to at least one other string of the group. it is the only string present in the group. note that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. it can be proved that such an arrangement is always unique. return an array ans of size 2 where: ans[0] is the maximum number of groups words can be divided into, and ans[1] is the size of the largest group.
license key formatting you are given a license key represented as a string s that consists of only alphanumeric characters and dashes. the string is separated into n + 1 groups by n dashes. you are also given an integer k. we want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. return the reformatted license key.
sequentially ordinal rank tracker a scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. locations can be ranked from the best to the worst. the higher the score, the better the location. if the scores of two locations are equal, then the location with the lexicographically smaller name is better. you are building a system that tracks the ranking of locations with the system initially starting with no locations. it supports: adding scenic locations, one at a time. querying the ith best location of all locations already added, where i is the number of times the system has been queried (including the current query). for example, when the system is queried for the 4th time, it returns the 4th best location of all locations already added. note that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system. implement the sortracker class: sortracker() initializes the tracker system. void add(string name, int score) adds a scenic location with name and score to the system. string get() queries and returns the ith best location, where i is the number of times this method has been invoked (including this invocation).
number of ways to buy pens and pencils you are given an integer total indicating the amount of money you have. you are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. you can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil. return the number of distinct ways you can buy some number of pens and pencils.
all o`one data structure design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts. implement the allone class: allone() initializes the object of the data structure. inc(string key) increments the count of the string key by 1. if key does not exist in the data structure, insert it with count 1. dec(string key) decrements the count of the string key by 1. if the count of key is 0 after the decrement, remove it from the data structure. it is guaranteed that key exists in the data structure before the decrement. getmaxkey() returns one of the keys with the maximal count. if no element exists, return an empty string "". getminkey() returns one of the keys with the minimum count. if no element exists, return an empty string "". note that each function must run in o(1) average time complexity.
sum of k-mirror numbers a k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k. for example, 9 is a 2-mirror number. the representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward. on the contrary, 4 is not a 2-mirror number. the representation of 4 in base-2 is 100, which does not read the same both forward and backward. given the base k and the number n, return the sum of the n smallest k-mirror numbers.
minimum number of moves to seat everyone there are n seats and n students in a room. you are given an array seats of length n, where seats[i] is the position of the ith seat. you are also given the array students of length n, where students[j] is the position of the jth student. you may perform the following move any number of times: increase or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1) return the minimum number of moves required to move each student to a seat such that no two students are in the same seat. note that there may be multiple seats or students in the same position at the beginning.
second minimum node in a binary tree given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. if the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. more formally, the property root.val = min(root.left.val, root.right.val) always holds. given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree. if no such second minimum value exists, output -1 instead.
number of different subsequences gcds you are given an array nums that consists of positive integers. the gcd of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly. for example, the gcd of the sequence [4,6,16] is 2. a subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. for example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. return the number of different gcds among all non-empty subsequences of nums.
path with maximum gold in a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty. return the maximum amount of gold you can collect under the conditions: every time you are located in a cell you will collect all the gold in that cell. from your position, you can walk one step to the left, right, up, or down. you can't visit the same cell more than once. never visit a cell with 0 gold. you can start and stop collecting gold from any position in the grid that has some gold.
minimum add to make parentheses valid a parentheses string is valid if and only if: it is the empty string, it can be written as ab (a concatenated with b), where a and b are valid strings, or it can be written as (a), where a is a valid string. you are given a parentheses string s. in one move, you can insert a parenthesis at any position of the string. for example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))". return the minimum number of moves required to make s valid.
queue reconstruction by height you are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi. reconstruct and return the queue that is represented by the input array people. the returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).
expressive words sometimes people repeat letters to represent extra feeling. for example: "hello" -> "heeellooo" "hi" -> "hiiii" in these strings like "heeellooo", we have groups of adjacent letters that are all the same: "h", "eee", "ll", "ooo". you are given a string s and an array of query strings words. a query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more. for example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has a size less than three. also, we could do another extension like "ll" -> "lllll" to get "helllllooo". if s = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: query = "hello" -> "hellooo" -> "helllllooo" = s. return the number of query strings that are stretchy.
move zeroes given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. note that you must do this in-place without making a copy of the array.
delete characters to make fancy string a fancy string is a string where no three consecutive characters are equal. given a string s, delete the minimum possible number of characters from s to make it fancy. return the final string after the deletion. it can be shown that the answer will always be unique.
merge similar items you are given two 2d integer arrays, items1 and items2, representing two sets of items. each array items has the following properties: items[i] = [valuei, weighti] where valuei represents the value and weighti represents the weight of the ith item. the value of each item in items is unique. return a 2d integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei. note: ret should be returned in ascending order by value.
find mode in binary search tree given the root of a binary search tree (bst) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it. if the tree has more than one mode, return them in any order. assume a bst is defined as follows: the left subtree of a node contains only nodes with keys less than or equal to the node's key. the right subtree of a node contains only nodes with keys greater than or equal to the node's key. both the left and right subtrees must also be binary search trees.
self dividing numbers a self-dividing number is a number that is divisible by every digit it contains. for example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. a self-dividing number is not allowed to contain the digit zero. given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].
subrectangle queries implement the class subrectanglequeries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods: 1. updatesubrectangle(int row1, int col1, int row2, int col2, int newvalue) updates all values with newvalue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2). 2. getvalue(int row, int col) returns the current value of the coordinate (row,col) from the rectangle.
split a string into the max number of unique substrings given a string s, return the maximum number of unique substrings that the given string can be split into. you can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. however, you must split the substrings such that all of them are unique. a substring is a contiguous sequence of characters within a string.
rotate list given the head of a linked list, rotate the list to the right by k places.
maximum non negative product in a matrix you are given a m x n matrix grid. initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix. among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. the product of a path is the product of all integers in the grid cells visited along the path. return the maximum non-negative product modulo 109 + 7. if the maximum product is negative, return -1. notice that the modulo is performed after getting the maximum product.
smallest string starting from leaf you are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'. return the lexicographically smallest string that starts at a leaf of this tree and ends at the root. as a reminder, any shorter prefix of a string is lexicographically smaller. for example, "ab" is lexicographically smaller than "aba". a leaf of a node is a node that has no children.
generate fibonacci sequence write a generator function that returns a generator object which yields the fibonacci sequence. the fibonacci sequence is defined by the relation xn = xn-1 + xn-2. the first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.
array wrapper create a class arraywrapper that accepts an array of integers in it's constructor. this class should have two features: when two instances of this class are added together with the + operator, the resulting value is the sum of all the elements in both arrays. when the string() function is called on the instance, it will return a comma separated string surrounded by brackets. for example, [1,2,3].
maximum number of non-overlapping substrings given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions: the substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true. a substring that contains a certain character c must also contain all occurrences of c. find the maximum number of substrings that meet the above conditions. if there are multiple solutions with the same number of substrings, return the one with minimum total length. it can be shown that there exists a unique solution of minimum total length. notice that you can return the substrings in any order.
distinct subsequences given two strings s and t, return the number of distinct subsequences of s which equals t. the test cases are generated so that the answer fits on a 32-bit signed integer.
replace elements in an array you are given a 0-indexed array nums that consists of n distinct positive integers. apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1]. it is guaranteed that in the ith operation: operations[i][0] exists in nums. operations[i][1] does not exist in nums. return the array obtained after applying all the operations.
prime number of set bits in binary representation given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation. recall that the number of set bits an integer has is the number of 1's present when written in binary. for example, 21 written in binary is 10101, which has 3 set bits.
add two numbers ii you are given two non-empty linked lists representing two non-negative integers. the most significant digit comes first and each of their nodes contains a single digit. add the two numbers and return the sum as a linked list. you may assume the two numbers do not contain any leading zero, except the number 0 itself.
valid permutations for di sequence you are given a string s of length n where s[i] is either: 'd' means decreasing, or 'i' means increasing. a permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i: if s[i] == 'd', then perm[i] > perm[i + 1], and if s[i] == 'i', then perm[i] < perm[i + 1]. return the number of valid permutations perm. since the answer may be large, return it modulo 109 + 7.
mirror reflection there is a special square room with mirrors on each of the four walls. except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2. the square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor. given the two integers p and q, return the number of the receptor that the ray meets first. the test cases are guaranteed so that the ray will meet a receptor eventually.
binary tree tilt given the root of a binary tree, return the sum of every tree node's tilt. the tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. if a node does not have a left child, then the sum of the left subtree node values is treated as 0. the rule is similar if the node does not have a right child.
valid arrangement of pairs you are given a 0-indexed 2d integer array pairs where pairs[i] = [starti, endi]. an arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti. return any valid arrangement of pairs. note: the inputs will be generated such that there exists a valid arrangement of pairs.
minimize result by adding parentheses to expression you are given a 0-indexed string expression of the form "<num1>+<num2>" where <num1> and <num2> represent positive integers. add a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. the left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'. return expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. if there are multiple answers that yield the same result, return any of them. the input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.
split message based on limit you are given a string, message, and a positive integer, limit. you must split message into one or more parts based on limit. each resulting part should have the suffix "<a/b>", where "b" is to be replaced with the total number of parts and "a" is to be replaced with the index of the part, starting from 1 and going up to b. additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit. the resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. also, the result should contain as few parts as possible. return the parts message would be split into as an array of strings. if it is impossible to split message as required, return an empty array.
minimum total cost to make arrays unequal you are given two 0-indexed integer arrays nums1 and nums2, of equal length n. in one operation, you can swap the values of any two indices of nums1. the cost of this operation is the sum of the indices. find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations. return the minimum total cost such that nums1 and nums2 satisfy the above condition. in case it is not possible, return -1.
swim in rising water you are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j). the rain starts to fall. at time t, the depth of the water everywhere is t. you can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. you can swim infinite distances in zero time. of course, you must stay within the boundaries of the grid during your swim. return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).
number of people aware of a secret on day 1, one person discovers a secret. you are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. you are also given an integer forget, which means that each person will forget the secret forget days after discovering it. a person cannot share the secret on the same day they forgot it, or on any day afterwards. given an integer n, return the number of people who know the secret at the end of day n. since the answer may be very large, return it modulo 109 + 7.
longest turbulent subarray given an integer array arr, return the length of a maximum size turbulent subarray of arr. a subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray. more formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if: for i <= k < j: arr[k] > arr[k + 1] when k is odd, and arr[k] < arr[k + 1] when k is even. or, for i <= k < j: arr[k] > arr[k + 1] when k is even, and arr[k] < arr[k + 1] when k is odd.
maximal score after applying k operations you are given a 0-indexed integer array nums and an integer k. you have a starting score of 0. in one operation: choose an index i such that 0 <= i < nums.length, increase your score by nums[i], and replace nums[i] with ceil(nums[i] / 3). return the maximum possible score you can attain after applying exactly k operations. the ceiling function ceil(val) is the least integer greater than or equal to val.
bitwise and of numbers range given two integers left and right that represent the range [left, right], return the bitwise and of all numbers in this range, inclusive.
knight dialer the chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an l). the possible movements of chess knight are shown in this diagaram: a chess knight can move as indicated in the chess diagram below: we have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell). given an integer n, return how many distinct phone numbers of length n we can dial. you are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. all jumps should be valid knight jumps. as the answer may be very large, return the answer modulo 109 + 7.
find consecutive integers from a data stream for a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value. implement the datastream class: datastream(int value, int k) initializes the object with an empty integer stream and the two integers value and k. boolean consec(int num) adds num to the stream of integers. returns true if the last k integers are equal to value, and false otherwise. if there are less than k integers, the condition does not hold true, so returns false.
reverse integer given a signed 32-bit integer x, return x with its digits reversed. if reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. assume the environment does not allow you to store 64-bit integers (signed or unsigned).
alternating digit sum you are given a positive integer n. each digit of n has a sign according to the following rules: the most significant digit is assigned a positive sign. each other digit has an opposite sign to its adjacent digits. return the sum of all digits with their corresponding sign.
largest magic square a k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. the integers in the magic square do not have to be distinct. every 1 x 1 grid is trivially a magic square. given an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.
check if array pairs are divisible by k given an array of integers arr of even length n and an integer k. we want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k. return true if you can find a way to do that or false otherwise.
maximize the topmost element after k moves you are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile. in one move, you can perform either of the following: if the pile is not empty, remove the topmost element of the pile. if there are one or more removed elements, add any one of them back onto the pile. this element becomes the new topmost element. you are also given an integer k, which denotes the total number of moves to be made. return the maximum value of the topmost element of the pile possible after exactly k moves. in case it is not possible to obtain a non-empty pile after k moves, return -1.
path in zigzag labelled binary tree in an infinite binary tree where every node has two children, the nodes are labelled in row order. in the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left. given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.
perfect squares given an integer n, return the least number of perfect square numbers that sum to n. a perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. for example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.
network delay time you are given a network of n nodes, labeled from 1 to n. you are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target. we will send a signal from a given node k. return the minimum time it takes for all the n nodes to receive the signal. if it is impossible for all the n nodes to receive the signal, return -1.
convert sorted array to binary search tree given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
super pow your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.
divide players into teams of equal skill you are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. divide the players into n / 2 teams of size 2 such that the total skill of each team is equal. the chemistry of a team is equal to the product of the skills of the players on that team. return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.
range sum of bst given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].
range sum of sorted subarray sums you are given the array nums consisting of n positive integers. you computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers. return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. since the answer can be a huge number return it modulo 109 + 7.
mean of array after removing some elements given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements. answers within 10-5 of the actual answer will be considered accepted.
longest chunked palindrome decomposition you are given a string text. you should split it to k substrings (subtext1, subtext2, ..., subtextk) such that: subtexti is a non-empty string. the concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text). subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k). return the largest possible value of k.
range sum query 2d - immutable given a 2d matrix matrix, handle multiple queries of the following type: calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). implement the nummatrix class: nummatrix(int[][] matrix) initializes the object with the integer matrix matrix. int sumregion(int row1, int col1, int row2, int col2) returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). you must design an algorithm where sumregion works on o(1) time complexity.
find the pivot integer given a positive integer n, find the pivot integer x such that: the sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively. return the pivot integer x. if no such integer exists, return -1. it is guaranteed that there will be at most one pivot index for the given input.
maximum number of consecutive values you can make you are given an integer array coins of length n which represents the n coins that you own. the value of the ith coin is coins[i]. you can make some value x if you can choose some of your n coins such that their values sum up to x. return the maximum number of consecutive integer values that you can make with your coins starting from and including 0. note that you may have multiple coins of the same value.
minimum absolute difference queries the minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. if all elements of a are the same, the minimum absolute difference is -1. for example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. note that it is not 0 because a[i] and a[j] must be different. you are given an integer array nums and the array queries where queries[i] = [li, ri]. for each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive). return an array ans where ans[i] is the answer to the ith query. a subarray is a contiguous sequence of elements in an array. the value of |x| is defined as: x if x >= 0. -x if x < 0.
moving stones until consecutive there are three stones in different positions on the x-axis. you are given three integers a, b, and c, the positions of the stones. in one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. formally, let's say the stones are currently at positions x, y, and z with x < y < z. you pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y. the game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play.
longest palindromic subsequence given a string s, find the longest palindromic subsequence's length in s. a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
excel sheet column title given an integer columnnumber, return its corresponding column title as it appears in an excel sheet. for example: a -> 1 b -> 2 c -> 3 ... z -> 26 aa -> 27 ab -> 28 ...
maximum gap given an integer array nums, return the maximum difference between two successive elements in its sorted form. if the array contains less than two elements, return 0. you must write an algorithm that runs in linear time and uses linear extra space.
escape the spreading fire you are given a 0-indexed 2d integer array grid of size m x n which represents a field. each cell has one of three values: 0 represents grass, 1 represents fire, 2 represents a wall that you and fire cannot pass through. you are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). every minute, you may move to an adjacent grass cell. after your move, every fire cell will spread to all adjacent cells that are not walls. return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. if this is impossible, return -1. if you can always reach the safehouse regardless of the minutes stayed, return 109. note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse. a cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).
minimum path cost in a grid you are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. you can move in this matrix from a cell to any other cell in the next row. that is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). note that it is not possible to move from cells in the last row. each possible move has a cost given by a 0-indexed 2d array movecost of size (m * n) x n, where movecost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. the cost of moving from cells in the last row of grid can be ignored. the cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.
longest univalue path given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. this path may or may not pass through the root. the length of the path between two nodes is represented by the number of edges between them.
minimum non-zero product of the array elements you are given a positive integer p. consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. you are allowed to do the following operation any number of times: choose two elements x and y from nums. choose a bit in x and swap it with its corresponding bit in y. corresponding bit refers to the bit that is in the same position in the other integer. for example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001. find the minimum non-zero product of nums after performing the above operation any number of times. return this product modulo 109 + 7. note: the answer should be the minimum product before the modulo operation is done.
replace all ?'s to avoid consecutive repeating characters given a string s containing only lowercase english letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. you cannot modify the non '?' characters. it is guaranteed that there are no consecutive repeating characters in the given string except for '?'. return the final string after all the conversions (possibly zero) have been made. if there is more than one solution, return any of them. it can be shown that an answer is always possible with the given constraints.
map of highest peak you are given an integer matrix iswater of size m x n that represents a map of land and water cells. if iswater[i][j] == 0, cell (i, j) is a land cell. if iswater[i][j] == 1, cell (i, j) is a water cell. you must assign each cell a height in a way that follows these rules: the height of each cell must be non-negative. if the cell is a water cell, its height must be 0. any two adjacent cells must have an absolute height difference of at most 1. a cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching). find an assignment of heights such that the maximum height in the matrix is maximized. return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. if there are multiple solutions, return any of them.
restore the array a program was supposed to print an array of integers. the program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array. given the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. since the answer may be very large, return it modulo 109 + 7.
merge sorted array you are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. merge nums1 and nums2 into a single array sorted in non-decreasing order. the final sorted array should not be returned by the function, but instead be stored inside the array nums1. to accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
delete duplicate emails sql schema table: person +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | email | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table contains an email. the emails will not contain uppercase letters. write an sql query to delete all the duplicate emails, keeping only one unique email with the smallest id. note that you are supposed to write a delete statement and not a select one. after running your script, the answer shown is the person table. the driver will first compile and run your piece of code and then show the person table. the final order of the person table does not matter. the query result format is in the following example.
number of rectangles that can form the largest square you are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi. you can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. for example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4. let maxlen be the side length of the largest square you can obtain from any of the given rectangles. return the number of rectangles that can make a square with a side length of maxlen.
nth magical number a positive integer is magical if it is divisible by either a or b. given the three integers n, a, and b, return the nth magical number. since the answer may be very large, return it modulo 109 + 7.
valid palindrome ii given a string s, return true if the s can be palindrome after deleting at most one character from it.
longest cycle in a graph you are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge. the graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. if there is no outgoing edge from node i, then edges[i] == -1. return the length of the longest cycle in the graph. if no cycle exists, return -1. a cycle is a path that starts and ends at the same node.
minimize maximum of array you are given a 0-indexed array nums comprising of n non-negative integers. in one operation, you must: choose an integer i such that 1 <= i < n and nums[i] > 0. decrease nums[i] by 1. increase nums[i - 1] by 1. return the minimum possible value of the maximum integer of nums after performing any number of operations.
maximize number of subsequences in a string you are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase english letters. you can add either pattern[0] or pattern[1] anywhere in text exactly once. note that the character can be added even at the beginning or at the end of text. return the maximum number of times pattern can occur as a subsequence of the modified text. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
binary search given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. if target exists, then return its index. otherwise, return -1. you must write an algorithm with o(log n) runtime complexity.
validate ip address given a string queryip, return "ipv4" if ip is a valid ipv4 address, "ipv6" if ip is a valid ipv6 address or "neither" if ip is not a correct ip of any type. a valid ipv4 address is an ip in the form "x1.x2.x3.x4" where 0 <= xi <= 255 and xi cannot contain leading zeros. for example, "192.168.1.1" and "192.168.1.0" are valid ipv4 addresses while "192.168.01.1", "192.168.1.00", and "192.168@1.1" are invalid ipv4 addresses. a valid ipv6 address is an ip in the form "x1:x2:x3:x4:x5:x6:x7:x8" where: 1 <= xi.length <= 4 xi is a hexadecimal string which may contain digits, lowercase english letter ('a' to 'f') and upper-case english letters ('a' to 'f'). leading zeros are allowed in xi. for example, "2001:0db8:85a3:0000:0000:8a2e:0370:7334" and "2001:db8:85a3:0:0:8a2e:0370:7334" are valid ipv6 addresses, while "2001:0db8:85a3::8a2e:037j:7334" and "02001:0db8:85a3:0000:0000:8a2e:0370:7334" are invalid ipv6 addresses.
number of unequal triplets in array you are given a 0-indexed array of positive integers nums. find the number of triplets (i, j, k) that meet the following conditions: 0 <= i < j < k < nums.length nums[i], nums[j], and nums[k] are pairwise distinct. in other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k]. return the number of triplets that meet the conditions.
maximize win from two segments there are some prizes on the x-axis. you are given an integer array prizepositions that is sorted in non-decreasing order, where prizepositions[i] is the position of the ith prize. there could be different prizes at the same position on the line. you are also given an integer k. you are allowed to select two segments with integer endpoints. the length of each segment must be k. you will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). the two selected segments may intersect. for example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizepositions[i] <= 3 or 2 <= prizepositions[i] <= 4. return the maximum number of prizes you can win if you choose the two segments optimally.
score after flipping matrix you are given an m x n binary matrix grid. a move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's). every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers. return the highest possible score after making any number of moves (including zero moves).
design twitter design a simplified version of twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed. implement the twitter class: twitter() initializes your twitter object. void posttweet(int userid, int tweetid) composes a new tweet with id tweetid by the user userid. each call to this function will be made with a unique tweetid. list<integer> getnewsfeed(int userid) retrieves the 10 most recent tweet ids in the user's news feed. each item in the news feed must be posted by users who the user followed or by the user themself. tweets must be ordered from most recent to least recent. void follow(int followerid, int followeeid) the user with id followerid started following the user with id followeeid. void unfollow(int followerid, int followeeid) the user with id followerid started unfollowing the user with id followeeid.
memoize given a function fn, return a memoized version of that function. a memoized function is a function that will never be called twice with the same inputs. instead it will return a cached value. you can assume there are 3 possible input functions: sum, fib, and factorial. sum accepts two integers a and b and returns a + b. fib accepts a single integer n and returns 1 if n <= 1 or fib(n - 1) + fib(n - 2) otherwise. factorial accepts a single integer n and returns 1 if n <= 1 or factorial(n - 1) * n otherwise.
as far from land as possible given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. if no land or water exists in the grid, return -1. the distance used in this problem is the manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
find duplicate subtrees given the root of a binary tree, return all duplicate subtrees. for each kind of duplicate subtrees, you only need to return the root node of any one of them. two trees are duplicate if they have the same structure with the same node values.
student attendance record ii an attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters: 'a': absent. 'l': late. 'p': present. any student is eligible for an attendance award if they meet both of the following criteria: the student was absent ('a') for strictly fewer than 2 days total. the student was never late ('l') for 3 or more consecutive days. given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. the answer may be very large, so return it modulo 109 + 7.
minimum sideway jumps there is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. a frog starts at point 0 in the second lane and wants to jump to point n. however, there could be obstacles along the way. you are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. if obstacles[i] == 0, there are no obstacles at point i. there will be at most one obstacle in the 3 lanes at each point. for example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2. the frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. to avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane. for example, the frog can jump from lane 3 at point 3 to lane 1 at point 3. return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0. note: there will be no obstacles on points 0 and n.
rotting oranges you are given an m x n grid where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. return the minimum number of minutes that must elapse until no cell has a fresh orange. if this is impossible, return -1.
decode xored permutation there is an integer array perm that is a permutation of the first n positive integers, where n is always odd. it was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] xor perm[i + 1]. for example, if perm = [1,3,2], then encoded = [2,1]. given the encoded array, return the original array perm. it is guaranteed that the answer exists and is unique.
filter elements from array given an integer array arr and a filtering function fn, return a new array with a fewer or equal number of elements. the returned array should only contain elements where fn(arr[i], i) evaluated to a truthy value. please solve it without the built-in array.filter method.
flip string to monotone increasing a binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none). you are given a binary string s. you can flip s[i] changing it from 0 to 1 or from 1 to 0. return the minimum number of flips to make s monotone increasing.
ones and zeroes you are given an array of binary strings strs and two integers m and n. return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset. a set x is a subset of a set y if all elements of x are also elements of y.
largest plus sign you are given an integer n. you have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. the ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0. return the order of the largest axis-aligned plus sign of 1's contained in grid. if there is none, return 0. an axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.
substring with largest variance the variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. note the two characters may or may not be the same. given a string s consisting of lowercase english letters only, return the largest variance possible among all substrings of s. a substring is a contiguous sequence of characters within a string.
design graph with shortest path calculator there is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. the edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgecosti] meaning that there is an edge from fromi to toi with the cost edgecosti. implement the graph class: graph(int n, int[][] edges) initializes the object with n nodes and the given edges. addedge(int[] edge) adds an edge to the list of edges where edge = [from, to, edgecost]. it is guaranteed that there is no edge between the two nodes before adding this one. int shortestpath(int node1, int node2) returns the minimum cost of a path from node1 to node2. if no path exists, return -1. the cost of a path is the sum of the costs of the edges in the path.
matrix cells in distance order you are given four integers row, cols, rcenter, and ccenter. there is a rows x cols matrix and you are on the cell with the coordinates (rcenter, ccenter). return the coordinates of all cells in the matrix, sorted by their distance from (rcenter, ccenter) from the smallest distance to the largest distance. you may return the answer in any order that satisfies this condition. the distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.
rank scores sql schema table: scores +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | score | decimal | +-------------+---------+ id is the primary key for this table. each row of this table contains the score of a game. score is a floating point value with two decimal places. write an sql query to rank the scores. the ranking should be calculated according to the following rules: the scores should be ranked from the highest to the lowest. if there is a tie between two scores, both should have the same ranking. after a tie, the next ranking number should be the next consecutive integer value. in other words, there should be no holes between ranks. return the result table ordered by score in descending order. the query result format is in the following example.
calculate amount paid in taxes you are given a 0-indexed 2d integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. the brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length). tax is calculated as follows: the first upper0 dollars earned are taxed at a rate of percent0. the next upper1 - upper0 dollars earned are taxed at a rate of percent1. the next upper2 - upper1 dollars earned are taxed at a rate of percent2. and so on. you are given an integer income representing the amount of money you earned. return the amount of money that you have to pay in taxes. answers within 10-5 of the actual answer will be accepted.
apply bitwise operations to make strings equal you are given two 0-indexed binary strings s and target of the same length n. you can do the following operation on s any number of times: choose two different indices i and j where 0 <= i, j < n. simultaneously, replace s[i] with (s[i] or s[j]) and s[j] with (s[i] xor s[j]). for example, if s = "0110", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] or s[2] = 0 or 1 = 1), and s[2] with (s[0] xor s[2] = 0 xor 1 = 1), so we will have s = "1110". return true if you can make the string s equal to target, or false otherwise.
closest prime numbers in range given two positive integers left and right, find the two integers num1 and num2 such that: left <= nums1 < nums2 <= right . nums1 and nums2 are both prime numbers. nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions. return the positive integer array ans = [nums1, nums2]. if there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist. a number greater than 1 is called prime if it is only divisible by 1 and itself.
fruit into baskets you are visiting a farm that has a single row of fruit trees arranged from left to right. the trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces. you want to collect as much fruit as possible. however, the owner has some strict rules that you must follow: you only have two baskets, and each basket can only hold a single type of fruit. there is no limit on the amount of fruit each basket can hold. starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. the picked fruits must fit in one of your baskets. once you reach a tree with fruit that cannot fit in your baskets, you must stop. given the integer array fruits, return the maximum number of fruits you can pick.
check if number has equal digit count and digit value you are given a 0-indexed string num of length n consisting of digits. return true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.
kth ancestor of a tree node you are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. the root of the tree is node 0. find the kth ancestor of a given node. the kth ancestor of a tree node is the kth node in the path from that node to the root node. implement the treeancestor class: treeancestor(int n, int[] parent) initializes the object with the number of nodes in the tree and the parent array. int getkthancestor(int node, int k) return the kth ancestor of the given node node. if there is no such ancestor, return -1.
a number after a double reversal reversing an integer means to reverse all its digits. for example, reversing 2021 gives 1202. reversing 12300 gives 321 as the leading zeros are not retained. given an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. return true if reversed2 equals num. otherwise return false.
design cancellable function sometimes you have a long running task, and you may wish to cancel it before it completes. to help with this goal, write a function cancellable that accepts a generator object and returns an array of two values: a cancel function and a promise. you may assume the generator function will only yield promises. it is your function's responsibility to pass the values resolved by the promise back to the generator. if the promise rejects, your function should throw that error back to the generator. if the cancel callback is called before the generator is done, your function should throw an error back to the generator. that error should be the string "cancelled" (not an error object). if the error was caught, the returned promise should resolve with the next value that was yielded or returned. otherwise, the promise should reject with the thrown error. no more code should be executed. when the generator is done, the promise your function returned should resolve the value the generator returned. if, however, the generator throws an error, the returned promise should reject with the error. an example of how your code would be used: function* tasks() { const val = yield new promise(resolve => resolve(2 + 2)); yield new promise(resolve => settimeout(resolve, 100)); return val + 1; // calculation shouldn't be done. } const [cancel, promise] = cancellable(tasks()); settimeout(cancel, 50); promise.catch(console.log); // logs "cancelled" at t=50ms if instead cancel() was not called or was called after t=100ms, the promise would have resolved 5.
number of paths with max score you are given a square board of characters. you can move on the board starting at the bottom right square marked with the character 's'. you need to reach the top left square marked with the character 'e'. the rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'x'. in one move you can go up, left or up-left (diagonally) only if there is no obstacle there. return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7. in case there is no path, return [0, 0].
verbal arithmetic puzzle given an equation, represented by words on the left side and the result on the right side. you need to check if the equation is solvable under the following rules: each character is decoded as one digit (0 - 9). no two characters can map to the same digit. each words[i] and result are decoded as one number without leading zeros. sum of numbers on the left side (words) will equal to the number on the right side (result). return true if the equation is solvable, otherwise return false.
average time of process per machine sql schema table: activity +----------------+---------+ | column name | type | +----------------+---------+ | machine_id | int | | process_id | int | | activity_type | enum | | timestamp | float | +----------------+---------+ the table shows the user activities for a factory website. (machine_id, process_id, activity_type) is the primary key of this table. machine_id is the id of a machine. process_id is the id of a process running on the machine with id machine_id. activity_type is an enum of type ('start', 'end'). timestamp is a float representing the current time in seconds. 'start' means the machine starts the process at the given timestamp and 'end' means the machine ends the process at the given timestamp. the 'start' timestamp will always be before the 'end' timestamp for every (machine_id, process_id) pair. there is a factory website that has several machines each running the same number of processes. write an sql query to find the average time each machine takes to complete a process. the time to complete a process is the 'end' timestamp minus the 'start' timestamp. the average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run. the resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places. return the result table in any order. the query result format is in the following example.
number of good ways to split a string you are given a string s. a split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same. return the number of good splits you can make in s.
last person to fit in the bus sql schema table: queue +-------------+---------+ | column name | type | +-------------+---------+ | person_id | int | | person_name | varchar | | weight | int | | turn | int | +-------------+---------+ person_id is the primary key column for this table. this table has the information about all people waiting for a bus. the person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table. turn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board. weight is the weight of the person in kilograms. there is a queue of people waiting to board a bus. however, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board. write an sql query to find the person_name of the last person that can fit on the bus without exceeding the weight limit. the test cases are generated such that the first person does not exceed the weight limit. the query result format is in the following example.
number of ways to select buildings you are given a 0-indexed binary string s which represents the types of buildings along a street where: s[i] = '0' denotes that the ith building is an office and s[i] = '1' denotes that the ith building is a restaurant. as a city official, you would like to select 3 buildings for random inspection. however, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type. for example, given s = "001101", we cannot select the 1st, 3rd, and 5th buildings as that would form "011" which is not allowed due to having two consecutive buildings of the same type. return the number of valid ways to select 3 buildings.
permutations given an array nums of distinct integers, return all the possible permutations. you can return the answer in any order.
smallest index with equal value given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist. x mod y denotes the remainder when x is divided by y.
friend requests ii: who has the most friends sql schema table: requestaccepted +----------------+---------+ | column name | type | +----------------+---------+ | requester_id | int | | accepter_id | int | | accept_date | date | +----------------+---------+ (requester_id, accepter_id) is the primary key for this table. this table contains the id of the user who sent the request, the id of the user who received the request, and the date when the request was accepted. write an sql query to find the people who have the most friends and the most friends number. the test cases are generated so that only one person has the most friends. the query result format is in the following example.
project employees i sql schema table: project +-------------+---------+ | column name | type | +-------------+---------+ | project_id | int | | employee_id | int | +-------------+---------+ (project_id, employee_id) is the primary key of this table. employee_id is a foreign key to employee table. each row of this table indicates that the employee with employee_id is working on the project with project_id. table: employee +------------------+---------+ | column name | type | +------------------+---------+ | employee_id | int | | name | varchar | | experience_years | int | +------------------+---------+ employee_id is the primary key of this table. it's guaranteed that experience_years is not null. each row of this table contains information about one employee. write an sql query that reports the average experience years of all the employees for each project, rounded to 2 digits. return the result table in any order. the query result format is in the following example.
maximum difference by remapping a digit you are given an integer num. you know that danny mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit. return the difference between the maximum and minimum values danny can make by remapping exactly one digit in num. notes: when danny remaps a digit d1 to another digit d2, danny replaces all occurrences of d1 in num with d2. danny can remap a digit to itself, in which case num does not change. danny can remap different digits for obtaining minimum and maximum values respectively. the resulting number after remapping can contain leading zeroes. we mentioned "danny mittal" to congratulate him on being in the top 10 in weekly contest 326.
evaluate the bracket pairs of a string you are given a string s that contains some bracket pairs, with each pair containing a non-empty key. for example, in the string "(name)is(age)yearsold", there are two bracket pairs that contain the keys "name" and "age". you know the values of a wide range of keys. this is represented by a 2d string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei. you are tasked to evaluate all of the bracket pairs. when you evaluate a bracket pair that contains some key keyi, you will: replace keyi and the bracket pair with the key's corresponding valuei. if you do not know the value of the key, you will replace keyi and the bracket pair with a question mark "?" (without the quotation marks). each key will appear at most once in your knowledge. there will not be any nested brackets in s. return the resulting string after evaluating all of the bracket pairs.
detect pattern of length m repeated k or more times given an array of positive integers arr, find a pattern of length m that is repeated k or more times. a pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. a pattern is defined by its length and the number of repetitions. return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.
n-ary tree preorder traversal given the root of an n-ary tree, return the preorder traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)
construct binary tree from preorder and postorder traversal given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree. if there exist multiple answers, you can return any of them.
minimum number of work sessions to finish the tasks there are n tasks assigned to you. the task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. a work session is when you work for at most sessiontime consecutive hours and then take a break. you should finish the given tasks in a way that satisfies the following conditions: if you start a task in a work session, you must complete it in the same work session. you can start a new task immediately after finishing the previous one. you may complete the tasks in any order. given tasks and sessiontime, return the minimum number of work sessions needed to finish all the tasks following the conditions above. the tests are generated such that sessiontime is greater than or equal to the maximum element in tasks[i].
construct binary search tree from preorder traversal given an array of integers preorder, which represents the preorder traversal of a bst (i.e., binary search tree), construct the tree and return its root. it is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases. a binary search tree is a binary tree where for every node, any descendant of node.left has a value strictly less than node.val, and any descendant of node.right has a value strictly greater than node.val. a preorder traversal of a binary tree displays the value of the node first, then traverses node.left, then traverses node.right.
count distinct numbers on board you are given a positive integer n, that is initially placed on a board. every day, for 109 days, you perform the following procedure: for each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1. then, place those numbers on the board. return the number of distinct integers present on the board after 109 days have elapsed. note: once a number is placed on the board, it will remain on it until the end. % stands for the modulo operation. for example, 14 % 3 is 2.
find the most competitive subsequence given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k. an array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array. we define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. for example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.
number of atoms given a string formula representing a chemical formula, return the count of each atom. the atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name. one or more digits representing that element's count may follow if the count is greater than 1. if the count is 1, no digits will follow. for example, "h2o" and "h2o2" are possible, but "h1o2" is impossible. two formulas are concatenated together to produce another formula. for example, "h2o2he3mg4" is also a formula. a formula placed in parentheses, and a count (optionally added) is also a formula. for example, "(h2o2)" and "(h2o2)3" are formulas. return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on. the test cases are generated so that all the values in the output fit in a 32-bit integer.
iterator for combination design the combinationiterator class: combinationiterator(string characters, int combinationlength) initializes the object with a string characters of sorted distinct lowercase english letters and a number combinationlength as arguments. next() returns the next combination of length combinationlength in lexicographical order. hasnext() returns true if and only if there exists a next combination.
all paths from source to target given a directed acyclic graph (dag) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order. the graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).
selling pieces of wood you are given two integers m and n that represent the height and width of a rectangular piece of wood. you are also given a 2d integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars. to cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. after cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. you may sell multiple pieces of the same shape, and you do not have to sell all the shapes. the grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width. return the maximum money you can earn after cutting an m x n piece of wood. note that you can cut the piece of wood as many times as you want.
maximum difference between increasing elements given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j]. return the maximum difference. if no such i and j exists, return -1.
recover binary search tree you are given the root of a binary search tree (bst), where the values of exactly two nodes of the tree were swapped by mistake. recover the tree without changing its structure.
consecutive numbers sql schema table: logs +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | num | varchar | +-------------+---------+ id is the primary key for this table. id is an autoincrement column. write an sql query to find all numbers that appear at least three times consecutively. return the result table in any order. the query result format is in the following example.
concatenated words given an array of strings words (without duplicates), return all the concatenated words in the given list of words. a concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.
coordinate with maximum network quality you are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. all the coordinates are integral coordinates on the x-y plane, and the distance between the two coordinates is the euclidean distance. you are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. outside that distance, the signal becomes garbled, and the tower is not reachable. the signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. the network quality at a coordinate is the sum of the signal qualities from all the reachable towers. return the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. if there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate. note: a coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either: x1 < x2, or x1 == x2 and y1 < y2. ⌊val⌋ is the greatest integer less than or equal to val (the floor function).
combination sum ii given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. each number in candidates may only be used once in the combination. note: the solution set must not contain duplicate combinations.
car fleet there are n cars going to the same destination along a one-lane road. the destination is target miles away. you are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour). a car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. the faster car will slow down to match the slower car's speed. the distance between these two cars is ignored (i.e., they are assumed to have the same position). a car fleet is some non-empty set of cars driving at the same position and same speed. note that a single car is also a car fleet. if a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet. return the number of car fleets that will arrive at the destination.
binary search tree to greater sum tree given the root of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus the sum of all keys greater than the original key in bst. as a reminder, a binary search tree is a tree that satisfies these constraints: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees.
maximum number of vowels in a substring of given length given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k. vowel letters in english are 'a', 'e', 'i', 'o', and 'u'.
complete binary tree inserter a complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion. implement the cbtinserter class: cbtinserter(treenode root) initializes the data structure with the root of the complete binary tree. int insert(int v) inserts a treenode into the tree with value node.val == val so that the tree remains complete, and returns the value of the parent of the inserted treenode. treenode get_root() returns the root node of the tree.
alert using same key-card three or more times in a one hour period leetcode company workers use key-cards to unlock office doors. each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. the system emits an alert if any worker uses the key-card three or more times in a one-hour period. you are given a list of strings keyname and keytime where [keyname[i], keytime[i]] corresponds to a person's name and the time when their key-card was used in a single day. access times are given in the 24-hour time format "hh:mm", such as "23:51" and "09:49". return a list of unique worker names who received an alert for frequent keycard use. sort the names in ascending order alphabetically. notice that "10:00" - "11:00" is considered to be within a one-hour period, while "22:51" - "23:52" is not considered to be within a one-hour period.
sort array by parity ii given an array of integers nums, half of the integers in nums are odd, and the other half are even. sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even. return any answer array that satisfies this condition.
determine if two strings are close two strings are considered close if you can attain one from the other using the following operations: operation 1: swap any two existing characters. for example, abcde -> aecdb operation 2: transform every occurrence of one existing character into another existing character, and do the same with the other character. for example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's) you can use the operations on either string as many times as necessary. given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.
count the repetitions we define str = [s, n] as the string str which consists of the string s concatenated n times. for example, str == ["abc", 3] =="abcabcabc". we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. for example, s1 = "abc" can be obtained from s2 = "abdbec" based on our definition by removing the bolded underlined characters. you are given two strings s1 and s2 and two integers n1 and n2. you have the two strings str1 = [s1, n1] and str2 = [s2, n2]. return the maximum integer m such that str = [str2, m] can be obtained from str1.
maximum number of tasks you can assign you have n tasks and m workers. each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. the strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]). additionally, you have pills magical pills that will increase a worker's strength by strength. you can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill. given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.
coloring a border you are given an m x n integer matrix grid, and three integers row, col, and color. each value in the grid represents the color of the grid square at that location. two squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions. the border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column). you should color the border of the connected component that contains the square grid[row][col] with color. return the final grid.
count operations to obtain zero you are given two non-negative integers num1 and num2. in one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2. for example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. however, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1. return the number of operations required to make either num1 = 0 or num2 = 0.
minimum amount of time to collect garbage you are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'm', 'p' and 'g' representing one unit of metal, paper and glass garbage respectively. picking up one unit of any type of garbage takes 1 minute. you are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1. there are three garbage trucks in the city, each responsible for picking up one type of garbage. each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house. only one garbage truck may be used at any given moment. while one truck is driving or picking up garbage, the other two trucks cannot do anything. return the minimum number of minutes needed to pick up all the garbage.
rectangle overlap an axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. its top and bottom edges are parallel to the x-axis, and its left and right edges are parallel to the y-axis. two rectangles overlap if the area of their intersection is positive. to be clear, two rectangles that only touch at the corner or edges do not overlap. given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.
rearrange products table sql schema table: products +-------------+---------+ | column name | type | +-------------+---------+ | product_id | int | | store1 | int | | store2 | int | | store3 | int | +-------------+---------+ product_id is the primary key for this table. each row in this table indicates the product's price in 3 different stores: store1, store2, and store3. if the product is not available in a store, the price will be null in that store's column. write an sql query to rearrange the products table so that each row has (product_id, store, price). if a product is not available in a store, do not include a row with that product_id and store combination in the result table. return the result table in any order. the query result format is in the following example.
divide a string into groups of size k a string s can be partitioned into groups of size k using the following procedure: the first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. each character can be a part of exactly one group. for the last group, if the string does not have k characters remaining, a character fill is used to complete the group. note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s. given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.
tuple with same product given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.
distribute money to maximum children you are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to. you have to distribute the money according to the following rules: all money must be distributed. everyone must receive at least 1 dollar. nobody receives 4 dollars. return the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. if there is no way to distribute the money, return -1.
k-similar strings strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2. given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.
maximum value at a given index in a bounded array you are given three positive integers: n, index, and maxsum. you want to construct an array nums (0-indexed) that satisfies the following conditions: nums.length == n nums[i] is a positive integer where 0 <= i < n. abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1. the sum of all the elements of nums does not exceed maxsum. nums[index] is maximized. return nums[index] of the constructed array. note that abs(x) equals x if x >= 0, and -x otherwise.
course schedule iv there are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi. for example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1. prerequisites can also be indirect. if course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c. you are also given an array queries where queries[j] = [uj, vj]. for the jth query, you should answer whether course uj is a prerequisite of course vj or not. return a boolean array answer, where answer[j] is the answer to the jth query.
nth highest salary sql schema table: employee +-------------+------+ | column name | type | +-------------+------+ | id | int | | salary | int | +-------------+------+ id is the primary key column for this table. each row of this table contains information about the salary of an employee. write an sql query to report the nth highest salary from the employee table. if there is no nth highest salary, the query should report null. the query result format is in the following example.
map sum pairs design a map that allows you to do the following: maps a string key to a given value. returns the sum of the values that have a key with a prefix equal to a given string. implement the mapsum class: mapsum() initializes the mapsum object. void insert(string key, int val) inserts the key-val pair into the map. if the key already existed, the original key-value pair will be overridden to the new one. int sum(string prefix) returns the sum of all the pairs' value whose key starts with the prefix.
largest time for given digits given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once. 24-hour times are formatted as "hh:mm", where hh is between 00 and 23, and mm is between 00 and 59. the earliest 24-hour time is 00:00, and the latest is 23:59. return the latest 24-hour time in "hh:mm" format. if no valid time can be made, return an empty string.
ways to split array into three subarrays a split of an integer array is good if: the array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right. the sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right. given nums, an array of non-negative integers, return the number of good ways to split nums. as the number may be too large, return it modulo 109 + 7.
count ways to build rooms in an ant colony you are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. you are given the expansion plan as a 0-indexed integer array of length n, prevroom, where prevroom[i] indicates that you must build room prevroom[i] before building room i, and these two rooms must be connected directly. room 0 is already built, so prevroom[0] = -1. the expansion plan is given such that once all the rooms are built, every room will be reachable from room 0. you can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. you can choose to build any room as long as its previous room is already built. return the number of different orders you can build all the rooms in. since the answer may be large, return it modulo 109 + 7.
subarray sums divisible by k given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k. a subarray is a contiguous part of an array.
4sum given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 <= a, b, c, d < n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target you may return the answer in any order.
rearranging fruits you have two fruit baskets containing n fruits each. you are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. you want to make both baskets equal. to do so, you can use the following operation as many times as you want: chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2. the cost of the swap is min(basket1[i],basket2[j]). two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets. return the minimum cost to make both the baskets equal or -1 if impossible.
maximum number of non-overlapping palindrome substrings you are given a string s and a positive integer k. select a set of non-overlapping substrings from the string s that satisfy the following conditions: the length of each substring is at least k. each substring is a palindrome. return the maximum number of substrings in an optimal selection. a substring is a contiguous sequence of characters within a string.
count odd numbers in an interval range given two non-negative integers low and high. return the count of odd numbers between low and high (inclusive).
flatten a multilevel doubly linked list you are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. this child pointer may or may not point to a separate doubly linked list, also containing these special nodes. these child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below. given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. let curr be a node with a child list. the nodes in the child list should appear after curr and before curr.next in the flattened list. return the head of the flattened list. the nodes in the list must have all of their child pointers set to null.
minimum difficulty of a job schedule you want to schedule a list of jobs in d days. jobs are dependent (i.e to work on the ith job, you have to finish all the jobs j where 0 <= j < i). you have to finish at least one task every day. the difficulty of a job schedule is the sum of difficulties of each day of the d days. the difficulty of a day is the maximum difficulty of a job done on that day. you are given an integer array jobdifficulty and an integer d. the difficulty of the ith job is jobdifficulty[i]. return the minimum difficulty of a job schedule. if you cannot find a schedule for the jobs return -1.
number of ways to form a target string given a dictionary you are given a list of strings of the same length words and a string target. your task is to form target using the given words under the following rules: target should be formed from left to right. to form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k]. once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. in other words, all characters to the left of or at index k become unusuable for every string. repeat the process until you form the string target. notice that you can use multiple characters from the same string in words provided the conditions above are met. return the number of ways to form target from words. since the answer may be too large, return it modulo 109 + 7.
remove letter to equalize frequency you are given a 0-indexed string word, consisting of lowercase english letters. you need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal. return true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise. note: the frequency of a letter x is the number of times it occurs in the string. you must remove exactly one letter and cannot chose to do nothing.
number of beautiful partitions you are given a string s that consists of the digits '1' to '9' and two integers k and minlength. a partition of s is called beautiful if: s is partitioned into k non-intersecting substrings. each substring has a length of at least minlength. each substring starts with a prime digit and ends with a non-prime digit. prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime. return the number of beautiful partitions of s. since the answer may be very large, return it modulo 109 + 7. a substring is a contiguous sequence of characters within a string.
is graph bipartite? there is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. you are given a 2d array graph, where graph[u] is an array of nodes that node u is adjacent to. more formally, for each v in graph[u], there is an undirected edge between node u and node v. the graph has the following properties: there are no self-edges (graph[u] does not contain u). there are no parallel edges (graph[u] does not contain duplicate values). if v is in graph[u], then u is in graph[v] (the graph is undirected). the graph may not be connected, meaning there may be two nodes u and v such that there is no path between them. a graph is bipartite if the nodes can be partitioned into two independent sets a and b such that every edge in the graph connects a node in set a and a node in set b. return true if and only if it is bipartite.
tallest billboard you are installing a billboard and want it to have the largest height. the billboard will have two steel supports, one on each side. each steel support must be an equal height. you are given a collection of rods that can be welded together. for example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6. return the largest possible height of your billboard installation. if you cannot support the billboard, return 0.
maximize sum of array after k negations given an integer array nums and an integer k, modify the array in the following way: choose an index i and replace nums[i] with -nums[i]. you should apply this process exactly k times. you may choose the same index i multiple times. return the largest possible sum of the array after modifying it in this way.
apply operations to an array you are given a 0-indexed array nums of size n consisting of non-negative integers. you need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums: if nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. otherwise, you skip this operation. after performing all the operations, shift all the 0's to the end of the array. for example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0]. return the resulting array. note that the operations are applied sequentially, not all at once.
count pairs of nodes you are given an undirected graph defined by an integer n, the number of nodes, and a 2d integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. you are also given an integer array queries. let incident(a, b) be defined as the number of edges that are connected to either node a or b. the answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions: a < b incident(a, b) > queries[j] return an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query. note that there can be multiple edges between the same two nodes.
minimum cost tree from leaf values given an array arr of positive integers, consider all binary trees such that: each node has either 0 or 2 children; the values of arr correspond to the values of each leaf in an in-order traversal of the tree. the value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively. among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. it is guaranteed this sum fits into a 32-bit integer. a node is a leaf if and only if it has zero children.
maximum sum obtained of any permutation we have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. the ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. both starti and endi are 0-indexed. return the maximum total sum of all requests among all permutations of nums. since the answer may be too large, return it modulo 109 + 7.
minimum distance between bst nodes given the root of a binary search tree (bst), return the minimum difference between the values of any two different nodes in the tree.
dice roll simulation a die simulator generates a random number from 1 to 6 for each roll. you introduced a constraint to the generator such that it cannot roll the number i more than rollmax[i] (1-indexed) consecutive times. given an array of integers rollmax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. since the answer may be too large, return it modulo 109 + 7. two sequences are considered different if at least one element differs from each other.
sum of distances you are given a 0-indexed integer array nums. there exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. if there is no such j, set arr[i] to be 0. return the array arr.
number of subarrays with lcm equal to k given an integer array nums and an integer k, return the number of subarrays of nums where the least common multiple of the subarray's elements is k. a subarray is a contiguous non-empty sequence of elements within an array. the least common multiple of an array is the smallest positive integer that is divisible by all the array elements.
dungeon game the demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. the dungeon consists of m x n rooms laid out in a 2d grid. our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess. the knight has an initial health point represented by a positive integer. if at any point his health point drops to 0 or below, he dies immediately. some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers). to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. return the knight's minimum initial health so that he can rescue the princess. note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.
split array largest sum given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. return the minimized largest sum of the split. a subarray is a contiguous part of the array.
minimize maximum pair sum in array the pair sum of a pair (a,b) is equal to a + b. the maximum pair sum is the largest pair sum in a list of pairs. for example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8. given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that: each element of nums is in exactly one pair, and the maximum pair sum is minimized. return the minimized maximum pair sum after optimally pairing up the elements.
create components with same value there is an undirected tree with n nodes labeled from 0 to n - 1. you are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. you are also given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are allowed to delete some edges, splitting the tree into multiple connected components. let the value of a component be the sum of all nums[i] for which node i is in the component. return the maximum number of edges you can delete, such that every connected component in the tree has the same value.
swap salary sql schema table: salary +-------------+----------+ | column name | type | +-------------+----------+ | id | int | | name | varchar | | sex | enum | | salary | int | +-------------+----------+ id is the primary key for this table. the sex column is enum value of type ('m', 'f'). the table contains information about an employee. write an sql query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables. note that you must write a single update statement, do not write any select statement for this problem. the query result format is in the following example.
the k strongest values in an array given an array of integers arr and an integer k. a value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array. if |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j]. return a list of the strongest k values in the array. return the answer in any arbitrary order. median is the middle value in an ordered integer list. more formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed). for arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. the median is 6. for arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. the median is 3.
find the student that will replace the chalk there are n students in a class numbered from 0 to n - 1. the teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. after that, the teacher will restart the process, starting with the student number 0 again. you are given a 0-indexed integer array chalk and an integer k. there are initially k pieces of chalk. when the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. however, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk. return the index of the student that will replace the chalk pieces.
most stones removed with same row or column on a 2d plane, we place n stones at some integer coordinate points. each coordinate point may have at most one stone. a stone can be removed if it shares either the same row or the same column as another stone that has not been removed. given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.
rearrange spaces between words you are given a string text of words that are placed among some number of spaces. each word consists of one or more lowercase english letters and are separated by at least one space. it's guaranteed that text contains at least one word. rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. if you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text. return the string after rearranging the spaces.
minimum number of k consecutive bit flips you are given a binary array nums and an integer k. a k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0. return the minimum number of k-bit flips required so that there is no 0 in the array. if it is not possible, return -1. a subarray is a contiguous part of an array.
path sum ii given the root of a binary tree and an integer targetsum, return all root-to-leaf paths where the sum of the node values in the path equals targetsum. each path should be returned as a list of the node values, not node references. a root-to-leaf path is a path starting from the root and ending at any leaf node. a leaf is a node with no children.
mini parser given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized nestedinteger. each element is either an integer or a list whose elements may also be integers or other lists.
swap adjacent in lr string in a string composed of 'l', 'r', and 'x' characters, like "rxxlrxrxl", a move consists of either replacing one occurrence of "xl" with "lx", or replacing one occurrence of "rx" with "xr". given the starting string start and the ending string end, return true if and only if there exists a sequence of moves to transform one string to the other.
can place flowers you have a long flowerbed in which some of the plots are planted, and some are not. however, flowers cannot be planted in adjacent plots. given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.
palindrome partitioning iii you are given a string s containing lowercase letters and an integer k. you need to : first, change some characters of s to other lowercase english letters. then divide s into k non-empty disjoint substrings such that each substring is a palindrome. return the minimal number of characters that you need to change to divide the string.
number of ways to reorder array to get same bst given an array nums that represents a permutation of integers from 1 to n. we are going to construct a binary search tree (bst) by inserting the elements of nums in order into an initially empty bst. find the number of different ways to reorder nums so that the constructed bst is identical to that formed from the original array nums. for example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. the array [2,3,1] also yields the same bst but [3,2,1] yields a different bst. return the number of ways to reorder nums such that the bst formed is identical to the original bst formed from nums. since the answer may be very large, return it modulo 109 + 7.
minimum value to get positive step by step sum given an array of integers nums, you start with an initial positive value startvalue. in each iteration, you calculate the step by step sum of startvalue plus elements in nums (from left to right). return the minimum positive value of startvalue such that the step by step sum is never less than 1.
find players with zero or one losses you are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match. return a list answer of size 2 where: answer[0] is a list of all players that have not lost any matches. answer[1] is a list of all players that have lost exactly one match. the values in the two lists should be returned in increasing order. note: you should only consider the players that have played at least one match. the testcases will be generated such that no two matches will have the same outcome.
maximize grid happiness you are given four integers, m, n, introvertscount, and extrovertscount. you have an m x n grid, and there are two types of people: introverts and extroverts. there are introvertscount introverts and extrovertscount extroverts. you should decide how many people you want to live in the grid and assign each of them one grid cell. note that you do not have to have all the people living in the grid. the happiness of each person is calculated as follows: introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert). extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert). neighbors live in the directly adjacent cells north, east, south, and west of a person's cell. the grid happiness is the sum of each person's happiness. return the maximum possible grid happiness.
verify preorder serialization of a binary tree one way to serialize a binary tree is to use preorder traversal. when we encounter a non-null node, we record the node's value. if it is a null node, we record using a sentinel value such as '#'. for example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node. given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree. it is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer. you may assume that the input format is always valid. for example, it could never contain two consecutive commas, such as "1,,3". note: you are not allowed to reconstruct the tree.
adding spaces to a string you are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. each space should be inserted before the character at the given index. for example, given s = "enjoyyourcoffee" and spaces = [5, 9], we place spaces before 'y' and 'c', which are at indices 5 and 9 respectively. thus, we obtain "enjoy your coffee". return the modified string after the spaces have been added.
eliminate maximum number of monsters you are playing a video game where you are defending your city from a group of n monsters. you are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city. the monsters walk toward the city at a constant speed. the speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute. you have a weapon that, once fully charged, can eliminate a single monster. however, the weapon takes one minute to charge.the weapon is fully charged at the very start. you lose when any monster reaches your city. if a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon. return the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.
data stream as disjoint intervals given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals. implement the summaryranges class: summaryranges() initializes the object with an empty stream. void addnum(int value) adds the integer value to the stream. int[][] getintervals() returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. the answer should be sorted by starti.
generate random point in a circle given the radius and the position of the center of a circle, implement the function randpoint which generates a uniform random point inside the circle. implement the solution class: solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center). randpoint() returns a random point inside the circle. a point on the circumference of the circle is considered to be in the circle. the answer is returned as an array [x, y].
difference between element sum and digit sum of an array you are given a positive integer array nums. the element sum is the sum of all the elements in nums. the digit sum is the sum of all the digits (not necessarily distinct) that appear in nums. return the absolute difference between the element sum and digit sum of nums. note that the absolute difference between two integers x and y is defined as |x - y|.
decode ways a message containing letters from a-z can be encoded into numbers using the following mapping: 'a' -> "1" 'b' -> "2" ... 'z' -> "26" to decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, "11106" can be mapped into: "aajf" with the grouping (1 1 10 6) "kjf" with the grouping (11 10 6) note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'f' since "6" is different from "06". given a string s containing only digits, return the number of ways to decode it. the test cases are generated so that the answer fits in a 32-bit integer.
card flipping game you are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. initially, each card is placed on a table such that the front number is facing up and the other is facing down. you may flip over any number of cards (possibly zero). after flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card. return the minimum possible good integer after flipping the cards. if there are no good integers, return 0.
pascal's triangle given an integer numrows, return the first numrows of pascal's triangle. in pascal's triangle, each number is the sum of the two numbers directly above it as shown:
maximum depth of n-ary tree given a n-ary tree, find its maximum depth. the maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).
strange printer ii there is a strange printer with the following two special requirements: on each turn, the printer will print a solid rectangular pattern of a single color on the grid. this will cover up the existing colors in the rectangle. once the printer has used a color for the above operation, the same color cannot be used again. you are given a m x n matrix targetgrid, where targetgrid[row][col] is the color in the position (row, col) of the grid. return true if it is possible to print the matrix targetgrid, otherwise, return false.
find k closest elements given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. the result should also be sorted in ascending order. an integer a is closer to x than an integer b if: |a - x| < |b - x|, or |a - x| == |b - x| and a < b
merge strings alternately you are given two strings word1 and word2. merge the strings by adding letters in alternating order, starting with word1. if a string is longer than the other, append the additional letters onto the end of the merged string. return the merged string.
binary tree right side view given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
partitioning into minimum number of deci-binary numbers a decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. for example, 101 and 1100 are deci-binary, while 112 and 3001 are not. given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.
merge two sorted lists you are given the heads of two sorted linked lists list1 and list2. merge the two lists in a one sorted list. the list should be made by splicing together the nodes of the first two lists. return the head of the merged linked list.
design memory allocator you are given an integer n representing the size of a 0-indexed memory array. all memory units are initially free. you have a memory allocator with the following functionalities: allocate a block of size consecutive free memory units and assign it the id mid. free all memory units with the given id mid. note that: multiple blocks can be allocated to the same mid. you should free all the memory units with mid, even if they were allocated in different blocks. implement the allocator class: allocator(int n) initializes an allocator object with a memory array of size n. int allocate(int size, int mid) find the leftmost block of size consecutive free memory units and allocate it with the id mid. return the block's first index. if such a block does not exist, return -1. int free(int mid) free all memory units with the id mid. return the number of memory units you have freed.
primary department for each employee sql schema table: employee +---------------+---------+ | column name | type | +---------------+---------+ | employee_id | int | | department_id | int | | primary_flag | varchar | +---------------+---------+ (employee_id, department_id) is the primary key for this table. employee_id is the id of the employee. department_id is the id of the department to which the employee belongs. primary_flag is an enum of type ('y', 'n'). if the flag is 'y', the department is the primary department for the employee. if the flag is 'n', the department is not the primary. employees can belong to multiple departments. when the employee joins other departments, they need to decide which department is their primary department. note that when an employee belongs to only one department, their primary column is 'n'. write an sql query to report all the employees with their primary department. for employees who belong to one department, report their only department. return the result table in any order. the query result format is in the following example.
count number of pairs with absolute difference k given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k. the value of |x| is defined as: x if x >= 0. -x if x < 0.
longest uncommon subsequence ii given an array of strings strs, return the length of the longest uncommon subsequence between them. if the longest uncommon subsequence does not exist, return -1. an uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others. a subsequence of a string s is a string that can be obtained after deleting any number of characters from s. for example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
number of ways to split a string given a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s. return the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. since the answer may be too large, return it modulo 109 + 7.
n-ary tree postorder traversal given the root of an n-ary tree, return the postorder traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)
minimum moves to convert string you are given a string s consisting of n characters which are either 'x' or 'o'. a move is defined as selecting three consecutive characters of s and converting them to 'o'. note that if a move is applied to the character 'o', it will stay the same. return the minimum number of moves required so that all the characters of s are converted to 'o'.
minimum time to remove all cars containing illegal goods you are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods. as the train conductor, you would like to get rid of all the cars containing illegal goods. you can do any of the following three operations any number of times: remove a train car from the left end (i.e., remove s[0]) which takes 1 unit of time. remove a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time. remove a train car from anywhere in the sequence which takes 2 units of time. return the minimum time to remove all the cars containing illegal goods. note that an empty sequence of cars is considered to have no cars containing illegal goods.
shuffle string you are given a string s and an integer array indices of the same length. the string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string. return the shuffled string.
minimum number of operations to make array continuous you are given an integer array nums. in one operation, you can replace any element in nums with any integer. nums is considered continuous if both of the following conditions are fulfilled: all elements in nums are unique. the difference between the maximum element and the minimum element in nums equals nums.length - 1. for example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous. return the minimum number of operations to make nums continuous.
jump game iv given an array of integers arr, you are initially positioned at the first index of the array. in one step you can jump from index i to index: i + 1 where: i + 1 < arr.length. i - 1 where: i - 1 >= 0. j where: arr[i] == arr[j] and i != j. return the minimum number of steps to reach the last index of the array. notice that you can not jump outside of the array at any time.
prefix and suffix search design a special dictionary that searches the words in it by a prefix and a suffix. implement the wordfilter class: wordfilter(string[] words) initializes the object with the words in the dictionary. f(string pref, string suff) returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. if there is more than one valid index, return the largest of them. if there is no such word in the dictionary, return -1.
online majority element in subarray design a data structure that efficiently finds the majority element of a given subarray. the majority element of a subarray is an element that occurs threshold times or more in the subarray. implementing the majoritychecker class: majoritychecker(int[] arr) initializes the instance of the class with the given array arr. int query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.
count increasing quadruplets given a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets. a quadruplet (i, j, k, l) is increasing if: 0 <= i < j < k < l < n, and nums[i] < nums[k] < nums[j] < nums[l].
most visited sector in a circular track given an integer n and an integer array rounds. we have a circular track which consists of n sectors labeled from 1 to n. a marathon will be held on this track, the marathon consists of m rounds. the ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. for example, round 1 starts at sector rounds[0] and ends at sector rounds[1] return an array of the most visited sectors sorted in ascending order. notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (see the first example).
merge nodes in between zeros you are given the head of a linked list, which contains a series of integers separated by 0's. the beginning and end of the linked list will have node.val == 0. for every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. the modified list should not contain any 0's. return the head of the modified linked list.
minimum sum of squared difference you are given two positive 0-indexed integer arrays nums1 and nums2, both of length n. the sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n. you are also given two positive integers k1 and k2. you can modify any of the elements of nums1 by +1 or -1 at most k1 times. similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times. return the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times. note: you are allowed to modify the array elements to become negative integers.
maximum units on a truck you are assigned to put some amount of boxes onto one truck. you are given a 2d array boxtypes, where boxtypes[i] = [numberofboxesi, numberofunitsperboxi]: numberofboxesi is the number of boxes of type i. numberofunitsperboxi is the number of units in each box of the type i. you are also given an integer trucksize, which is the maximum number of boxes that can be put on the truck. you can choose any boxes to put on the truck as long as the number of boxes does not exceed trucksize. return the maximum total number of units that can be put on the truck.
k items with the maximum sum there is a bag that consists of items, each item has a number 1, 0, or -1 written on it. you are given four non-negative integers numones, numzeros, numnegones, and k. the bag initially contains: numones items with 1s written on them. numzeroes items with 0s written on them. numnegones items with -1s written on them. we want to pick exactly k items among the available items. return the maximum possible sum of numbers written on the items.
find missing observations you have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. fortunately, you have also calculated the average value of the n + m rolls. you are given an integer array rolls of length m where rolls[i] is the value of the ith observation. you are also given the two integers mean and n. return an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. if there are multiple valid answers, return any of them. if no such array exists, return an empty array. the average value of a set of k numbers is the sum of the numbers divided by k. note that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.
factorial trailing zeroes given an integer n, return the number of trailing zeroes in n!. note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.
reward top k students you are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. note that no word is both positive and negative. initially every student has 0 points. each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1. you are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the id of the student who has received the feedback report report[i]. the id of each student is unique. given an integer k, return the top k students after ranking them in non-increasing order by their points. in case more than one student has the same points, the one with the lower id ranks higher.
count subarrays with median k you are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k. return the number of non-empty subarrays in nums that have a median equal to k. note: the median of an array is the middle element after sorting the array in ascending order. if the array is of even length, the median is the left middle element. for example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4. a subarray is a contiguous part of an array.
minimum numbers of function calls to make target array you are given an integer array nums. you have an integer array arr of the same length with all values set to 0 initially. you also have the following modify function: you want to use the modify function to convert arr to nums using the minimum number of calls. return the minimum number of function calls to make nums from arr. the test cases are generated so that the answer fits in a 32-bit signed integer.
minimize the maximum of two arrays we have two arrays arr1 and arr2 which are initially empty. you need to add positive integers to them such that they satisfy all the following conditions: arr1 contains uniquecnt1 distinct positive integers, each of which is not divisible by divisor1. arr2 contains uniquecnt2 distinct positive integers, each of which is not divisible by divisor2. no integer is present in both arr1 and arr2. given divisor1, divisor2, uniquecnt1, and uniquecnt2, return the minimum possible maximum integer that can be present in either array.
range sum query - mutable given an integer array nums, handle multiple queries of the following types: update the value of an element in nums. calculate the sum of the elements of nums between indices left and right inclusive where left <= right. implement the numarray class: numarray(int[] nums) initializes the object with the integer array nums. void update(int index, int val) updates the value of nums[index] to be val. int sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
longest uploaded prefix you are given a stream of n videos, each represented by a distinct number from 1 to n that you need to "upload" to a server. you need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process. we consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. the longest uploaded prefix is the maximum value of i that satisfies this definition. implement the luprefix class: luprefix(int n) initializes the object for a stream of n videos. void upload(int video) uploads video to the server. int longest() returns the length of the longest uploaded prefix defined above.
delete the middle node of a linked list you are given the head of a linked list. delete the middle node, and return the head of the modified linked list. the middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x. for n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.
unique substrings in wraparound string we define the string base to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so base will look like this: "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....". given a string s, return the number of unique non-empty substrings of s are present in base.
minimum distance to the target element given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. note that abs(x) is the absolute value of x. return abs(i - start). it is guaranteed that target exists in nums.
delete node in a bst given a root node reference of a bst and a key, delete the node with the given key in the bst. return the root node reference (possibly updated) of the bst. basically, the deletion can be divided into two stages: search for a node to remove. if the node is found, delete the node.
random pick with blacklist you are given an integer n and an array of unique integers blacklist. design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. any integer that is in the mentioned range and not in blacklist should be equally likely to be returned. optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language. implement the solution class: solution(int n, int[] blacklist) initializes the object with the integer n and the blacklisted integers blacklist. int pick() returns a random integer in the range [0, n - 1] and not in blacklist.
excel sheet column number given a string columntitle that represents the column title as appears in an excel sheet, return its corresponding column number. for example: a -> 1 b -> 2 c -> 3 ... z -> 26 aa -> 27 ab -> 28 ...
minimum number of visited cells in a grid you are given a 0-indexed m x n integer matrix grid. your initial position is at the top-left cell (0, 0). starting from the cell (i, j), you can move to one of the following cells: cells (i, k) with j < k <= grid[i][j] + j (rightward movement), or cells (k, j) with i < k <= grid[i][j] + i (downward movement). return the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). if there is no valid path, return -1.
maximize score after n operations you are given nums, an array of positive integers of size 2 * n. you must perform n operations on this array. in the ith operation (1-indexed), you will: choose two elements, x and y. receive a score of i * gcd(x, y). remove x and y from nums. return the maximum score you can receive after performing n operations. the function gcd(x, y) is the greatest common divisor of x and y.
restaurant growth sql schema table: customer +---------------+---------+ | column name | type | +---------------+---------+ | customer_id | int | | name | varchar | | visited_on | date | | amount | int | +---------------+---------+ (customer_id, visited_on) is the primary key for this table. this table contains data about customer transactions in a restaurant. visited_on is the date on which the customer with id (customer_id) has visited the restaurant. amount is the total paid by a customer. you are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day). write an sql query to compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places. return result table ordered by visited_on in ascending order. the query result format is in the following example.
minimum time to repair cars you are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. a mechanic with a rank r can repair n cars in r * n2 minutes. you are also given an integer cars representing the total number of cars waiting in the garage to be repaired. return the minimum time taken to repair all the cars. note: all the mechanics can repair the cars simultaneously.
maximum product of splitted binary tree given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized. return the maximum product of the sums of the two subtrees. since the answer may be too large, return it modulo 109 + 7. note that you need to maximize the answer before taking the mod and not after taking it.
number of senior citizens you are given a 0-indexed array of strings details. each element of details provides information about a given passenger compressed into a string of length 15. the system is such that: the first ten characters consist of the phone number of passengers. the next character denotes the gender of the person. the following two characters are used to indicate the age of the person. the last two characters determine the seat allotted to that person. return the number of passengers who are strictly more than 60 years old.
min stack design a stack that supports push, pop, top, and retrieving the minimum element in constant time. implement the minstack class: minstack() initializes the stack object. void push(int val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getmin() retrieves the minimum element in the stack. you must implement a solution with o(1) time complexity for each function.
building boxes you have a cubic storeroom where the width, length, and height of the room are all equal to n units. you are asked to place n boxes in this room where each box is a cube of unit side length. there are however some rules to placing the boxes: you can place the boxes anywhere on the floor. if box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall. given an integer n, return the minimum possible number of boxes touching the floor.
count items matching a rule you are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. you are also given a rule represented by two strings, rulekey and rulevalue. the ith item is said to match the rule if one of the following is true: rulekey == "type" and rulevalue == typei. rulekey == "color" and rulevalue == colori. rulekey == "name" and rulevalue == namei. return the number of items that match the given rule.
amount of time for binary tree to be infected you are given the root of a binary tree with unique values, and an integer start. at minute 0, an infection starts from the node with value start. each minute, a node becomes infected if: the node is currently uninfected. the node is adjacent to an infected node. return the number of minutes needed for the entire tree to be infected.
find the minimum number of fibonacci numbers whose sum is k given an integer k, return the minimum number of fibonacci numbers whose sum is equal to k. the same fibonacci number can be used multiple times. the fibonacci numbers are defined as: f1 = 1 f2 = 1 fn = fn-1 + fn-2 for n > 2. it is guaranteed that for the given constraints we can always find such fibonacci numbers that sum up to k.
cells in a range on an excel sheet a cell (r, c) of an excel sheet is represented as a string "<col><row>" where: <col> denotes the column number c of the cell. it is represented by alphabetical letters. for example, the 1st column is denoted by 'a', the 2nd by 'b', the 3rd by 'c', and so on. <row> is the row number r of the cell. the rth row is represented by the integer r. you are given a string s in the format "<col1><row1>:<col2><row2>", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2. return the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. the cells should be represented as strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.
beautiful arrangement suppose you have n integers labeled 1 through n. a permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true: perm[i] is divisible by i. i is divisible by perm[i]. given an integer n, return the number of the beautiful arrangements that you can construct.
minimum total space wasted with k resizing operations you are currently designing a dynamic array. you are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. in addition, you are given an integer k, the maximum number of times you can resize the array (to any size). the size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. the space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length. return the minimum total space wasted if you can resize the array at most k times. note: the array can have any size at the start and does not count towards the number of resizing operations.
node with highest edge score you are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge. the graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i]. the edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i. return the node with the highest edge score. if multiple nodes have the same edge score, return the node with the smallest index.
pow(x, n) implement pow(x, n), which calculates x raised to the power n (i.e., xn).
stickers to spell word we are given n different types of stickers. each sticker has a lowercase english word on it. you would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. you can use each sticker more than once if you want, and you have infinite quantities of each sticker. return the minimum number of stickers that you need to spell out target. if the task is impossible, return -1. note: in all test cases, all words were chosen randomly from the 1000 most common us english words, and target was chosen as a concatenation of two random words.
set matrix zeroes given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. you must do it in place.
grumpy bookstore owner there is a bookstore owner that has a store open for n minutes. every minute, some number of customers enter the store. you are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute. on some minutes, the bookstore owner is grumpy. you are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise. when the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied. the bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once. return the maximum number of customers that can be satisfied throughout the day.
minimum swaps to arrange a binary grid given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them. a grid is said to be valid if all the cells above the main diagonal are zeros. return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid. the main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).
find a corresponding node of a binary tree in a clone of that tree given two binary trees original and cloned and given a reference to a node target in the original tree. the cloned tree is a copy of the original tree. return a reference to the same node in the cloned tree. note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.
exchange seats sql schema table: seat +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | student | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the name and the id of a student. id is a continuous increment. write an sql query to swap the seat id of every two consecutive students. if the number of students is odd, the id of the last student is not swapped. return the result table ordered by id in ascending order. the query result format is in the following example.
search suggestions system you are given an array of strings products and a string searchword. design a system that suggests at most three product names from products after each character of searchword is typed. suggested products should have common prefix with searchword. if there are more than three products with a common prefix return the three lexicographically minimums products. return a list of lists of the suggested products after each character of searchword is typed.
count the number of complete components you are given an integer n. there is an undirected graph with n vertices, numbered from 0 to n - 1. you are given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi. return the number of complete connected components of the graph. a connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph. a connected component is said to be complete if there exists an edge between every pair of its vertices.
longest subarray of 1's after deleting one element given a binary array nums, you should delete one element from it. return the size of the longest non-empty subarray containing only 1's in the resulting array. return 0 if there is no such subarray.
word search ii given an m x n board of characters and a list of strings words, return all words on the board. each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once in a word.
average of levels in binary tree given the root of a binary tree, return the average value of the nodes on each level in the form of an array. answers within 10-5 of the actual answer will be accepted.
sum of prefix scores of strings you are given an array words of size n consisting of non-empty strings. we define the score of a string word as the number of strings words[i] such that word is a prefix of words[i]. for example, if words = ["a", "ab", "abc", "cab"], then the score of "ab" is 2, since "ab" is a prefix of both "ab" and "abc". return an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i]. note that a string is considered as a prefix of itself.
find the city with the smallest number of neighbors at a threshold distance there are n cities numbered from 0 to n-1. given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distancethreshold. return the city with the smallest number of cities that are reachable through some path and whose distance is at most distancethreshold, if there are multiple such cities, return the city with the greatest number. notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.
minimum cost of a path with special roads you are given an array start where start = [startx, starty] represents your initial position (startx, starty) in a 2d space. you are also given the array target where target = [targetx, targety] represents your target position (targetx, targety). the cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|. there are also some special roads. you are given a 2d array specialroads where specialroads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road can take you from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. you can use each special road any number of times. return the minimum cost required to go from (startx, starty) to (targetx, targety).
even odd tree a binary tree is named even-odd if it meets the following conditions: the root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc. for every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right). for every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right). given the root of a binary tree, return true if the binary tree is even-odd, otherwise return false.
put marbles in bags you have k bags. you are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. you are also given the integer k. divide the marbles into the k bags according to the following rules: no bag is empty. if the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag. if a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j]. the score after distributing the marbles is the sum of the costs of all the k bags. return the difference between the maximum and minimum scores among marble distributions.
search in rotated sorted array ii there is an integer array nums sorted in non-decreasing order (not necessarily with distinct values). before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). for example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4]. given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums. you must decrease the overall operation steps as much as possible.
where will the ball fall you have a 2-d grid of size m x n representing a box, and you have n balls. the box is open on the top and bottom sides. each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. a board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1. a board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1. we drop one ball at the top of each column of the box. each ball can get stuck in the box or fall out of the bottom. a ball gets stuck if it hits a "v" shaped pattern between two boards or if a board redirects the ball into either wall of the box. return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.
count the number of consistent strings you are given a string allowed consisting of distinct characters and an array of strings words. a string is consistent if all characters in the string appear in the string allowed. return the number of consistent strings in the array words.
1-bit and 2-bit characters we have two special characters: the first character can be represented by one bit 0. the second character can be represented by two bits (10 or 11). given a binary array bits that ends with 0, return true if the last character must be a one-bit character.
number of ways to separate numbers you wrote down many positive integers in a string called num. however, you realized that you forgot to add commas to seperate the different numbers. you remember that the list of integers was non-decreasing and that no integer had leading zeros. return the number of possible lists of integers that you could have written down to get the string num. since the answer may be large, return it modulo 109 + 7.
house robber iv there are several consecutive houses along a street, each of which has some money inside. there is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes. the capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed. you are given an integer array nums representing how much money is stashed in each house. more formally, the ith house from the left has nums[i] dollars. you are also given an integer k, representing the minimum number of houses the robber will steal from. it is always possible to steal at least k houses. return the minimum capability of the robber out of all the possible ways to steal at least k houses.
maximum subarray sum with one deletion given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. in other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible. note that the subarray needs to be non-empty after deleting one element.
longest subsequence repeated k times you are given a string s of length n, and an integer k. you are tasked to find the longest subsequence repeated k times in string s. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. a subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times. for example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba". return the longest subsequence repeated k times in string s. if multiple such subsequences are found, return the lexicographically largest one. if there is no such subsequence, return an empty string.
assign cookies assume you are an awesome parent and want to give your children some cookies. but, you should give each child at most one cookie. each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. if s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. your goal is to maximize the number of your content children and output the maximum number.
equal sum arrays with minimum number of operations you are given two arrays of integers nums1 and nums2, possibly of different lengths. the values in the arrays are between 1 and 6, inclusive. in one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive. return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. return -1 if it is not possible to make the sum of the two arrays equal.
seat reservation manager design a system that manages the reservation state of n seats that are numbered from 1 to n. implement the seatmanager class: seatmanager(int n) initializes a seatmanager object that will manage n seats numbered from 1 to n. all seats are initially available. int reserve() fetches the smallest-numbered unreserved seat, reserves it, and returns its number. void unreserve(int seatnumber) unreserves the seat with the given seatnumber.
debounce given a function fn and a time in milliseconds t, return a debounced version of that function. a debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time. the debounced function should also recieve the passed parameters. for example, let's say t = 50ms, and the function was called at 30ms, 60ms, and 100ms. the first 2 function calls would be cancelled, and the 3rd function call would be executed at 150ms. if instead t = 35ms, the 1st call would be cancelled, the 2nd would be executed at 95ms, and the 3rd would be executed at 135ms. the above diagram shows how debounce will transform events. each rectangle represents 100ms and the debounce time is 400ms. each color represents a different set of inputs. please solve it without using lodash's _.debounce() function.
number of submatrices that sum to target given a matrix and a target, return the number of non-empty submatrices that sum to target. a submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2. two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.
all possible full binary trees given an integer n, return a list of all possible full binary trees with n nodes. each node of each tree in the answer must have node.val == 0. each element of the answer is the root node of one possible tree. you may return the final list of trees in any order. a full binary tree is a binary tree where each node has exactly 0 or 2 children.
nearest exit from entrance in maze you are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). you are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at. in one step, you can move one cell up, down, left, or right. you cannot step into a cell with a wall, and you cannot step outside the maze. your goal is to find the nearest exit from the entrance. an exit is defined as an empty cell that is at the border of the maze. the entrance does not count as an exit. return the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.
mice and cheese there are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse. a point of the cheese with index i (0-indexed) is: reward1[i] if the first mouse eats it. reward2[i] if the second mouse eats it. you are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k. return the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.
bulb switcher ii there is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. each of the four buttons has a different functionality where: button 1: flips the status of all the bulbs. button 2: flips the status of all the bulbs with even labels (i.e., 2, 4, ...). button 3: flips the status of all the bulbs with odd labels (i.e., 1, 3, ...). button 4: flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...). you must make exactly presses button presses in total. for each press, you may pick any of the four buttons to press. given the two integers n and presses, return the number of different possible statuses after performing all presses button presses.
number of good pairs given an array of integers nums, return the number of good pairs. a pair (i, j) is called good if nums[i] == nums[j] and i < j.
element appearing more than 25% in sorted array given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.
check if all characters have equal number of occurrences given a string s, return true if s is a good string, or false otherwise. a string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).
shifting letters you are given a string s of lowercase english letters and an integer array shifts of the same length. call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). for example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'. now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times. return the final string after all such shifts to s are applied.
longest nice subarray you are given an array nums consisting of positive integers. we call a subarray of nums nice if the bitwise and of every pair of elements that are in different positions in the subarray is equal to 0. return the length of the longest nice subarray. a subarray is a contiguous part of an array. note that subarrays of length 1 are always considered nice.
sum of nodes with even-valued grandparent given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. if there are no nodes with an even-valued grandparent, return 0. a grandparent of a node is the parent of its parent if it exists.
find score of an array after marking all elements you are given an array nums consisting of positive integers. starting with score = 0, apply the following algorithm: choose the smallest integer of the array that is not marked. if there is a tie, choose the one with the smallest index. add the value of the chosen integer to score. mark the chosen element and its two adjacent elements if they exist. repeat until all the array elements are marked. return the score you get after applying the above algorithm.
task scheduler ii you are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task. you are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed. each day, until all tasks have been completed, you must either: complete the next task from tasks, or take a break. return the minimum number of days needed to complete all tasks.
throne inheritance a kingdom consists of a king, his children, his grandchildren, and so on. every once in a while, someone in the family dies or a child is born. the kingdom has a well-defined order of inheritance that consists of the king as the first member. let's define the recursive function successor(x, curorder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance. successor(x, curorder): if x has no children or all of x's children are in curorder: if x is the king return null else return successor(x's parent, curorder) else return x's oldest child who's not in curorder for example, assume we have a kingdom that consists of the king, his children alice and bob (alice is older than bob), and finally alice's son jack. in the beginning, curorder will be ["king"]. calling successor(king, curorder) will return alice, so we append to curorder to get ["king", "alice"]. calling successor(alice, curorder) will return jack, so we append to curorder to get ["king", "alice", "jack"]. calling successor(jack, curorder) will return bob, so we append to curorder to get ["king", "alice", "jack", "bob"]. calling successor(bob, curorder) will return null. thus the order of inheritance will be ["king", "alice", "jack", "bob"]. using the above function, we can always obtain a unique order of inheritance. implement the throneinheritance class: throneinheritance(string kingname) initializes an object of the throneinheritance class. the name of the king is given as part of the constructor. void birth(string parentname, string childname) indicates that parentname gave birth to childname. void death(string name) indicates the death of name. the death of the person doesn't affect the successor function nor the current inheritance order. you can treat it as just marking the person as dead. string[] getinheritanceorder() returns a list representing the current order of inheritance excluding dead people.
number of ways to divide a long corridor along a long library corridor, there is a line of seats and decorative plants. you are given a 0-indexed string corridor of length n consisting of letters 's' and 'p' where each 's' represents a seat and each 'p' represents a plant. one room divider has already been installed to the left of index 0, and another to the right of index n - 1. additional room dividers can be installed. for each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed. divide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. there may be multiple ways to perform the division. two ways are different if there is a position with a room divider installed in the first way but not in the second way. return the number of ways to divide the corridor. since the answer may be very large, return it modulo 109 + 7. if there is no way, return 0.
reorder data in log files you are given an array of logs. each log is a space-delimited string of words, where the first word is the identifier. there are two types of logs: letter-logs: all words (except the identifier) consist of lowercase english letters. digit-logs: all words (except the identifier) consist of digits. reorder these logs so that: the letter-logs come before all digit-logs. the letter-logs are sorted lexicographically by their contents. if their contents are the same, then sort them lexicographically by their identifiers. the digit-logs maintain their relative ordering. return the final order of the logs.
find target indices after sorting array you are given a 0-indexed integer array nums and a target element target. a target index is an index i such that nums[i] == target. return a list of the target indices of nums after sorting nums in non-decreasing order. if there are no target indices, return an empty list. the returned list must be sorted in increasing order.
find the width of columns of a grid you are given a 0-indexed m x n integer matrix grid. the width of a column is the maximum length of its integers. for example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3. return an integer array ans of size n where ans[i] is the width of the ith column. the length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.
lowest common ancestor of a binary search tree given a binary search tree (bst), find the lowest common ancestor (lca) node of two given nodes in the bst. according to the definition of lca on wikipedia: “the lowest common ancestor is defined between two nodes p and q as the lowest node in t that has both p and q as descendants (where we allow a node to be a descendant of itself).”
determine whether matrix can be obtained by rotation given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.
cells with odd values in a matrix there is an m x n matrix that is initialized to all 0's. there is also a 2d array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix. for each location indices[i], do both of the following: increment all the cells on row ri. increment all the cells on column ci. given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.
strong password checker a password is considered strong if the below conditions are all met: it has at least 6 characters and at most 20 characters. it contains at least one lowercase letter, at least one uppercase letter, and at least one digit. it does not contain three repeating characters in a row (i.e., "baaabb0" is weak, but "baaba0" is strong). given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0. in one step, you can: insert one character to password, delete one character from password, or replace one character of password with another character.
maximal rectangle given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
all elements in two binary search trees given two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.
power of four given an integer n, return true if it is a power of four. otherwise, return false. an integer n is a power of four, if there exists an integer x such that n == 4x.
number complement the complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation. for example, the integer 5 is "101" in binary and its complement is "010" which is the integer 2. given an integer num, return its complement.
maximum xor with an element from array you are given an array nums consisting of non-negative integers. you are also given a queries array, where queries[i] = [xi, mi]. the answer to the ith query is the maximum bitwise xor value of xi and any element of nums that does not exceed mi. in other words, the answer is max(nums[j] xor xi) for all j such that nums[j] <= mi. if all elements in nums are larger than mi, then the answer is -1. return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.
count square sum triples a square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2. given an integer n, return the number of square triples such that 1 <= a, b, c <= n.
count anagrams you are given a string s containing one or more words. every consecutive pair of words is separated by a single space ' '. a string t is an anagram of string s if the ith word of t is a permutation of the ith word of s. for example, "acb dfe" is an anagram of "abc def", but "def cab" and "adc bef" are not. return the number of distinct anagrams of s. since the answer may be very large, return it modulo 109 + 7.
removing minimum and maximum from array you are given a 0-indexed array of distinct integers nums. there is an element in nums that has the lowest value and an element that has the highest value. we call them the minimum and maximum respectively. your goal is to remove both these elements from the array. a deletion is defined as either removing an element from the front of the array or removing an element from the back of the array. return the minimum number of deletions it would take to remove both the minimum and maximum element from the array.
maximum number of points with cost you are given an m x n integer matrix points (0-indexed). starting with 0 points, you want to maximize the number of points you can get from the matrix. to gain points, you must pick one cell in each row. picking the cell at coordinates (r, c) will add points[r][c] to your score. however, you will lose points if you pick a cell too far from the cell that you picked in the previous row. for every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score. return the maximum number of points you can achieve. abs(x) is defined as: x for x >= 0. -x for x < 0.
number of pairs of interchangeable rectangles you are given n rectangles represented by a 0-indexed 2d integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the ith rectangle. two rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. more formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division). return the number of pairs of interchangeable rectangles in rectangles.
display table of food orders in a restaurant given the array orders, which represents the orders that customers have done in a restaurant. more specifically orders[i]=[customernamei,tablenumberi,fooditemi] where customernamei is the name of the customer, tablenumberi is the table customer sit at, and fooditemi is the item customer orders. return the restaurant's “display table”. the “display table” is a table whose row entries denote how many of each food item each table ordered. the first column is the table number and the remaining columns correspond to each food item in alphabetical order. the first row should be a header whose first column is “table”, followed by the names of the food items. note that the customer names are not part of the table. additionally, the rows should be sorted in numerically increasing order.
add edges to make degrees of all nodes even there is an undirected graph consisting of n nodes numbered from 1 to n. you are given the integer n and a 2d array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. the graph can be disconnected. you can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops. return true if it is possible to make the degree of each node in the graph even, otherwise return false. the degree of a node is the number of edges connected to it.
decrypt string from alphabet to integer mapping you are given a string s formed by digits and '#'. we want to map s to english lowercase characters as follows: characters ('a' to 'i') are represented by ('1' to '9') respectively. characters ('j' to 'z') are represented by ('10#' to '26#') respectively. return the string formed after mapping. the test cases are generated so that a unique mapping will always exist.
find followers count sql schema table: followers +-------------+------+ | column name | type | +-------------+------+ | user_id | int | | follower_id | int | +-------------+------+ (user_id, follower_id) is the primary key for this table. this table contains the ids of a user and a follower in a social media app where the follower follows the user. write an sql query that will, for each user, return the number of followers. return the result table ordered by user_id in ascending order. the query result format is in the following example.
jewels and stones you're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. each character in stones is a type of stone you have. you want to know how many of the stones you have are also jewels. letters are case sensitive, so "a" is considered a different type of stone from "a".
partition array into disjoint intervals given an integer array nums, partition it into two (contiguous) subarrays left and right so that: every element in left is less than or equal to every element in right. left and right are non-empty. left has the smallest possible size. return the length of left after such a partitioning. test cases are generated such that partitioning exists.
create sorted array through instructions given an integer array instructions, you are asked to create a sorted array from the elements in instructions. you start with an empty container nums. for each element from left to right in instructions, insert it into nums. the cost of each insertion is the minimum of the following: the number of elements currently in nums that are strictly less than instructions[i]. the number of elements currently in nums that are strictly greater than instructions[i]. for example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5]. return the total cost to insert all elements from instructions into nums. since the answer may be large, return it modulo 109 + 7
k inverse pairs array for an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j]. given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. since the answer can be huge, return it modulo 109 + 7.
circular permutation in binary representation given 2 integers n and start. your task is return any permutation p of (0,1,2.....,2^n -1) such that : p[0] = start p[i] and p[i+1] differ by only one bit in their binary representation. p[0] and p[2^n -1] must also differ by only one bit in their binary representation.
maximum length of repeated subarray given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.
article views i sql schema table: views +---------------+---------+ | column name | type | +---------------+---------+ | article_id | int | | author_id | int | | viewer_id | int | | view_date | date | +---------------+---------+ there is no primary key for this table, it may have duplicate rows. each row of this table indicates that some viewer viewed an article (written by some author) on some date. note that equal author_id and viewer_id indicate the same person. write an sql query to find all the authors that viewed at least one of their own articles. return the result table sorted by id in ascending order. the query result format is in the following example.
minimum money required before transactions you are given a 0-indexed 2d integer array transactions, where transactions[i] = [costi, cashbacki]. the array describes transactions, where each transaction must be completed exactly once in some order. at any given moment, you have a certain amount of money. in order to complete transaction i, money >= costi must hold true. after performing a transaction, money becomes money - costi + cashbacki. return the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.
patients with a condition sql schema table: patients +--------------+---------+ | column name | type | +--------------+---------+ | patient_id | int | | patient_name | varchar | | conditions | varchar | +--------------+---------+ patient_id is the primary key for this table. 'conditions' contains 0 or more code separated by spaces. this table contains information of the patients in the hospital. write an sql query to report the patient_id, patient_name and conditions of the patients who have type i diabetes. type i diabetes always starts with diab1 prefix. return the result table in any order. the query result format is in the following example.
find if path exists in graph there is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). the edges in the graph are represented as a 2d integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself. you want to determine if there is a valid path that exists from vertex source to vertex destination. given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.
arithmetic subarrays a sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. more formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i. for example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 the following sequence is not arithmetic: 1, 1, 2, 5, 7 you are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. all the arrays are 0-indexed. return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.
remove duplicates from sorted array given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. the relative order of the elements should be kept the same. then return the number of unique elements in nums. consider the number of unique elements of nums to be k, to get accepted, you need to do the following things: change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. the remaining elements of nums are not important as well as the size of nums. return k. custom judge: the judge will test your solution with the following code: int[] nums = [...]; // input array int[] expectednums = [...]; // the expected answer with correct length int k = removeduplicates(nums); // calls your implementation assert k == expectednums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectednums[i]; } if all assertions pass, then your solution will be accepted.
rotated digits an integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. each digit must be rotated - we cannot choose to leave it alone. a number is valid if each digit remains a digit after rotation. for example: 0, 1, and 8 rotate to themselves, 2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored), 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid. given an integer n, return the number of good integers in the range [1, n].
check if every row and column contains all numbers an n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive). given an n x n integer matrix matrix, return true if the matrix is valid. otherwise, return false.
vowel spellchecker given a wordlist, we want to implement a spellchecker that converts a query word into a correct word. for a given query word, the spell checker handles two categories of spelling mistakes: capitalization: if the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist. example: wordlist = ["yellow"], query = "yellow": correct = "yellow" example: wordlist = ["yellow"], query = "yellow": correct = "yellow" example: wordlist = ["yellow"], query = "yellow": correct = "yellow" vowel errors: if after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist. example: wordlist = ["yellow"], query = "yollow": correct = "yellow" example: wordlist = ["yellow"], query = "yeellow": correct = "" (no match) example: wordlist = ["yellow"], query = "yllw": correct = "" (no match) in addition, the spell checker operates under the following precedence rules: when the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back. when the query matches a word up to capitlization, you should return the first such match in the wordlist. when the query matches a word up to vowel errors, you should return the first such match in the wordlist. if the query has no matches in the wordlist, you should return the empty string. given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].
largest triangle area given an array of points on the x-y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. answers within 10-5 of the actual answer will be accepted.
first unique character in a string given a string s, find the first non-repeating character in it and return its index. if it does not exist, return -1.
maximum number of coins you can get there are 3n piles of coins of varying size, you and your friends will take piles of coins as follows: in each step, you will choose any 3 piles of coins (not necessarily consecutive). of your choice, alice will pick the pile with the maximum number of coins. you will pick the next pile with the maximum number of coins. your friend bob will pick the last pile. repeat until there are no more piles of coins. given an array of integers piles where piles[i] is the number of coins in the ith pile. return the maximum number of coins that you can have.
maximum number of moves in a grid you are given a 0-indexed m x n matrix grid consisting of positive integers. you can start at any cell in the first column of the matrix, and traverse the grid in the following way: from a cell (row, col), you can move to any of the cells: (row - 1, col + 1), (row, col + 1) and (row + 1, col + 1) such that the value of the cell you move to, should be strictly bigger than the value of the current cell. return the maximum number of moves that you can perform.
convert sorted list to binary search tree given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.
maximum or you are given a 0-indexed integer array nums of length n and an integer k. in an operation, you can choose an element and multiply it by 2. return the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times. note that a | b denotes the bitwise or between two integers a and b.
find peak element a peak element is an element that is strictly greater than its neighbors. given a 0-indexed integer array nums, find a peak element, and return its index. if the array contains multiple peaks, return the index to any of the peaks. you may imagine that nums[-1] = nums[n] = -∞. in other words, an element is always considered to be strictly greater than a neighbor that is outside the array. you must write an algorithm that runs in o(log n) time.
n-queens the n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. given an integer n, return all distinct solutions to the n-queens puzzle. you may return the answer in any order. each solution contains a distinct board configuration of the n-queens' placement, where 'q' and '.' both indicate a queen and an empty space, respectively.
airplane seat assignment probability n passengers board an airplane with exactly n seats. the first passenger has lost the ticket and picks a seat randomly. but after that, the rest of the passengers will: take their own seat if it is still available, and pick other seats randomly when they find their seat occupied return the probability that the nth person gets his own seat.
cracking the safe there is a safe protected by a password. the password is a sequence of n digits where each digit can be in the range [0, k - 1]. the safe has a peculiar way of checking the password. when you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit. for example, the correct password is "345" and you enter in "012345": after typing 0, the most recent 3 digits is "0", which is incorrect. after typing 1, the most recent 3 digits is "01", which is incorrect. after typing 2, the most recent 3 digits is "012", which is incorrect. after typing 3, the most recent 3 digits is "123", which is incorrect. after typing 4, the most recent 3 digits is "234", which is incorrect. after typing 5, the most recent 3 digits is "345", which is correct and the safe unlocks. return any string of minimum length that will unlock the safe at some point of entering it.
make k-subarray sums equal you are given a 0-indexed integer array arr and an integer k. the array arr is circular. in other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element. you can do the following operation any number of times: pick any element from arr and increase or decrease it by 1. return the minimum number of operations such that the sum of each subarray of length k is equal. a subarray is a contiguous part of the array.
cherry pickup ii you are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell. you have two robots that can collect cherries for you: robot #1 is located at the top-left corner (0, 0), and robot #2 is located at the top-right corner (0, cols - 1). return the maximum number of cherries collection using both robots by following the rules below: from a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1). when any robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell. when both robots stay in the same cell, only one takes the cherries. both robots cannot move outside of the grid at any moment. both robots should reach the bottom row in grid.
maximum deletions on a string you are given a string s consisting of only lowercase english letters. in one operation, you can: delete the entire string s, or delete the first i letters of s if the first i letters of s are equal to the following i letters in s, for any i in the range 1 <= i <= s.length / 2. for example, if s = "ababc", then in one operation, you could delete the first two letters of s to get "abc", since the first two letters of s and the following two letters of s are both equal to "ab". return the maximum number of operations needed to delete all of s.
group the people given the group size they belong to there are n people that are split into some unknown number of groups. each person is labeled with a unique id from 0 to n - 1. you are given an integer array groupsizes, where groupsizes[i] is the size of the group that person i is in. for example, if groupsizes[1] = 3, then person 1 must be in a group of size 3. return a list of groups such that each person i is in a group of size groupsizes[i]. each person should appear in exactly one group, and every person must be in a group. if there are multiple answers, return any of them. it is guaranteed that there will be at least one valid solution for the given input.
making a large island you are given an n x n binary matrix grid. you are allowed to change at most one 0 to be 1. return the size of the largest island in grid after applying this operation. an island is a 4-directionally connected group of 1s.
partition list given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. you should preserve the original relative order of the nodes in each of the two partitions.
rings and rods there are n rings and each ring is either red, green, or blue. the rings are distributed across ten rods labeled from 0 to 9. you are given a string rings of length 2n that describes the n rings that are placed onto the rods. every two characters in rings forms a color-position pair that is used to describe each ring where: the first character of the ith pair denotes the ith ring's color ('r', 'g', 'b'). the second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9'). for example, "r3g2b1" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1. return the number of rods that have all three colors of rings on them.
naming a company you are given an array of strings ideas that represents a list of names to be used in the process of naming a company. the process of naming a company is as follows: choose 2 distinct names from ideas, call them ideaa and ideab. swap the first letters of ideaa and ideab with each other. if both of the new names are not found in the original ideas, then the name ideaa ideab (the concatenation of ideaa and ideab, separated by a space) is a valid company name. otherwise, it is not a valid name. return the number of distinct valid names for the company.
di string match a permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where: s[i] == 'i' if perm[i] < perm[i + 1], and s[i] == 'd' if perm[i] > perm[i + 1]. given a string s, reconstruct the permutation perm and return it. if there are multiple valid permutations perm, return any of them.
x of a kind in a deck of cards you are given an integer array deck where deck[i] represents the number written on the ith card. partition the cards into one or more groups such that: each group has exactly x cards where x > 1, and all the cards in one group have the same integer written on them. return true if such partition is possible, or false otherwise.
sort colors given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. we will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. you must solve this problem without using the library's sort function.
complement of base 10 integer the complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation. for example, the integer 5 is "101" in binary and its complement is "010" which is the integer 2. given an integer n, return its complement.
smallest rotation with highest score you are given an array nums. you can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. afterward, any entries that are less than or equal to their index are worth one point. for example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. this is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point]. return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. if there are multiple answers, return the smallest such index k.
find minimum in rotated sorted array suppose an array of length n sorted in ascending order is rotated between 1 and n times. for example, the array nums = [0,1,2,4,5,6,7] might become: [4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. given the sorted rotated array nums of unique elements, return the minimum element of this array. you must write an algorithm that runs in o(log n) time.
range frequency queries design a data structure to find the frequency of a given value in a given subarray. the frequency of a value in a subarray is the number of occurrences of that value in the subarray. implement the rangefreqquery class: rangefreqquery(int[] arr) constructs an instance of the class with the given 0-indexed integer array arr. int query(int left, int right, int value) returns the frequency of value in the subarray arr[left...right]. a subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).
count number of special subsequences a sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s. for example, [0,1,2] and [0,0,1,1,1,2] are special. in contrast, [2,1,0], [1], and [0,1,2,0] are not special. given an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. since the answer may be very large, return it modulo 109 + 7. a subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. two subsequences are different if the set of indices chosen are different.
find the kth smallest sum of a matrix with sorted rows you are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k. you are allowed to choose exactly one element from each row to form an array. return the kth smallest array sum among all possible arrays.
convert an array into a 2d array with conditions you are given an integer array nums. you need to create a 2d array from nums satisfying the following conditions: the 2d array should contain only the elements of the array nums. each row in the 2d array contains distinct integers. the number of rows in the 2d array should be minimal. return the resulting array. if there are multiple answers, return any of them. note that the 2d array can have a different number of elements on each row.
minimum jumps to reach home a certain bug's home is on the x-axis at position x. help them get there from position 0. the bug jumps according to the following rules: it can jump exactly a positions forward (to the right). it can jump exactly b positions backward (to the left). it cannot jump backward twice in a row. it cannot jump to any forbidden positions. the bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers. given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. if there is no possible sequence of jumps that lands the bug on position x, return -1.
diameter of binary tree given the root of a binary tree, return the length of the diameter of the tree. the diameter of a binary tree is the length of the longest path between any two nodes in a tree. this path may or may not pass through the root. the length of a path between two nodes is represented by the number of edges between them.
my calendar ii you are implementing a program to use as your calendar. we can add a new event if adding the event will not cause a triple booking. a triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.). the event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end. implement the mycalendartwo class: mycalendartwo() initializes the calendar object. boolean book(int start, int end) returns true if the event can be added to the calendar successfully without causing a triple booking. otherwise, return false and do not add the event to the calendar.
regions cut by slashes an n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. these characters divide the square into contiguous regions. given the grid grid represented as a string array, return the number of regions. note that backslash characters are escaped, so a '\' is represented as '\\'.
find three consecutive integers that sum to a given number given an integer num, return three consecutive integers (as a sorted array) that sum to num. if num cannot be expressed as the sum of three consecutive integers, return an empty array.
sum of all odd length subarrays given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr. a subarray is a contiguous subsequence of the array.
new 21 game alice plays the following game, loosely based on the card game "21". alice starts with 0 points and draws numbers while she has less than k points. during each draw, she gains an integer number of points randomly from the range [1, maxpts], where maxpts is an integer. each draw is independent and the outcomes have equal probabilities. alice stops drawing numbers when she gets k or more points. return the probability that alice has n or fewer points. answers within 10-5 of the actual answer are considered accepted.
count lattice points inside a circle given a 2d integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle. note: a lattice point is a point with integer coordinates. points that lie on the circumference of a circle are also considered to be inside it.
relative ranks you are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. all the scores are guaranteed to be unique. the athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. the placement of each athlete determines their rank: the 1st place athlete's rank is "gold medal". the 2nd place athlete's rank is "silver medal". the 3rd place athlete's rank is "bronze medal". for the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is "x"). return an array answer of size n where answer[i] is the rank of the ith athlete.
minimize the maximum difference of pairs you are given a 0-indexed integer array nums and an integer p. find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. also, ensure no index appears more than once amongst the p pairs. note that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x. return the minimum maximum difference among all p pairs. we define the maximum of an empty set to be zero.
maximum twin sum of a linked list in a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1. for example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. these are the only nodes with twins for n = 4. the twin sum is defined as the sum of a node and its twin. given the head of a linked list with even length, return the maximum twin sum of the linked list.
maximum performance of a team you are given two integers n and k and two integer arrays speed and efficiency both of length n. there are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively. choose at most k different engineers out of the n engineers to form a team with the maximum performance. the performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers. return the maximum performance of this team. since the answer can be a huge number, return it modulo 109 + 7.
checking existence of edge length limited paths an undirected graph of n nodes is defined by edgelist, where edgelist[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. note that there may be multiple edges between two nodes. given an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj . return a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.
count all valid pickup and delivery options given n orders, each order consist in pickup and delivery services. count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). since the answer may be too large, return it modulo 10^9 + 7.
watering plants you want to water n plants in your garden with a watering can. the plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. there is a river at x = -1 that you can refill your watering can at. each plant needs a specific amount of water. you will water the plants in the following way: water the plants in order from left to right. after watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can. you cannot refill the watering can early. you are initially at the river (i.e., x = -1). it takes one step to move one unit on the x-axis. given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.
maximum number of events that can be attended you are given an array of events where events[i] = [startdayi, enddayi]. every event i starts at startdayi and ends at enddayi. you can attend an event i at any day d where starttimei <= d <= endtimei. you can only attend one event at any time d. return the maximum number of events you can attend.
find palindrome with fixed length given an integer array queries and a positive integer intlength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intlength or -1 if no such palindrome exists. a palindrome is a number that reads the same backwards and forwards. palindromes cannot have leading zeros.
minimum number of removals to make mountain array you may recall that an array arr is a mountain array if and only if: arr.length >= 3 there exists some index i (0-indexed) with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given an integer array nums, return the minimum number of elements to remove to make nums a mountain array.
change minimum characters to satisfy one of three conditions you are given two strings a and b that consist of lowercase letters. in one operation, you can change any character in a or b to any lowercase letter. your goal is to satisfy one of the following three conditions: every letter in a is strictly less than every letter in b in the alphabet. every letter in b is strictly less than every letter in a in the alphabet. both a and b consist of only one distinct letter. return the minimum number of operations needed to achieve your goal.
count the hidden sequences you are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). more formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i]. you are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain. for example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive). [3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences. [5, 6, 3, 7] is not possible since it contains an element greater than 6. [1, 2, 3, 4] is not possible since the differences are not correct. return the number of possible hidden sequences there are. if there are no possible sequences, return 0.
first missing positive given an unsorted integer array nums, return the smallest missing positive integer. you must implement an algorithm that runs in o(n) time and uses constant extra space.
find total time spent by each employee sql schema table: employees +-------------+------+ | column name | type | +-------------+------+ | emp_id | int | | event_day | date | | in_time | int | | out_time | int | +-------------+------+ (emp_id, event_day, in_time) is the primary key of this table. the table shows the employees' entries and exits in an office. event_day is the day at which this event happened, in_time is the minute at which the employee entered the office, and out_time is the minute at which they left the office. in_time and out_time are between 1 and 1440. it is guaranteed that no two events on the same day intersect in time, and in_time < out_time. write an sql query to calculate the total time in minutes spent by each employee on each day at the office. note that within one day, an employee can enter and leave more than once. the time spent in the office for a single entry is out_time - in_time. return the result table in any order. the query result format is in the following example.
frog position after t seconds given an undirected tree consisting of n vertices numbered from 1 to n. a frog starts jumping from vertex 1. in one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. the frog can not jump back to a visited vertex. in case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex. the edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. return the probability that after t seconds the frog is on the vertex target. answers within 10-5 of the actual answer will be accepted.
biggest single number sql schema table: mynumbers +-------------+------+ | column name | type | +-------------+------+ | num | int | +-------------+------+ there is no primary key for this table. it may contain duplicates. each row of this table contains an integer. a single number is a number that appeared only once in the mynumbers table. write an sql query to report the largest single number. if there is no single number, report null. the query result format is in the following example.
subarrays with k different integers given an integer array nums and an integer k, return the number of good subarrays of nums. a good array is an array where the number of different integers in that array is exactly k. for example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3. a subarray is a contiguous part of an array.
percentage of letter in string given a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.
water bottles there are numbottles water bottles that are initially full of water. you can exchange numexchange empty water bottles from the market with one full water bottle. the operation of drinking a full water bottle turns it into an empty bottle. given the two integers numbottles and numexchange, return the maximum number of water bottles you can drink.
check if two string arrays are equivalent given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise. a string is represented by an array if the array elements concatenated in order forms the string.
can make palindrome from substring you are given a string s and array queries where queries[i] = [lefti, righti, ki]. we may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase english letter. if the substring is possible to be a palindrome string after the operations above, the result of the query is true. otherwise, the result is false. return a boolean array answer where answer[i] is the result of the ith query queries[i]. note that each letter is counted individually for replacement, so if, for example s[lefti...righti] = "aaa", and ki = 2, we can only replace two of the letters. also, note that no query modifies the initial string s. example : input: s = "abcda", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]] output: [true,false,false,true,true] explanation: queries[0]: substring = "d", is palidrome. queries[1]: substring = "bc", is not palidrome. queries[2]: substring = "abcd", is not palidrome after replacing only 1 character. queries[3]: substring = "abcd", could be changed to "abba" which is palidrome. also this can be changed to "baab" first rearrange it "bacd" then replace "cd" with "ab". queries[4]: substring = "abcda", could be changed to "abcba" which is palidrome. example 2: input: s = "lyb", queries = [[0,1,0],[2,2,1]] output: [false,true] constraints: 1 <= s.length, queries.length <= 105 0 <= lefti <= righti < s.length 0 <= ki <= s.length s consists of lowercase english letters.
summary ranges you are given a sorted unique integer array nums. a range [a,b] is the set of all integers from a to b (inclusive). return the smallest sorted list of ranges that cover all the numbers in the array exactly. that is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums. each range [a,b] in the list should be output as: "a->b" if a != b "a" if a == b
remove outermost parentheses a valid parentheses string is either empty "", "(" + a + ")", or a + b, where a and b are valid parentheses strings, and + represents string concatenation. for example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings. a valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = a + b, with a and b nonempty valid parentheses strings. given a valid parentheses string s, consider its primitive decomposition: s = p1 + p2 + ... + pk, where pi are primitive valid parentheses strings. return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.
goal parser interpretation you own a goal parser that can interpret a string command. the command consists of an alphabet of "g", "()" and/or "(al)" in some order. the goal parser will interpret "g" as the string "g", "()" as the string "o", and "(al)" as the string "al". the interpreted strings are then concatenated in the original order. given the string command, return the goal parser's interpretation of command.
long pressed name your friend is typing his name into a keyboard. sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times. you examine the typed characters of the keyboard. return true if it is possible that it was your friends name, with some characters (possibly none) being long pressed.
the number of employees which report to each employee sql schema table: employees +-------------+----------+ | column name | type | +-------------+----------+ | employee_id | int | | name | varchar | | reports_to | int | | age | int | +-------------+----------+ employee_id is the primary key for this table. this table contains information about the employees and the id of the manager they report to. some employees do not report to anyone (reports_to is null). for this problem, we will consider a manager an employee who has at least 1 other employee reporting to them. write an sql query to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer. return the result table ordered by employee_id. the query result format is in the following example.
print zero even odd you have a function printnumber that can be called with an integer parameter and prints it to the console. for example, calling printnumber(7) prints 7 to the console. you are given an instance of the class zeroevenodd that has three functions: zero, even, and odd. the same instance of zeroevenodd will be passed to three different threads: thread a: calls zero() that should only output 0's. thread b: calls even() that should only output even numbers. thread c: calls odd() that should only output odd numbers. modify the given class to output the series "010203040506..." where the length of the series must be 2n. implement the zeroevenodd class: zeroevenodd(int n) initializes the object with the number n that represents the numbers that should be printed. void zero(printnumber) calls printnumber to output one zero. void even(printnumber) calls printnumber to output one even number. void odd(printnumber) calls printnumber to output one odd number.
recyclable and low fat products sql schema table: products +-------------+---------+ | column name | type | +-------------+---------+ | product_id | int | | low_fats | enum | | recyclable | enum | +-------------+---------+ product_id is the primary key for this table. low_fats is an enum of type ('y', 'n') where 'y' means this product is low fat and 'n' means it is not. recyclable is an enum of types ('y', 'n') where 'y' means this product is recyclable and 'n' means it is not. write an sql query to find the ids of products that are both low fat and recyclable. return the result table in any order. the query result format is in the following example.
count ways to build good strings given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following: append the character '0' zero times. append the character '1' one times. this can be performed any number of times. a good string is a string constructed by the above process having a length between low and high (inclusive). return the number of different good strings that can be constructed satisfying these properties. since the answer can be large, return it modulo 109 + 7.
minimum operations to make the array k-increasing you are given a 0-indexed array arr consisting of n positive integers, and a positive integer k. the array arr is called k-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1. for example, arr = [4, 1, 5, 2, 6, 2] is k-increasing for k = 2 because: arr[0] <= arr[2] (4 <= 5) arr[1] <= arr[3] (1 <= 2) arr[2] <= arr[4] (5 <= 6) arr[3] <= arr[5] (2 <= 2) however, the same arr is not k-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]). in one operation, you can choose an index i and change arr[i] into any positive integer. return the minimum number of operations required to make the array k-increasing for the given k.
find all duplicates in an array given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice. you must write an algorithm that runs in o(n) time and uses only constant extra space.
sum game alice and bob take turns playing a game, with alice starting first. you are given a string num of even length consisting of digits and '?' characters. on each turn, a player will do the following if there is still at least one '?' in num: choose an index i where num[i] == '?'. replace num[i] with any digit between '0' and '9'. the game ends when there are no more '?' characters in num. for bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. for alice to win, the sums must not be equal. for example, if the game ended with num = "243801", then bob wins because 2+4+3 = 8+0+1. if the game ended with num = "243803", then alice wins because 2+4+3 != 8+0+3. assuming alice and bob play optimally, return true if alice will win and false if bob will win.
greatest english letter in upper and lower case given a string of english letters s, return the greatest english letter which occurs as both a lowercase and uppercase letter in s. the returned letter should be in uppercase. if no such letter exists, return an empty string. an english letter b is greater than another letter a if b appears after a in the english alphabet.
remove stones to minimize the total you are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. you should apply the following operation exactly k times: choose any piles[i] and remove floor(piles[i] / 2) stones from it. notice that you can apply the operation on the same pile more than once. return the minimum possible total number of stones remaining after applying the k operations. floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).
minimum moves to equal array elements ii given an integer array nums of size n, return the minimum number of moves required to make all array elements equal. in one move, you can increment or decrement an element of the array by 1. test cases are designed so that the answer will fit in a 32-bit integer.
reorganize string given a string s, rearrange the characters of s so that any two adjacent characters are not the same. return any possible rearrangement of s or return "" if not possible.
find first palindromic string in the array given an array of strings words, return the first palindromic string in the array. if there is no such string, return an empty string "". a string is palindromic if it reads the same forward and backward.
rank teams by votes in a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition. the ordering of teams is decided by who received the most position-one votes. if two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. if two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. you are given an array of strings votes which is the votes of all voters in the ranking systems. sort all teams according to the ranking system described above. return a string of all teams sorted by the ranking system.
maximum number of darts inside of a circular dartboard alice is throwing n darts on a very large wall. you are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that alice threw on the wall. bob knows the positions of the n darts on the wall. he wants to place a dartboard of radius r on the wall so that the maximum number of darts that alice throws lies on the dartboard. given the integer r, return the maximum number of darts that can lie on the dartboard.
shuffle the array given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]. return the array in the form [x1,y1,x2,y2,...,xn,yn].
can you eat your favorite candy on your favorite day? you are given a (0-indexed) array of positive integers candiescount where candiescount[i] represents the number of candies of the ith type you have. you are also given a 2d array queries where queries[i] = [favoritetypei, favoritedayi, dailycapi]. you play a game with the following rules: you start eating candies on day 0. you cannot eat any candy of type i unless you have eaten all candies of type i - 1. you must eat at least one candy per day until you have eaten all the candies. construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoritetypei on day favoritedayi without eating more than dailycapi candies on any day, and false otherwise. note that you can eat different types of candy on the same day, provided that you follow rule 2. return the constructed array answer.
maximum genetic difference query there is a rooted tree consisting of n nodes numbered 0 to n - 1. each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). the genetic difference between two genetic values is defined as the bitwise-xor of their values. you are given the integer array parents, where parents[i] is the parent for node i. if node x is the root of the tree, then parents[x] == -1. you are also given the array queries where queries[i] = [nodei, vali]. for each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). more formally, you want to maximize vali xor pi. return an array ans where ans[i] is the answer to the ith query.
minimum cost to connect two groups of points you are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2. the cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. the groups are connected if each point in both groups is connected to one or more points in the opposite group. in other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group. return the minimum cost it takes to connect the two groups.
watering plants ii alice and bob want to water n plants in their garden. the plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. each plant needs a specific amount of water. alice and bob have a watering can each, initially full. they water the plants in the following way: alice waters the plants in order from left to right, starting from the 0th plant. bob waters the plants in order from right to left, starting from the (n - 1)th plant. they begin watering the plants simultaneously. it takes the same amount of time to water each plant regardless of how much water it needs. alice/bob must water the plant if they have enough in their can to fully water it. otherwise, they first refill their can (instantaneously) then water the plant. in case both alice and bob reach the same plant, the one with more water currently in his/her watering can should water this plant. if they have the same amount of water, then alice should water this plant. given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacitya and capacityb representing the capacities of alice's and bob's watering cans respectively, return the number of times they have to refill to water all the plants.
median of two sorted arrays given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. the overall run time complexity should be o(log (m+n)).
longest common subsequence given two strings text1 and text2, return the length of their longest common subsequence. if there is no common subsequence, return 0. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, "ace" is a subsequence of "abcde". a common subsequence of two strings is a subsequence that is common to both strings.
subtree of another tree given the roots of two binary trees root and subroot, return true if there is a subtree of root with the same structure and node values of subroot and false otherwise. a subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. the tree tree could also be considered as a subtree of itself.
the kth factor of n you are given two positive integers n and k. a factor of an integer n is defined as an integer i where n % i == 0. consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.
check if a word occurs as a prefix of any word in a sentence given a sentence that consists of some words separated by a single space, and a searchword, check if searchword is a prefix of any word in sentence. return the index of the word in sentence (1-indexed) where searchword is a prefix of this word. if searchword is a prefix of more than one word, return the index of the first word (minimum index). if there is no such word return -1. a prefix of a string s is any leading contiguous substring of s.
sleep given a positive integer millis, write an asyncronous function that sleeps for millis milliseconds. it can resolve any value.
compare strings by frequency of the smallest character let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. for example, if s = "dcce" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2. you are given an array of strings words and another array of query strings queries. for each query queries[i], count the number of words in words such that f(queries[i]) < f(w) for each w in words. return an integer array answer, where each answer[i] is the answer to the ith query.
merge k sorted lists you are given an array of k linked-lists lists, each linked-list is sorted in ascending order. merge all the linked-lists into one sorted linked-list and return it.
check if there is a valid parentheses string path a parentheses string is a non-empty string consisting only of '(' and ')'. it is valid if any of the following conditions is true: it is (). it can be written as ab (a concatenated with b), where a and b are valid parentheses strings. it can be written as (a), where a is a valid parentheses string. you are given an m x n matrix of parentheses grid. a valid parentheses string path in the grid is a path satisfying all of the following conditions: the path starts from the upper left cell (0, 0). the path ends at the bottom-right cell (m - 1, n - 1). the path only ever moves down or right. the resulting parentheses string formed by the path is valid. return true if there exists a valid parentheses string path in the grid. otherwise, return false.
minimum flips to make a or b equal to c given 3 positives numbers a, b and c. return the minimum flips required in some bits of a and b to make ( a or b == c ). (bitwise or operation). flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.
find the original array of prefix xor you are given an integer array pref of size n. find and return the array arr of size n that satisfies: pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]. note that ^ denotes the bitwise-xor operation. it can be proven that the answer is unique.
minimum number of moves to make palindrome you are given a string s consisting only of lowercase english letters. in one move, you can select any two adjacent characters of s and swap them. return the minimum number of moves needed to make s a palindrome. note that the input will be generated such that s can always be converted to a palindrome.
finding mk average you are given two integers, m and k, and a stream of integers. you are tasked to implement a data structure that calculates the mkaverage for the stream. the mkaverage can be calculated using these steps: if the number of the elements in the stream is less than m you should consider the mkaverage to be -1. otherwise, copy the last m elements of the stream to a separate container. remove the smallest k elements and the largest k elements from the container. calculate the average value for the rest of the elements rounded down to the nearest integer. implement the mkaverage class: mkaverage(int m, int k) initializes the mkaverage object with an empty stream and the two integers m and k. void addelement(int num) inserts a new element num into the stream. int calculatemkaverage() calculates and returns the mkaverage for the current stream rounded down to the nearest integer.
maximum side length of a square with sum less than or equal to threshold given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.
largest submatrix with rearrangements you are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order. return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.
continuous subarray sum given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise. a good subarray is a subarray where: its length is at least two, and the sum of the elements of the subarray is a multiple of k. note that: a subarray is a contiguous part of the array. an integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
maximum building height you want to build n new buildings in a city. the new buildings will be built in a line and are labeled from 1 to n. however, there are city restrictions on the heights of the new buildings: the height of each building must be a non-negative integer. the height of the first building must be 0. the height difference between any two adjacent buildings cannot exceed 1. additionally, there are city restrictions on the maximum height of specific buildings. these restrictions are given as a 2d integer array restrictions where restrictions[i] = [idi, maxheighti] indicates that building idi must have a height less than or equal to maxheighti. it is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions. return the maximum possible height of the tallest building.
count array pairs divisible by k given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that: 0 <= i < j <= n - 1 and nums[i] * nums[j] is divisible by k.
tenth line given a text file file.txt, print just the 10th line of the file. example: assume that file.txt has the following content: line 1 line 2 line 3 line 4 line 5 line 6 line 7 line 8 line 9 line 10 your script should output the tenth line, which is: line 10 note: 1. if the file contains less than 10 lines, what should you output? 2. there's at least three different solutions. try to explore all possibilities.
divide array in sets of k consecutive numbers given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers. return true if it is possible. otherwise, return false.
binary string with substrings representing 1 to n given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise. a substring is a contiguous sequence of characters within a string.
maximum score words formed by letters given a list of words, list of single letters (might be repeating) and score of every character. return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times). it is not necessary to use all characters in letters and each letter can only be used once. score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.
valid boomerang given an array points where points[i] = [xi, yi] represents a point on the x-y plane, return true if these points are a boomerang. a boomerang is a set of three points that are all distinct and not in a straight line.
trips and users sql schema table: trips +-------------+----------+ | column name | type | +-------------+----------+ | id | int | | client_id | int | | driver_id | int | | city_id | int | | status | enum | | request_at | date | +-------------+----------+ id is the primary key for this table. the table holds all taxi trips. each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the users table. status is an enum type of ('completed', 'cancelled_by_driver', 'cancelled_by_client'). table: users +-------------+----------+ | column name | type | +-------------+----------+ | users_id | int | | banned | enum | | role | enum | +-------------+----------+ users_id is the primary key for this table. the table holds all users. each user has a unique users_id, and role is an enum type of ('client', 'driver', 'partner'). banned is an enum type of ('yes', 'no'). the cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day. write a sql query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between "2013-10-01" and "2013-10-03". round cancellation rate to two decimal points. return the result table in any order. the query result format is in the following example.
kth missing positive number given an array arr of positive integers sorted in a strictly increasing order, and an integer k. return the kth positive integer that is missing from this array.
largest values from labels there is a set of n items. you are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively. you are also given two integers numwanted and uselimit. choose a subset s of the n elements such that: the size of the subset s is less than or equal to numwanted. there are at most uselimit items with the same label in s. the score of a subset is the sum of the values in the subset. return the maximum score of a subset s.
preimage size of factorial zeroes function let f(x) be the number of zeroes at the end of x!. recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1. for example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end. given an integer k, return the number of non-negative integers x have the property that f(x) = k.
largest local values in a matrix you are given an n x n integer matrix grid. generate an integer matrix maxlocal of size (n - 2) x (n - 2) such that: maxlocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1. in other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid. return the generated matrix.
car pooling there is a car with capacity empty seats. the vehicle only drives east (i.e., it cannot turn around and drive west). you are given the integer capacity and an array trips where trips[i] = [numpassengersi, fromi, toi] indicates that the ith trip has numpassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. the locations are given as the number of kilometers due east from the car's initial location. return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.
odd even linked list given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. the first node is considered odd, and the second node is even, and so on. note that the relative order inside both the even and odd groups should remain as it was in the input. you must solve the problem in o(1) extra space complexity and o(n) time complexity.
get equal substrings within budget you are given two strings s and t of the same length and an integer maxcost. you want to change s to t. changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ascii values of the characters). return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxcost. if there is no substring from s that can be changed to its corresponding substring from t, return 0.
check if move is legal you are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. on the board, free cells are represented by '.', white cells are represented by 'w', and black cells are represented by 'b'. each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). however, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal). a good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). you can find examples for good lines in the figure below: given two integers rmove and cmove and a character color representing the color you are playing as (white or black), return true if changing cell (rmove, cmove) to color color is a legal move, or false if it is not legal.
count the digits that divide a number given an integer num, return the number of digits in num that divide num. an integer val divides nums if nums % val == 0.
count good triplets given an array of integers arr, and three integers a, b and c. you need to find the number of good triplets. a triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true: 0 <= i < j < k < arr.length |arr[i] - arr[j]| <= a |arr[j] - arr[k]| <= b |arr[i] - arr[k]| <= c where |x| denotes the absolute value of x. return the number of good triplets.
find the prefix common array of two arrays you are given two 0-indexed integer permutations a and b of length n. a prefix common array of a and b is an array c such that c[i] is equal to the count of numbers that are present at or before the index i in both a and b. return the prefix common array of a and b. a sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.
the latest time to catch a bus you are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. you are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. all bus departure times are unique. all passenger arrival times are unique. you are given an integer capacity, which represents the maximum number of passengers that can get on each bus. when a passenger arrives, they will wait in line for the next available bus. you can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. passengers with the earliest arrival times get on the bus first. more formally when a bus arrives, either: if capacity or fewer passengers are waiting for a bus, they will all get on the bus, or the capacity passengers with the earliest arrival times will get on the bus. return the latest time you may arrive at the bus station to catch a bus. you cannot arrive at the same time as another passenger. note: the arrays buses and passengers are not necessarily sorted.
decode string given an encoded string, return its decoded string. the encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. note that k is guaranteed to be a positive integer. you may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. for example, there will not be input like 3a or 2[4]. the test cases are generated so that the length of the output will never exceed 105.
shortest distance to target string in a circular array you are given a 0-indexed circular string array words and a string target. a circular array means that the array's end connects to the array's beginning. formally, the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words. starting from startindex, you can move to either the next word or the previous word with 1 step at a time. return the shortest distance needed to reach the string target. if the string target does not exist in words, return -1.
divide array into equal pairs you are given an integer array nums consisting of 2 * n integers. you need to divide nums into n pairs such that: each element belongs to exactly one pair. the elements present in a pair are equal. return true if nums can be divided into n pairs, otherwise return false.
maximum average pass ratio there is a school that has classes of students and each class will be having a final exam. you are given a 2d integer array classes, where classes[i] = [passi, totali]. you know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam. you are also given an integer extrastudents. there are another extrastudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. you want to assign each of the extrastudents students to a class in a way that maximizes the average pass ratio across all the classes. the pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. the average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes. return the maximum possible average pass ratio after assigning the extrastudents students. answers within 10-5 of the actual answer will be accepted.
json deep equal given two objects o1 and o2, check if they are deeply equal. for two objects to be deeply equal, they must contain the same keys, and the associated values must also be deeply equal. two objects are also considered deeply equal if they pass the === equality check. you may assume both objects are the output of json.parse. in other words, they are valid json. please solve it without using lodash's _.isequal() function.
number of distinct roll sequences you are given an integer n. you roll a fair 6-sided dice n times. determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied: the greatest common divisor of any adjacent values in the sequence is equal to 1. there is at least a gap of 2 rolls between equal valued rolls. more formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2. return the total number of distinct sequences possible. since the answer may be very large, return it modulo 109 + 7. two sequences are considered distinct if at least one element is different.
html entity parser html entity parser is the parser that takes html code as input and replace all the entities of the special characters by the characters itself. the special characters and their entities for html are: quotation mark: the entity is &quot; and symbol character is ". single quote mark: the entity is &apos; and symbol character is '. ampersand: the entity is &amp; and symbol character is &. greater than sign: the entity is &gt; and symbol character is >. less than sign: the entity is &lt; and symbol character is <. slash: the entity is &frasl; and symbol character is /. given the input text string to the html parser, you have to implement the entity parser. return the text after replacing the entities by the special characters.
minimum number of refueling stops a car travels from a starting position to a destination which is target miles east of the starting position. there are gas stations along the way. the gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas. the car starts with an infinite tank of gas, which initially has startfuel liters of fuel in it. it uses one liter of gas per one mile that it drives. when the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car. return the minimum number of refueling stops the car must make in order to reach its destination. if it cannot reach the destination, return -1. note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. if the car reaches the destination with 0 fuel left, it is still considered to have arrived.
matchsticks to square you are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. you want to use all the matchsticks to make one square. you should not break any stick, but you can link them up, and each matchstick must be used exactly one time. return true if you can make this square and false otherwise.
bitwise ors of subarrays given an integer array arr, return the number of distinct bitwise ors of all the non-empty subarrays of arr. the bitwise or of a subarray is the bitwise or of each integer in the subarray. the bitwise or of a subarray of one integer is that integer. a subarray is a contiguous non-empty sequence of elements within an array.
query kth smallest trimmed number you are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits. you are also given a 0-indexed 2d integer array queries where queries[i] = [ki, trimi]. for each queries[i], you need to: trim each number in nums to its rightmost trimi digits. determine the index of the kith smallest trimmed number in nums. if two trimmed numbers are equal, the number with the lower index is considered to be smaller. reset each number in nums to its original length. return an array answer of the same length as queries, where answer[i] is the answer to the ith query. note: to trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain. strings in nums may contain leading zeros.
remove duplicate letters given a string s, remove duplicate letters so that every letter appears once and only once. you must make sure your result is the smallest in lexicographical order among all possible results.
maximum average subarray i you are given an integer array nums consisting of n elements, and an integer k. find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. any answer with a calculation error less than 10-5 will be accepted.
largest odd number in string you are given a string num, representing a large integer. return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists. a substring is a contiguous sequence of characters within a string.
largest number given a list of non-negative integers nums, arrange them such that they form the largest number and return it. since the result may be very large, so you need to return a string instead of an integer.
coin change you are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. return the fewest number of coins that you need to make up that amount. if that amount of money cannot be made up by any combination of the coins, return -1. you may assume that you have an infinite number of each kind of coin.
find center of star graph there is an undirected star graph consisting of n nodes labeled from 1 to n. a star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node. you are given a 2d integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. return the center of the given star graph.
ugly number iii an ugly number is a positive integer that is divisible by a, b, or c. given four integers n, a, b, and c, return the nth ugly number.
smallest range covering elements from k lists you have k lists of sorted integers in non-decreasing order. find the smallest range that includes at least one number from each of the k lists. we define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.
paths in matrix whose sum is divisible by k you are given a 0-indexed m x n integer matrix grid and an integer k. you are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right. return the number of paths where the sum of the elements on the path is divisible by k. since the answer may be very large, return it modulo 109 + 7.
minimum time to visit a cell in a grid you are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col]. you are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. each move you make takes 1 second. return the minimum time required in which you can visit the bottom-right cell of the matrix. if you cannot visit the bottom-right cell, then return -1.
corporate flight bookings there are n flights that are labeled from 1 to n. you are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range. return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.
escape a large maze there is a 1 million by 1 million grid on an xy-plane, and the coordinates of each grid square are (x, y). we start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. there is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi). each move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. we are also not allowed to walk outside of the grid. return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.
number of arithmetic triplets you are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. a triplet (i, j, k) is an arithmetic triplet if the following conditions are met: i < j < k, nums[j] - nums[i] == diff, and nums[k] - nums[j] == diff. return the number of unique arithmetic triplets.
evaluate boolean binary tree you are given the root of a full binary tree with the following properties: leaf nodes have either the value 0 or 1, where 0 represents false and 1 represents true. non-leaf nodes have either the value 2 or 3, where 2 represents the boolean or and 3 represents the boolean and. the evaluation of a node is as follows: if the node is a leaf node, the evaluation is the value of the node, i.e. true or false. otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations. return the boolean result of evaluating the root node. a full binary tree is a binary tree where each node has either 0 or 2 children. a leaf node is a node that has zero children.
number of squareful arrays an array is squareful if the sum of every pair of adjacent elements is a perfect square. given an integer array nums, return the number of permutations of nums that are squareful. two permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].
find all possible recipes from given supplies you have information about n different recipes. you are given a string array recipes and a 2d string array ingredients. the ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes. you are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them. return a list of all the recipes that you can create. you may return the answer in any order. note that two recipes may contain each other in their ingredients.
smallest range i you are given an integer array nums and an integer k. in one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. you can apply this operation at most once for each index i. the score of nums is the difference between the maximum and minimum elements in nums. return the minimum score of nums after applying the mentioned operation at most once for each index in it.
maximum number of visible points you are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the x-y plane. initially, you are facing directly east from your position. you cannot move from your position, but you can rotate. in other words, posx and posy cannot be changed. your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. let d be the amount in degrees that you rotate counterclockwise. then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2]. your browser does not support the video tag or this video format. you can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view. there can be multiple points at one coordinate. there may be points at your location, and you can always see these points regardless of your rotation. points do not obstruct your vision to other points. return the maximum number of points you can see.
array of doubled pairs given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.
trapping rain water ii given an m x n integer matrix heightmap representing the height of each unit cell in a 2d elevation map, return the volume of water it can trap after raining.
missing number given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
binary watch a binary watch has 4 leds on the top to represent the hours (0-11), and 6 leds on the bottom to represent the minutes (0-59). each led represents a zero or one, with the least significant bit on the right. for example, the below binary watch reads "4:51". given an integer turnedon which represents the number of leds that are currently on (ignoring the pm), return all possible times the watch could represent. you may return the answer in any order. the hour must not contain a leading zero. for example, "01:00" is not valid. it should be "1:00". the minute must be consist of two digits and may contain a leading zero. for example, "10:2" is not valid. it should be "10:02".
utf-8 validation given an integer array data representing the data, return whether it is a valid utf-8 encoding (i.e. it translates to a sequence of valid utf-8 encoded characters). a character in utf8 can be from 1 to 4 bytes long, subjected to the following rules: for a 1-byte character, the first bit is a 0, followed by its unicode code. for an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10. this is how the utf-8 encoding would work: number of bytes | utf-8 octet sequence | (binary) --------------------+----------------------------------------- 1 | 0xxxxxxx 2 | 110xxxxx 10xxxxxx 3 | 1110xxxx 10xxxxxx 10xxxxxx 4 | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx x denotes a bit in the binary form of a byte that may be either 0 or 1. note: the input is an array of integers. only the least significant 8 bits of each integer is used to store the data. this means each integer represents only 1 byte of data.
the k-th lexicographical string of all happy strings of length n a happy string is a string that: consists only of letters of the set ['a', 'b', 'c']. s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed). for example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings. given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order. return the kth string of this list or return an empty string if there are less than k happy strings of length n.
find kth largest xor coordinate value you are given a 2d matrix of size m x n, consisting of non-negative integers. you are also given an integer k. the value of coordinate (a, b) of the matrix is the xor of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed). find the kth largest value (1-indexed) of all the coordinates of matrix.
customer placing the largest number of orders sql schema table: orders +-----------------+----------+ | column name | type | +-----------------+----------+ | order_number | int | | customer_number | int | +-----------------+----------+ order_number is the primary key for this table. this table contains information about the order id and the customer id. write an sql query to find the customer_number for the customer who has placed the largest number of orders. the test cases are generated so that exactly one customer will have placed more orders than any other customer. the query result format is in the following example.
rotate string given two strings s and goal, return true if and only if s can become goal after some number of shifts on s. a shift on s consists of moving the leftmost character of s to the rightmost position. for example, if s = "abcde", then it will be "bcdea" after one shift.
concatenation of consecutive binary numbers given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.
closest room there is a hotel with n rooms. the rooms are represented by a 2d integer array rooms where rooms[i] = [roomidi, sizei] denotes that there is a room with room number roomidi and size equal to sizei. each roomidi is guaranteed to be unique. you are also given k queries in a 2d array queries where queries[j] = [preferredj, minsizej]. the answer to the jth query is the room number id of a room such that: the room has a size of at least minsizej, and abs(id - preferredj) is minimized, where abs(x) is the absolute value of x. if there is a tie in the absolute difference, then use the room with the smallest such id. if there is no such room, the answer is -1. return an array answer of length k where answer[j] contains the answer to the jth query.
count total number of colored cells there exists an infinitely large two-dimensional grid of uncolored unit cells. you are given a positive integer n, indicating that you must do the following routine for n minutes: at the first minute, color any arbitrary unit cell blue. every minute thereafter, color blue every uncolored cell that touches a blue cell. below is a pictorial representation of the state of the grid after minutes 1, 2, and 3. return the number of colored cells at the end of n minutes.
number of burgers with no waste of ingredients given two integers tomatoslices and cheeseslices. the ingredients of different burgers are as follows: jumbo burger: 4 tomato slices and 1 cheese slice. small burger: 2 tomato slices and 1 cheese slice. return [total_jumbo, total_small] so that the number of remaining tomatoslices equal to 0 and the number of remaining cheeseslices equal to 0. if it is not possible to make the remaining tomatoslices and cheeseslices equal to 0 return [].
number of substrings containing all three characters given a string s consisting only of characters a, b and c. return the number of substrings containing at least one occurrence of all these characters a, b and c.
minimum cost to change the final value of expression you are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise and operator),'|' (bitwise or operator),'(', and ')'. for example, "()1|1" and "(1)&()" are not valid while "1", "(((1))|(0))", and "1|(0&(1))" are valid expressions. return the minimum cost to change the final value of the expression. for example, if expression = "1|1|(0&0)&1", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. we want to apply operations so that the new expression evaluates to 0. the cost of changing the final value of an expression is the number of operations performed on the expression. the types of operations are described as follows: turn a '1' into a '0'. turn a '0' into a '1'. turn a '&' into a '|'. turn a '|' into a '&'. note: '&' does not take precedence over '|' in the order of calculation. evaluate parentheses first, then in left-to-right order.
smallest string with a given numeric value the numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on. the numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. for example, the numeric value of the string "abe" is equal to 1 + 2 + 5 = 8. you are given two integers n and k. return the lexicographically smallest string with length equal to n and numeric value equal to k. note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.
construct smallest number from di string you are given a 0-indexed string pattern of length n consisting of the characters 'i' meaning increasing and 'd' meaning decreasing. a 0-indexed string num of length n + 1 is created using the following conditions: num consists of the digits '1' to '9', where each digit is used at most once. if pattern[i] == 'i', then num[i] < num[i + 1]. if pattern[i] == 'd', then num[i] > num[i + 1]. return the lexicographically smallest possible string num that meets the conditions.
minimized maximum of products distributed to any store you are given an integer n indicating there are n specialty retail stores. there are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type. you need to distribute all products to the retail stores following these rules: a store can only be given at most one product type but can be given any amount of it. after distribution, each store will have been given some number of products (possibly 0). let x represent the maximum number of products given to any store. you want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store. return the minimum possible x.
design hashmap design a hashmap without using any built-in hash table libraries. implement the myhashmap class: myhashmap() initializes the object with an empty map. void put(int key, int value) inserts a (key, value) pair into the hashmap. if the key already exists in the map, update the corresponding value. int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key. void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
call function with custom context enhance all functions to have the callpolyfill method. the method accepts an object obj as it's first parameter and any number of additional arguments. the obj becomes the this context for the function. the additional arguments are passed to the function (that the callpolyfill method belongs on). for example if you had the function: function tax(price, taxrate) { const totalcost = price * (1 + taxrate); console.log(`the cost of ${this.item} is ${totalcost}`); } calling this function like tax(10, 0.1) will log "the cost of undefined is 11". this is because the this context was not defined. however, calling the function like tax.callpolyfill({item: "salad"}, 10, 0.1) will log "the cost of salad is 11". the this context was appropriately set, and the function logged an appropriate output. please solve this without using the built-in function.call method.
successful pairs of spells and potions you are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion. you are also given an integer success. a spell and potion pair is considered successful if the product of their strengths is at least success. return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.
time to cross a bridge there are k workers who want to move n boxes from an old warehouse to a new one. you are given the two integers n and k, and a 2d integer array time of size k x 4 where time[i] = [lefttorighti, pickoldi, righttolefti, putnewi]. the warehouses are separated by a river and connected by a bridge. the old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. initially, all k workers are waiting on the left side of the bridge. to move the boxes, the ith worker (0-indexed) can : cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in lefttorighti minutes. pick a box from the old warehouse and return to the bridge in pickoldi minutes. different workers can pick up their boxes simultaneously. cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in righttolefti minutes. put the box in the new warehouse and return to the bridge in putnewi minutes. different workers can put their boxes simultaneously. a worker i is less efficient than a worker j if either condition is met: lefttorighti + righttolefti > lefttorightj + righttoleftj lefttorighti + righttolefti == lefttorightj + righttoleftj and i > j the following rules regulate the movement of the workers through the bridge : if a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge. if the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. if more than one worker is waiting on the right side, the one with the lowest efficiency crosses first. if the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. if more than one worker is waiting on the left side, the one with the lowest efficiency crosses first. return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.
largest merge of two strings you are given two strings word1 and word2. you want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options: if word1 is non-empty, append the first character in word1 to merge and delete it from word1. for example, if word1 = "abc" and merge = "dv", then after choosing this operation, word1 = "bc" and merge = "dva". if word2 is non-empty, append the first character in word2 to merge and delete it from word2. for example, if word2 = "abc" and merge = "", then after choosing this operation, word2 = "bc" and merge = "a". return the lexicographically largest merge you can construct. a string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. for example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.
single number given a non-empty array of integers nums, every element appears twice except for one. find that single one. you must implement a solution with a linear runtime complexity and use only constant extra space.
remove one element to make the array strictly increasing given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. if the array is already strictly increasing, return true. the array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).
binary tree maximum path sum a path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. a node can only appear in the sequence at most once. note that the path does not need to pass through the root. the path sum of a path is the sum of the node's values in the path. given the root of a binary tree, return the maximum path sum of any non-empty path.
minimum adjacent swaps to reach the kth smallest number you are given a string num, representing a large integer, and an integer k. we call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. there can be many wonderful integers. however, we only care about the smallest-valued ones. for example, when num = "5489355142": the 1st smallest wonderful integer is "5489355214". the 2nd smallest wonderful integer is "5489355241". the 3rd smallest wonderful integer is "5489355412". the 4th smallest wonderful integer is "5489355421". return the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer. the tests are generated in such a way that kth smallest wonderful integer exists.
fibonacci number the fibonacci numbers, commonly denoted f(n) form a sequence, called the fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. that is, f(0) = 0, f(1) = 1 f(n) = f(n - 1) + f(n - 2), for n > 1. given n, calculate f(n).
add one row to tree given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth. note that the root node is at depth 1. the adding rule is: given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root. cur's original left subtree should be the left subtree of the new left subtree root. cur's original right subtree should be the right subtree of the new right subtree root. if depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.
maximum matrix sum you are given an n x n integer matrix. you can do the following operation any number of times: choose any two adjacent elements of matrix and multiply each of them by -1. two elements are considered adjacent if and only if they share a border. your goal is to maximize the summation of the matrix's elements. return the maximum sum of the matrix's elements using the operation mentioned above.
maximum product of the length of two palindromic substrings you are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized. more formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive. return the maximum possible product of the lengths of the two non-intersecting palindromic substrings. a palindrome is a string that is the same forward and backward. a substring is a contiguous sequence of characters in a string.
maximum number of integers to choose from a range i you are given an integer array banned and two integers n and maxsum. you are choosing some number of integers following the below rules: the chosen integers have to be in the range [1, n]. each integer can be chosen at most once. the chosen integers should not be in the array banned. the sum of the chosen integers should not exceed maxsum. return the maximum number of integers you can choose following the mentioned rules.
determine if string halves are alike you are given a string s of even length. split this string into two halves of equal lengths, and let a be the first half and b be the second half. two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u'). notice that s contains uppercase and lowercase letters. return true if a and b are alike. otherwise, return false.
two out of three given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. you may return the values in any order.
maximum students taking exam given a m * n matrix seats that represent seats distributions in a classroom. if a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character. students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. return the maximum number of students that can take the exam together without any cheating being possible.. students must be placed in seats in good condition.
construct binary tree from inorder and postorder traversal given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.
reorder list you are given the head of a singly linked-list. the list can be represented as: l0 → l1 → … → ln - 1 → ln reorder the list to be on the following form: l0 → ln → l1 → ln - 1 → l2 → ln - 2 → … you may not modify the values in the list's nodes. only nodes themselves may be changed.
word subsets you are given two string arrays words1 and words2. a string b is a subset of string a if every letter in b occurs in a including multiplicity. for example, "wrr" is a subset of "warrior" but is not a subset of "world". a string a from words1 is universal if for every string b in words2, b is a subset of a. return an array of all the universal strings in words1. you may return the answer in any order.
goat latin you are given a string sentence that consist of words separated by spaces. each word consists of lowercase and uppercase letters only. we would like to convert the sentence to "goat latin" (a made-up language similar to pig latin.) the rules of goat latin are as follows: if a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append "ma" to the end of the word. for example, the word "apple" becomes "applema". if a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add "ma". for example, the word "goat" becomes "oatgma". add one letter 'a' to the end of each word per its word index in the sentence, starting with 1. for example, the first word gets "a" added to the end, the second word gets "aa" added to the end, and so on. return the final sentence representing the conversion from sentence to goat latin.
find in mountain array (this problem is an interactive problem.) you may recall that an array arr is a mountain array if and only if: arr.length >= 3 there exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given a mountain array mountainarr, return the minimum index such that mountainarr.get(index) == target. if such an index does not exist, return -1. you cannot access the mountain array directly. you may only access the array using a mountainarray interface: mountainarray.get(k) returns the element of the array at index k (0-indexed). mountainarray.length() returns the length of the array. submissions making more than 100 calls to mountainarray.get will be judged wrong answer. also, any solutions that attempt to circumvent the judge will result in disqualification.
distribute coins in binary tree you are given the root of a binary tree with n nodes where each node in the tree has node.val coins. there are n coins in total throughout the whole tree. in one move, we may choose two adjacent nodes and move one coin from one node to another. a move may be from parent to child, or from child to parent. return the minimum number of moves required to make every node have exactly one coin.
minimum cost to split an array you are given an integer array nums and an integer k. split the array into some number of non-empty subarrays. the cost of a split is the sum of the importance value of each subarray in the split. let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed. for example, trimmed([3,1,2,4,3,4]) = [3,4,3,4]. the importance value of a subarray is k + trimmed(subarray).length. for example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].the importance value of this subarray will be k + 5. return the minimum possible cost of a split of nums. a subarray is a contiguous non-empty sequence of elements within an array.
partition array according to given pivot you are given a 0-indexed integer array nums and an integer pivot. rearrange nums such that the following conditions are satisfied: every element less than pivot appears before every element greater than pivot. every element equal to pivot appears in between the elements less than and greater than pivot. the relative order of the elements less than pivot and the elements greater than pivot is maintained. more formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. for elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj. return nums after the rearrangement.
cherry pickup you are given an n x n grid representing a field of cherries, each cell is one of three possible integers. 0 means the cell is empty, so you can pass through, 1 means the cell contains a cherry that you can pick up and pass through, or -1 means the cell contains a thorn that blocks your way. return the maximum number of cherries you can collect by following the rules below: starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1). after reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells. when passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0. if there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.
find triangular sum of an array you are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive). the triangular sum of nums is the value of the only element present in nums after the following process terminates: let nums comprise of n elements. if n == 1, end the process. otherwise, create a new 0-indexed integer array newnums of length n - 1. for each index i, where 0 <= i < n - 1, assign the value of newnums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator. replace the array nums with newnums. repeat the entire process starting from step 1. return the triangular sum of nums.
sum of subsequence widths the width of a sequence is the difference between the maximum and minimum elements in the sequence. given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. since the answer may be very large, return it modulo 109 + 7. a subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. for example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].
smallest missing genetic value in each subtree there is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. you are given a 0-indexed integer array parents, where parents[i] is the parent for node i. since node 0 is the root, parents[0] == -1. there are 105 genetic values, each represented by an integer in the inclusive range [1, 105]. you are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i. return an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i. the subtree rooted at a node x contains node x and all of its descendant nodes.
minimum area rectangle you are given an array of points in the x-y plane points where points[i] = [xi, yi]. return the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes. if there is not any such rectangle, return 0.
longest uncommon subsequence i given two strings a and b, return the length of the longest uncommon subsequence between a and b. if the longest uncommon subsequence does not exist, return -1. an uncommon subsequence between two strings is a string that is a subsequence of one but not the other. a subsequence of a string s is a string that can be obtained after deleting any number of characters from s. for example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
largest color value in a directed graph there is a directed graph of n colored nodes and m edges. the nodes are numbered from 0 to n - 1. you are given a string colors where colors[i] is a lowercase english letter representing the color of the ith node in this graph (0-indexed). you are also given a 2d array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj. a valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. the color value of the path is the number of nodes that are colored the most frequently occurring color along that path. return the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.
sum root to leaf numbers you are given the root of a binary tree containing digits from 0 to 9 only. each root-to-leaf path in the tree represents a number. for example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123. return the total sum of all root-to-leaf numbers. test cases are generated so that the answer will fit in a 32-bit integer. a leaf node is a node with no children.
number of students doing homework at a given time given two integer arrays starttime and endtime and given an integer querytime. the ith student started doing their homework at the time starttime[i] and finished it at time endtime[i]. return the number of students doing their homework at time querytime. more formally, return the number of students where querytime lays in the interval [starttime[i], endtime[i]] inclusive.
latest time by replacing hidden digits you are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?). the valid times are those inclusively between 00:00 and 23:59. return the latest valid time you can get from time by replacing the hidden digits.
removing stars from a string you are given a string s, which contains stars *. in one operation, you can: choose a star in s. remove the closest non-star character to its left, as well as remove the star itself. return the string after all stars have been removed. note: the input will be generated such that the operation is always possible. it can be shown that the resulting string will always be unique.
beautiful arrangement ii given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement: suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers. return the list answer. if there multiple valid answers, return any of them.
maximum product of word lengths given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. if no such two words exist, return 0.
trim a binary search tree given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). it can be proven that there is a unique answer. return the root of the trimmed binary search tree. note that the root may change depending on the given bounds.
valid sudoku determine if a 9 x 9 sudoku board is valid. only the filled cells need to be validated according to the following rules: each row must contain the digits 1-9 without repetition. each column must contain the digits 1-9 without repetition. each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. note: a sudoku board (partially filled) could be valid but is not necessarily solvable. only the filled cells need to be validated according to the mentioned rules.
number of flowers in full bloom you are given a 0-indexed 2d integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). you are also given a 0-indexed integer array people of size n, where poeple[i] is the time that the ith person will arrive to see the flowers. return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.
remove all occurrences of a substring given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed: find the leftmost occurrence of the substring part and remove it from s. return s after removing all occurrences of part. a substring is a contiguous sequence of characters in a string.
longest square streak in an array you are given an integer array nums. a subsequence of nums is called a square streak if: the length of the subsequence is at least 2, and after sorting the subsequence, each element (except the first element) is the square of the previous number. return the length of the longest square streak in nums, or return -1 if there is no square streak. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
three equal parts you are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value. if it is possible, return any [i, j] with i + 1 < j, such that: arr[0], arr[1], ..., arr[i] is the first part, arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part. all three parts have equal binary values. if it is not possible, return [-1, -1]. note that the entire part is used when considering what binary value it represents. for example, [1,1,0] represents 6 in decimal, not 3. also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.
remove sub-folders from the filesystem given a list of folders folder, return the folders after removing all sub-folders in those folders. you may return the answer in any order. if a folder[i] is located within another folder[j], it is called a sub-folder of it. the format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase english letters. for example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string and "/" are not.
number of days between two dates write a program to count the number of days between two dates. the two dates are given as strings, their format is yyyy-mm-dd as shown in the examples.
single number iii given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. find the two elements that appear only once. you can return the answer in any order. you must write an algorithm that runs in linear runtime complexity and uses only constant extra space.
the number of full rounds you have played you are participating in an online chess tournament. there is a chess round that starts every 15 minutes. the first round of the day starts at 00:00, and after every 15 minutes, a new round starts. for example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30. you are given two strings logintime and logouttime where: logintime is the time you will login to the game, and logouttime is the time you will logout from the game. if logouttime is earlier than logintime, this means you have played from logintime to midnight and from midnight to logouttime. return the number of full chess rounds you have played in the tournament. note: all the given times follow the 24-hour clock. that means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.
number of increasing paths in a grid you are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions. return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. since the answer may be very large, return it modulo 109 + 7. two paths are considered different if they do not have exactly the same sequence of visited cells.
bus routes you are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever. for example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever. you will start at the bus stop source (you are not on any bus initially), and you want to go to the bus stop target. you can travel between bus stops by buses only. return the least number of buses you must take to travel from source to target. return -1 if it is not possible.
maximum score from removing substrings you are given a string s and two integers x and y. you can perform two types of operations any number of times. remove substring "ab" and gain x points. for example, when removing "ab" from "cabxbae" it becomes "cxbae". remove substring "ba" and gain y points. for example, when removing "ba" from "cabxbae" it becomes "cabxe". return the maximum points you can gain after applying the above operations on s.
falling squares there are several squares being dropped onto the x-axis of a 2d plane. you are given a 2d integer array positions where positions[i] = [lefti, sidelengthi] represents the ith square with a side length of sidelengthi that is dropped with its left edge aligned with x-coordinate lefti. each square is dropped one at a time from a height above any landed squares. it then falls downward (negative y direction) until it either lands on the top side of another square or on the x-axis. a square brushing the left/right side of another square does not count as landing on it. once it lands, it freezes in place and cannot be moved. after each square is dropped, you must record the height of the current tallest stack of squares. return an integer array ans where ans[i] represents the height described above after dropping the ith square.
magical string a magical string s consists of only '1' and '2' and obeys the following rules: the string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself. the first few elements of s is s = "1221121221221121122……". if we group the consecutive 1's and 2's in s, it will be "1 22 11 2 1 22 1 22 11 2 11 22 ......" and the occurrences of 1's or 2's in each group are "1 2 2 1 1 2 1 2 2 1 2 2 ......". you can see that the occurrence sequence is s itself. given an integer n, return the number of 1's in the first n number in the magical string s.
total cost to hire k workers you are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker. you are also given two integers k and candidates. we want to hire exactly k workers according to the following rules: you will run k sessions and hire exactly one worker in each session. in each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. break the tie by the smallest index. for example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2]. in the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. please note that the indexing may be changed in the process. if there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. break the tie by the smallest index. a worker can only be chosen once. return the total cost to hire exactly k workers.
next greater element iv you are given a 0-indexed array of non-negative integers nums. for each integer in nums, you must find its respective second greater integer. the second greater integer of nums[i] is nums[j] such that: j > i nums[j] > nums[i] there exists exactly one index k such that nums[k] > nums[i] and i < k < j. if there is no such nums[j], the second greater integer is considered to be -1. for example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3, and that of 3 and 4 is -1. return an integer array answer, where answer[i] is the second greater integer of nums[i].
minimum number of food buckets to feed the hamsters you are given a 0-indexed string hamsters where hamsters[i] is either: 'h' indicating that there is a hamster at index i, or '.' indicating that index i is empty. you will add some number of food buckets at the empty indices in order to feed the hamsters. a hamster can be fed if there is at least one food bucket to its left or to its right. more formally, a hamster at index i can be fed if you place a food bucket at index i - 1 and/or at index i + 1. return the minimum number of food buckets you should place at empty indices to feed all the hamsters or -1 if it is impossible to feed all of them.
invalid transactions a transaction is possibly invalid if: the amount exceeds $1000, or; if it occurs within (and including) 60 minutes of another transaction with the same name in a different city. you are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction. return a list of transactions that are possibly invalid. you may return the answer in any order.
previous permutation with one swap given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. if it cannot be done, then return the same array. note that a swap exchanges the positions of two numbers arr[i] and arr[j]
apply discount every n orders there is a supermarket that is frequented by many customers. the products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an id of products[i] and a price of prices[i]. when a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an id of product[j], and amount[j] is how much of the product they bought. their subtotal is calculated as the sum of each amount[j] * (price of the jth product). the supermarket decided to have a sale. every nth customer paying for their groceries will be given a percentage discount. the discount amount is given by discount, where they will be given discount percent off their subtotal. more formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100). implement the cashier class: cashier(int n, int discount, int[] products, int[] prices) initializes the object with n, the discount, and the products and their prices. double getbill(int[] product, int[] amount) returns the final total of the bill with the discount applied (if any). answers within 10-5 of the actual value will be accepted.
house robber ii you are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed. all houses at this place are arranged in a circle. that means the first house is the neighbor of the last one. meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
find original array from doubled array an integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array. given an array changed, return original if changed is a doubled array. if changed is not a doubled array, return an empty array. the elements in original may be returned in any order.
reduce array size to the half you are given an integer array arr. you can choose a set of integers and remove all the occurrences of these integers in the array. return the minimum size of the set so that at least half of the integers of the array are removed.
binary tree preorder traversal given the root of a binary tree, return the preorder traversal of its nodes' values.
maximum total beauty of the gardens alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens. you are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. flowers that are already planted cannot be removed. you are then given another integer newflowers, which is the maximum number of flowers that alice can additionally plant. you are also given the integers target, full, and partial. a garden is considered complete if it has at least target flowers. the total beauty of the gardens is then determined as the sum of the following: the number of complete gardens multiplied by full. the minimum number of flowers in any of the incomplete gardens multiplied by partial. if there are no incomplete gardens, then this value will be 0. return the maximum total beauty that alice can obtain after planting at most newflowers flowers.
is subsequence given two strings s and t, return true if s is a subsequence of t, or false otherwise. a subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
partition array for maximum sum given an integer array arr, partition the array into (contiguous) subarrays of length at most k. after partitioning, each subarray has their values changed to become the maximum value of that subarray. return the largest sum of the given array after partitioning. test cases are generated so that the answer fits in a 32-bit integer.
longest consecutive sequence given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. you must write an algorithm that runs in o(n) time.
complex number multiplication a complex number can be represented as a string on the form "real+imaginaryi" where: real is the real part and is an integer in the range [-100, 100]. imaginary is the imaginary part and is an integer in the range [-100, 100]. i2 == -1. given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.
check if an original string exists given two encoded strings an original string, consisting of lowercase english letters, can be encoded by the following steps: arbitrarily split it into a sequence of some number of non-empty substrings. arbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string). concatenate the sequence as the encoded string. for example, one way to encode an original string "abcdefghijklmnop" might be: split it as a sequence: ["ab", "cdefghijklmn", "o", "p"]. choose the second and third elements to be replaced by their lengths, respectively. the sequence becomes ["ab", "12", "1", "p"]. concatenate the elements of the sequence to get the encoded string: "ab121p". given two encoded strings s1 and s2, consisting of lowercase english letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. otherwise, return false. note: the test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.
steps to make array non-decreasing you are given a 0-indexed integer array nums. in one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length. return the number of steps performed until nums becomes a non-decreasing array.
image overlap you are given two images, img1 and img2, represented as binary, square matrices of size n x n. a binary matrix has only 0s and 1s as values. we translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. we then place it on top of the other image. we can then calculate the overlap by counting the number of positions that have a 1 in both images. note also that a translation does not include any kind of rotation. any 1 bits that are translated outside of the matrix borders are erased. return the largest possible overlap.
the number of beautiful subsets you are given an array nums of positive integers and a positive integer k. a subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k. return the number of non-empty beautiful subsets of the array nums. a subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. two subsets are different if and only if the chosen indices to delete are different.
dota2 senate in the world of dota2, there are two parties: the radiant and the dire. the dota2 senate consists of senators coming from two parties. now the senate wants to decide on a change in the dota2 game. the voting for this change is a round-based procedure. in each round, each senator can exercise one of the two rights: ban one senator's right: a senator can make another senator lose all his rights in this and all the following rounds. announce the victory: if this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game. given a string senate representing each senator's party belonging. the character 'r' and 'd' represent the radiant party and the dire party. then if there are n senators, the size of the given string will be n. the round-based procedure starts from the first senator to the last senator in the given order. this procedure will last until the end of voting. all the senators who have lost their rights will be skipped during the procedure. suppose every senator is smart enough and will play the best strategy for his own party. predict which party will finally announce the victory and change the dota2 game. the output should be "radiant" or "dire".
stone game viii alice and bob take turns playing a game, with alice starting first. there are n stones arranged in a row. on each player's turn, while the number of stones is more than one, they will do the following: choose an integer x > 1, and remove the leftmost x stones from the row. add the sum of the removed stones' values to the player's score. place a new stone, whose value is equal to that sum, on the left side of the row. the game stops when only one stone is left in the row. the score difference between alice and bob is (alice's score - bob's score). alice's goal is to maximize the score difference, and bob's goal is the minimize the score difference. given an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between alice and bob if they both play optimally.
student attendance record i you are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters: 'a': absent. 'l': late. 'p': present. the student is eligible for an attendance award if they meet both of the following criteria: the student was absent ('a') for strictly fewer than 2 days total. the student was never late ('l') for 3 or more consecutive days. return true if the student is eligible for an attendance award, or false otherwise.
distance between bus stops a bus has n stops numbered from 0 to n - 1 that form a circle. we know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n. the bus goes along both directions i.e. clockwise and counterclockwise. return the shortest distance between the given start and destination stops.
minimum recolors to get k consecutive black blocks you are given a 0-indexed string blocks of length n, where blocks[i] is either 'w' or 'b', representing the color of the ith block. the characters 'w' and 'b' denote the colors white and black, respectively. you are also given an integer k, which is the desired number of consecutive black blocks. in one operation, you can recolor a white block such that it becomes a black block. return the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.
design linked list design your implementation of the linked list. you can choose to use a singly or doubly linked list. a node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. if you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. assume all nodes in the linked list are 0-indexed. implement the mylinkedlist class: mylinkedlist() initializes the mylinkedlist object. int get(int index) get the value of the indexth node in the linked list. if the index is invalid, return -1. void addathead(int val) add a node of value val before the first element of the linked list. after the insertion, the new node will be the first node of the linked list. void addattail(int val) append a node of value val as the last element of the linked list. void addatindex(int index, int val) add a node of value val before the indexth node in the linked list. if index equals the length of the linked list, the node will be appended to the end of the linked list. if index is greater than the length, the node will not be inserted. void deleteatindex(int index) delete the indexth node in the linked list, if the index is valid.
short encoding of words a valid encoding of an array of words is any reference string s and array of indices indices such that: words.length == indices.length the reference string s ends with the '#' character. for each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i]. given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.
customers who never order sql schema table: customers +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id and name of a customer. table: orders +-------------+------+ | column name | type | +-------------+------+ | id | int | | customerid | int | +-------------+------+ id is the primary key column for this table. customerid is a foreign key of the id from the customers table. each row of this table indicates the id of an order and the id of the customer who ordered it. write an sql query to report all customers who never order anything. return the result table in any order. the query result format is in the following example.
maximum candies allocated to k children you are given a 0-indexed integer array candies. each element in the array denotes a pile of candies of size candies[i]. you can divide each pile into any number of sub piles, but you cannot merge two piles together. you are also given an integer k. you should allocate piles of candies to k children such that each child gets the same number of candies. each child can take at most one pile of candies and some piles of candies may go unused. return the maximum number of candies each child can get.
design front middle back queue design a queue that supports push and pop operations in the front, middle, and back. implement the frontmiddleback class: frontmiddleback() initializes the queue. void pushfront(int val) adds val to the front of the queue. void pushmiddle(int val) adds val to the middle of the queue. void pushback(int val) adds val to the back of the queue. int popfront() removes the front element of the queue and returns it. if the queue is empty, return -1. int popmiddle() removes the middle element of the queue and returns it. if the queue is empty, return -1. int popback() removes the back element of the queue and returns it. if the queue is empty, return -1. notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. for example: pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5]. popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].
least operators to express number given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). for example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3. when writing such an expression, we adhere to the following conventions: the division operator (/) returns rational numbers. there are no parentheses placed anywhere. we use the usual order of operations: multiplication and division happen before addition and subtraction. it is not allowed to use the unary negation operator (-). for example, "x - x" is a valid expression as it only uses subtraction, but "-x + x" is not because it uses negation. we would like to write an expression with the least number of operators such that the expression equals the given target. return the least number of operators used.
queries on number of points inside a circle you are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2d plane. multiple points can have the same coordinates. you are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj. for each query queries[j], compute the number of points inside the jth circle. points on the border of the circle are considered inside. return an array answer, where answer[j] is the answer to the jth query.
count the number of ideal arrays you are given two integers n and maxvalue, which are used to describe an ideal array. a 0-indexed integer array arr of length n is considered ideal if the following conditions hold: every arr[i] is a value from 1 to maxvalue, for 0 <= i < n. every arr[i] is divisible by arr[i - 1], for 0 < i < n. return the number of distinct ideal arrays of length n. since the answer may be very large, return it modulo 109 + 7.
maximum number of occurrences of a substring given a string s, return the maximum number of occurrences of any substring under the following rules: the number of unique characters in the substring must be less than or equal to maxletters. the substring size must be between minsize and maxsize inclusive.
sort integers by the number of 1 bits you are given an integer array arr. sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order. return the array after sorting it.
merge two 2d arrays by summing values you are given two 2d integer arrays nums1 and nums2. nums1[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali. nums2[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali. each array contains unique ids and is sorted in ascending order by id. merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions: only ids that appear in at least one of the two arrays should be included in the resulting array. each id should be included only once and its value should be the sum of the values of this id in the two arrays. if the id does not exist in one of the two arrays then its value in that array is considered to be 0. return the resulting array. the returned array must be sorted in ascending order by id.
pancake sorting given an array of integers arr, sort the array by performing a series of pancake flips. in one pancake flip we do the following steps: choose an integer k where 1 <= k <= arr.length. reverse the sub-array arr[0...k-1] (0-indexed). for example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3. return an array of the k-values corresponding to a sequence of pancake flips that sort arr. any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.
greatest sum divisible by three given an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.
number of ways where square of number is equal to product of two numbers given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules: type 1: triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length. type 2: triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.
invalid tweets sql schema table: tweets +----------------+---------+ | column name | type | +----------------+---------+ | tweet_id | int | | content | varchar | +----------------+---------+ tweet_id is the primary key for this table. this table contains all the tweets in a social media app. write an sql query to find the ids of the invalid tweets. the tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15. return the result table in any order. the query result format is in the following example.
remove trailing zeros from a string given a positive integer num represented as a string, return the integer num without trailing zeros as a string.
coin change ii you are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. return the number of combinations that make up that amount. if that amount of money cannot be made up by any combination of the coins, return 0. you may assume that you have an infinite number of each kind of coin. the answer is guaranteed to fit into a signed 32-bit integer.
booking concert tickets in groups a concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. you need to design a ticketing system that can allocate seats in the following cases: if a group of k spectators can sit together in a row. if every member of a group of k spectators can get a seat. they may or may not sit together. note that the spectators are very picky. hence: they will book seats only if each member of their group can get a seat with row number less than or equal to maxrow. maxrow can vary from group to group. in case there are multiple rows to choose from, the row with the smallest number is chosen. if there are multiple seats to choose in the same row, the seat with the smallest number is chosen. implement the bookmyshow class: bookmyshow(int n, int m) initializes the object with n as number of rows and m as number of seats per row. int[] gather(int k, int maxrow) returns an array of length 2 denoting the row and seat number (respectively) of the first seat being allocated to the k members of the group, who must sit together. in other words, it returns the smallest possible r and c such that all [c, c + k - 1] seats are valid and empty in row r, and r <= maxrow. returns [] in case it is not possible to allocate seats to the group. boolean scatter(int k, int maxrow) returns true if all k members of the group can be allocated seats in rows 0 to maxrow, who may or may not sit together. if the seats can be allocated, it allocates k seats to the group with the smallest row numbers, and the smallest possible seat numbers in each row. otherwise, returns false.
richest customer wealth you are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jth bank. return the wealth that the richest customer has. a customer's wealth is the amount of money they have in all their bank accounts. the richest customer is the customer that has the maximum wealth.
find all numbers disappeared in an array given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.
binary tree inorder traversal given the root of a binary tree, return the inorder traversal of its nodes' values.
reformat department table sql schema table: department +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | revenue | int | | month | varchar | +-------------+---------+ (id, month) is the primary key of this table. the table has information about the revenue of each department per month. the month has values in ["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]. write an sql query to reformat the table such that there is a department id column and a revenue column for each month. return the result table in any order. the query result format is in the following example.
maximum profit of operating a centennial wheel you are the operator of a centennial wheel that has four gondolas, and each gondola has room for up to four people. you have the ability to rotate the gondolas counterclockwise, which costs you runningcost dollars. you are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). this means you must rotate the wheel i times before the customers[i] customers arrive. you cannot make customers wait if there is room in the gondola. each customer pays boardingcost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again. you can stop the wheel at any time, including before serving all customers. if you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation. return the minimum number of rotations you need to perform to maximize your profit. if there is no scenario where the profit is positive, return -1.
find a peak element ii a peak element in a 2d grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom. given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j]. you may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell. you must write an algorithm that runs in o(m log(n)) or o(n log(m)) time.
random pick index given an integer array nums with possible duplicates, randomly output the index of a given target number. you can assume that the given target number must exist in the array. implement the solution class: solution(int[] nums) initializes the object with the array nums. int pick(int target) picks a random index i from nums where nums[i] == target. if there are multiple valid i's, then each index should have an equal probability of returning.
frequency tracker design a data structure that keeps track of the values in it and answers some queries regarding their frequencies. implement the frequencytracker class. frequencytracker(): initializes the frequencytracker object with an empty array initially. void add(int number): adds number to the data structure. void deleteone(int number): deletes one occurrence of number from the data structure. the data structure may not contain number, and in this case nothing is deleted. bool hasfrequency(int frequency): returns true if there is a number in the data structure that occurs frequency number of times, otherwise, it returns false.
subdomain visit count a website domain "discuss.leetcode.com" consists of various subdomains. at the top level, we have "com", at the next level, we have "leetcode.com" and at the lowest level, "discuss.leetcode.com". when we visit a domain like "discuss.leetcode.com", we will also visit the parent domains "leetcode.com" and "com" implicitly. a count-paired domain is a domain that has one of the two formats "rep d1.d2.d3" or "rep d1.d2" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself. for example, "9001 discuss.leetcode.com" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times. given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. you may return the answer in any order.
string without aaa or bbb given two integers a and b, return any string s such that: s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters, the substring 'aaa' does not occur in s, and the substring 'bbb' does not occur in s.
minimum moves to equal array elements given an integer array nums of size n, return the minimum number of moves required to make all array elements equal. in one move, you can increment n - 1 elements of the array by 1.
sudoku solver write a program to solve a sudoku puzzle by filling the empty cells. a sudoku solution must satisfy all of the following rules: each of the digits 1-9 must occur exactly once in each row. each of the digits 1-9 must occur exactly once in each column. each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. the '.' character indicates empty cells.
closest nodes queries in a binary search tree you are given the root of a binary search tree and an array queries of size n consisting of positive integers. find a 2d array answer of size n where answer[i] = [mini, maxi]: mini is the largest value in the tree that is smaller than or equal to queries[i]. if a such value does not exist, add -1 instead. maxi is the smallest value in the tree that is greater than or equal to queries[i]. if a such value does not exist, add -1 instead. return the array answer.
minimum operations to make a subsequence you are given an array target that consists of distinct integers and another integer array arr that can have duplicates. in one operation, you can insert any integer at any position in arr. for example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. note that you can insert the integer at the very beginning or end of the array. return the minimum number of operations needed to make target a subsequence of arr. a subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.
parse lisp expression you are given a string expression representing a lisp-like expression to return the integer value of. the syntax for these expressions is given as follows. an expression is either an integer, let expression, add expression, mult expression, or an assigned variable. expressions always evaluate to a single integer. (an integer could be positive or negative.) a let expression takes the form "(let v1 e1 v2 e2 ... vn en expr)", where let is always the string "let", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr. an add expression takes the form "(add e1 e2)" where add is always the string "add", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2. a mult expression takes the form "(mult e1 e2)" where mult is always the string "mult", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2. for this question, we will use a smaller subset of variable names. a variable starts with a lowercase letter, then zero or more lowercase letters or digits. additionally, for your convenience, the names "add", "let", and "mult" are protected and will never be used as variable names. finally, there is the concept of scope. when an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. it is guaranteed that every expression is legal. please see the examples for more details on the scope.
find the difference of two arrays given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where: answer[0] is a list of all distinct integers in nums1 which are not present in nums2. answer[1] is a list of all distinct integers in nums2 which are not present in nums1. note that the integers in the lists may be returned in any order.
n-repeated element in size 2n array you are given an integer array nums with the following properties: nums.length == 2 * n. nums contains n + 1 unique elements. exactly one element of nums is repeated n times. return the element that is repeated n times.
number of steps to reduce a number in binary representation to one given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules: if the current number is even, you have to divide it by 2. if the current number is odd, you have to add 1 to it. it is guaranteed that you can always reach one for all test cases.
can convert string in k moves given two strings s and t, your goal is to convert s into t in k moves or less. during the ith (1 <= i <= k) move you can: choose any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times. do nothing. shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). shifting a character by i means applying the shift operations i times. remember that any index j can be picked at most once. return true if it's possible to convert s into t in no more than k moves, otherwise return false.
buddy strings given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false. swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j]. for example, swapping at indices 0 and 2 in "abcd" results in "cbad".
minimum difference between highest and lowest of k scores you are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. you are also given an integer k. pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized. return the minimum possible difference.
car fleet ii there are n cars traveling at different speeds in the same direction along a one-lane road. you are given an array cars of length n, where cars[i] = [positioni, speedi] represents: positioni is the distance between the ith car and the beginning of the road in meters. it is guaranteed that positioni < positioni+1. speedi is the initial speed of the ith car in meters per second. for simplicity, cars can be considered as points moving along the number line. two cars collide when they occupy the same position. once a car collides with another car, they unite and form a single car fleet. the cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet. return an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. answers within 10-5 of the actual answers are accepted.
heaters winter is coming! during the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. every house can be warmed, as long as the house is within the heater's warm radius range. given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses. notice that all the heaters follow your radius standard, and the warm radius will the same.
n-queens ii the n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. given an integer n, return the number of distinct solutions to the n-queens puzzle.
number of unique subjects taught by each teacher sql schema table: teacher +-------------+------+ | column name | type | +-------------+------+ | teacher_id | int | | subject_id | int | | dept_id | int | +-------------+------+ (subject_id, dept_id) is the primary key for this table. each row in this table indicates that the teacher with teacher_id teaches the subject subject_id in the department dept_id. write an sql query to report the number of unique subjects each teacher teaches in the university. return the result table in any order. the query result format is shown in the following example.
sum of absolute differences in a sorted array you are given an integer array nums sorted in non-decreasing order. build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array. in other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).
multiply strings given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. note: you must not use any built-in biginteger library or convert the inputs to integer directly.
find right interval you are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique. the right interval for an interval i is an interval j such that startj >= endi and startj is minimized. note that i may equal j. return an array of right interval indices for each interval i. if no right interval exists for interval i, then put -1 at index i.
maximize greatness of an array you are given a 0-indexed integer array nums. you are allowed to permute nums into a new array perm of your choosing. we define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i]. return the maximum possible greatness you can achieve after permuting nums.
check if all 1's are at least length k places away given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.
tree of coprimes there is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. each node has a value associated with it, and the root of the tree is node 0. to represent this tree, you are given an integer array nums and a 2d array edges. each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree. two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y. an ancestor of a node i is any other node on the shortest path from node i to the root. a node is not considered an ancestor of itself. return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.
first letter to appear twice given a string s consisting of lowercase english letters, return the first letter to appear twice. note: a letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b. s will contain at least one letter that appears twice.
number of times binary string is prefix-aligned you have a 1-indexed binary string of length n where all the bits are 0 initially. we will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. you are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step. a binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros. return the number of times the binary string is prefix-aligned during the flipping process.
number of laser beams in a bank anti-theft security devices are activated inside a bank. you are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2d matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device. there is one laser beam between any two security devices if both conditions are met: the two devices are located on two different rows: r1 and r2, where r1 < r2. for each row i where r1 < i < r2, there are no security devices in the ith row. laser beams are independent, i.e., one beam does not interfere nor join with another. return the total number of laser beams in the bank.
check if string is a prefix of array given a string s and an array of strings words, determine whether s is a prefix string of words. a string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length. return true if s is a prefix string of words, or false otherwise.
lemonade change at a lemonade stand, each lemonade costs $5. customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. you must provide the correct change to each customer so that the net transaction is that the customer pays $5. note that you do not have any change in hand at first. given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.
maximum product after k increments you are given an array of non-negative integers nums and an integer k. in one operation, you may choose any element from nums and increment it by 1. return the maximum product of nums after at most k operations. since the answer may be very large, return it modulo 109 + 7. note that you should maximize the product before taking the modulo.
largest number after mutating substring you are given a string num, which represents a large integer. you are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. more formally, digit d maps to digit change[d]. you may choose to mutate a single substring of num. to mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]). return a string representing the largest possible integer after mutating (or choosing not to) a single substring of num. a substring is a contiguous sequence of characters within the string.
left and right sum differences given a 0-indexed integer array nums, find a 0-indexed integer array answer where: answer.length == nums.length. answer[i] = |leftsum[i] - rightsum[i]|. where: leftsum[i] is the sum of elements to the left of the index i in the array nums. if there is no such element, leftsum[i] = 0. rightsum[i] is the sum of elements to the right of the index i in the array nums. if there is no such element, rightsum[i] = 0. return the array answer.
knight probability in chessboard on an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. the rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1). a chess knight has eight possible moves it can make, as illustrated below. each move is two cells in a cardinal direction, then one cell in an orthogonal direction. each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there. the knight continues moving until it has made exactly k moves or has moved off the chessboard. return the probability that the knight remains on the board after it has stopped moving.
design add and search words data structure design a data structure that supports adding new words and finding if a string matches any previously added string. implement the worddictionary class: worddictionary() initializes the object. void addword(word) adds word to the data structure, it can be matched later. bool search(word) returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter. example: input ["worddictionary","addword","addword","addword","search","search","search","search"] [[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]] output [null,null,null,null,false,true,true,true] explanation worddictionary worddictionary = new worddictionary(); worddictionary.addword("bad"); worddictionary.addword("dad"); worddictionary.addword("mad"); worddictionary.search("pad"); // return false worddictionary.search("bad"); // return true worddictionary.search(".ad"); // return true worddictionary.search("b.."); // return true constraints: 1 <= word.length <= 25 word in addword consists of lowercase english letters. word in search consist of '.' or lowercase english letters. there will be at most 2 dots in word for search queries. at most 104 calls will be made to addword and search.
maximum and sum of array you are given an integer array nums of length n and an integer numslots such that 2 * numslots >= n. there are numslots slots numbered from 1 to numslots. you have to place all n integers into the slots such that each slot contains at most two numbers. the and sum of a given placement is the sum of the bitwise and of every number with its respective slot number. for example, the and sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 and 1) + (3 and 1) + (4 and 2) + (6 and 2) = 1 + 1 + 0 + 2 = 4. return the maximum possible and sum of nums given numslots slots.
smallest even multiple given a positive integer n, return the smallest positive integer that is a multiple of both 2 and n.
longest happy prefix a string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself). given a string s, return the longest happy prefix of s. return an empty string "" if no such prefix exists.
soup servings there are two types of soup: type a and type b. initially, we have n ml of each type of soup. there are four kinds of operations: serve 100 ml of soup a and 0 ml of soup b, serve 75 ml of soup a and 25 ml of soup b, serve 50 ml of soup a and 50 ml of soup b, and serve 25 ml of soup a and 75 ml of soup b. when we serve some soup, we give it to someone, and we no longer have it. each turn, we will choose from the four operations with an equal probability 0.25. if the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. we stop once we no longer have some quantity of both types of soup. note that we do not have an operation where all 100 ml's of soup b are used first. return the probability that soup a will be empty first, plus half the probability that a and b become empty at the same time. answers within 10-5 of the actual answer will be accepted.
number of valid clock times you are given a string of length 5 called time, representing the current time on a digital clock in the format "hh:mm". the earliest possible time is "00:00" and the latest possible time is "23:59". in the string time, the digits represented by the ? symbol are unknown, and must be replaced with a digit from 0 to 9. return an integer answer, the number of valid clock times that can be created by replacing every ? with a digit from 0 to 9.
minimum operations to convert number you are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. there is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. you can perform the following operation repeatedly on the number x: if 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following: x + nums[i] x - nums[i] x ^ nums[i] (bitwise-xor) note that you can use each nums[i] any number of times in any order. operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward. return the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.
chunk array given an array arr and a chunk size size, return a chunked array. a chunked array contains the original elements in arr, but consists of subarrays each of length size. the length of the last subarray may be less than size if arr.length is not evenly divisible by size. you may assume the array is the output of json.parse. in other words, it is valid json. please solve it without using lodash's _.chunk function.
bulls and cows you are playing the bulls and cows game with your friend. you write down a secret number and ask your friend to guess what the number is. when your friend makes a guess, you provide a hint with the following info: the number of "bulls", which are digits in the guess that are in the correct position. the number of "cows", which are digits in the guess that are in your secret number but are located in the wrong position. specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. given the secret number secret and your friend's guess guess, return the hint for your friend's guess. the hint should be formatted as "xayb", where x is the number of bulls and y is the number of cows. note that both secret and guess may contain duplicate digits.
reorder routes to make all paths lead to the city zero there are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). last year, the ministry of transport decided to orient the roads in one direction because they are too narrow. roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi. this year, there will be a big event in the capital (city 0), and many people want to travel to this city. your task consists of reorienting some roads such that each city can visit the city 0. return the minimum number of edges changed. it's guaranteed that each city can reach city 0 after reorder.
valid mountain array given an array of integers arr, return true if and only if it is a valid mountain array. recall that arr is a mountain array if and only if: arr.length >= 3 there exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
sort even and odd indices independently you are given a 0-indexed integer array nums. rearrange the values of nums according to the following rules: sort the values at odd indices of nums in non-increasing order. for example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. the values at odd indices 1 and 3 are sorted in non-increasing order. sort the values at even indices of nums in non-decreasing order. for example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. the values at even indices 0 and 2 are sorted in non-decreasing order. return the array formed after rearranging the values of nums.
word pattern given a pattern and a string s, find if s follows the same pattern. here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.
split with minimum sum given a positive integer num, split it into two non-negative integers num1 and num2 such that: the concatenation of num1 and num2 is a permutation of num. in other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num. num1 and num2 can contain leading zeros. return the minimum possible sum of num1 and num2. notes: it is guaranteed that num does not contain any leading zeros. the order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.
increasing decreasing string you are given a string s. reorder the string using the following algorithm: pick the smallest character from s and append it to the result. pick the smallest character from s which is greater than the last appended character to the result and append it. repeat step 2 until you cannot pick more characters. pick the largest character from s and append it to the result. pick the largest character from s which is smaller than the last appended character to the result and append it. repeat step 5 until you cannot pick more characters. repeat the steps from 1 to 6 until you pick all characters from s. in each step, if the smallest or the largest character appears more than once you can choose any occurrence and append it to the result. return the result string after sorting s with this algorithm.
graph connectivity with threshold we have n cities labeled from 1 to n. two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. more formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true: x % z == 0, y % z == 0, and z > threshold. given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them). return an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.
loud and rich there is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness. you are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. all the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time). return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.
erect the fence you are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden. fence the entire garden using the minimum length of rope, as it is expensive. the garden is well-fenced only if all the trees are enclosed. return the coordinates of trees that are exactly located on the fence perimeter. you may return the answer in any order.
maximum value of a string in an array the value of an alphanumeric string can be defined as: the numeric representation of the string in base 10, if it comprises of digits only. the length of the string, otherwise. given an array strs of alphanumeric strings, return the maximum value of any string in strs.
sales person sql schema table: salesperson +-----------------+---------+ | column name | type | +-----------------+---------+ | sales_id | int | | name | varchar | | salary | int | | commission_rate | int | | hire_date | date | +-----------------+---------+ sales_id is the primary key column for this table. each row of this table indicates the name and the id of a salesperson alongside their salary, commission rate, and hire date. table: company +-------------+---------+ | column name | type | +-------------+---------+ | com_id | int | | name | varchar | | city | varchar | +-------------+---------+ com_id is the primary key column for this table. each row of this table indicates the name and the id of a company and the city in which the company is located. table: orders +-------------+------+ | column name | type | +-------------+------+ | order_id | int | | order_date | date | | com_id | int | | sales_id | int | | amount | int | +-------------+------+ order_id is the primary key column for this table. com_id is a foreign key to com_id from the company table. sales_id is a foreign key to sales_id from the salesperson table. each row of this table contains information about one order. this includes the id of the company, the id of the salesperson, the date of the order, and the amount paid. write an sql query to report the names of all the salespersons who did not have any orders related to the company with the name "red". return the result table in any order. the query result format is in the following example.
the dining philosophers five silent philosophers sit at a round table with bowls of spaghetti. forks are placed between each pair of adjacent philosophers. each philosopher must alternately think and eat. however, a philosopher can only eat spaghetti when they have both left and right forks. each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. after an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. a philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks. eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed. design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think. the problem statement and the image above are taken from wikipedia.org the philosophers' ids are numbered from 0 to 4 in a clockwise order. implement the function void wantstoeat(philosopher, pickleftfork, pickrightfork, eat, putleftfork, putrightfork) where: philosopher is the id of the philosopher who wants to eat. pickleftfork and pickrightfork are functions you can call to pick the corresponding forks of that philosopher. eat is a function you can call to let the philosopher eat once he has picked both forks. putleftfork and putrightfork are functions you can call to put down the corresponding forks of that philosopher. the philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number). five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. the function may be called for the same philosopher more than once, even before the last call ends.
intervals between identical elements you are given a 0-indexed array of n integers arr. the interval between two elements in arr is defined as the absolute difference between their indices. more formally, the interval between arr[i] and arr[j] is |i - j|. return an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i]. note: |x| is the absolute value of x.
minimize malware spread ii you are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1. some nodes initial are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner. suppose m(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. we will remove exactly one node from initial, completely removing it and any connections from this node to any other node. return the node that, if removed, would minimize m(initial). if multiple nodes could be removed to minimize m(initial), return such a node with the smallest index.
number of different integers in a string you are given a string word that consists of digits and lowercase english letters. you will replace every non-digit character with a space. for example, "a123bc34d8ef34" will become " 123 34 8 34". notice that you are left with some integers that are separated by at least one space: "123", "34", "8", and "34". return the number of different integers after performing the replacement operations on word. two integers are considered different if their decimal representations without any leading zeros are different.
minimum height trees a tree is an undirected graph in which any two vertices are connected by exactly one path. in other words, any connected graph without simple cycles is a tree. given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. when you select a node x as the root, the result tree has height h. among all possible rooted trees, those with minimum height (i.e. min(h)) are called minimum height trees (mhts). return a list of all mhts' root labels. you can return the answer in any order. the height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
permutation in string given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. in other words, return true if one of s1's permutations is the substring of s2.
minimize the difference between target and chosen elements you are given an m x n integer matrix mat and an integer target. choose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized. return the minimum absolute difference. the absolute difference between two numbers a and b is the absolute value of a - b.
minimum number of swaps to make the binary string alternating given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible. the string is called alternating if no two adjacent characters are equal. for example, the strings "010" and "1010" are alternating, while the string "0100" is not. any two characters may be swapped, even if they are not adjacent.
function composition given an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions. the function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))). the function composition of an empty list of functions is the identity function f(x) = x. you may assume each function in the array accepts one integer as input and returns one integer as output.
sales analysis iii sql schema table: product +--------------+---------+ | column name | type | +--------------+---------+ | product_id | int | | product_name | varchar | | unit_price | int | +--------------+---------+ product_id is the primary key of this table. each row of this table indicates the name and the price of each product. table: sales +-------------+---------+ | column name | type | +-------------+---------+ | seller_id | int | | product_id | int | | buyer_id | int | | sale_date | date | | quantity | int | | price | int | +-------------+---------+ this table has no primary key, it can have repeated rows. product_id is a foreign key to the product table. each row of this table contains some information about one sale. write an sql query that reports the products that were only sold in the first quarter of 2019. that is, between 2019-01-01 and 2019-03-31 inclusive. return the result table in any order. the query result format is in the following example.
maximum number of removable characters you are given two strings s and p where p is a subsequence of s. you are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed). you want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. more formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence. return the maximum k you can choose such that p is still a subsequence of s after the removals. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
increasing triplet subsequence given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. if no such indices exists, return false.
customer who visited but did not make any transactions sql schema table: visits +-------------+---------+ | column name | type | +-------------+---------+ | visit_id | int | | customer_id | int | +-------------+---------+ visit_id is the primary key for this table. this table contains information about the customers who visited the mall. table: transactions +----------------+---------+ | column name | type | +----------------+---------+ | transaction_id | int | | visit_id | int | | amount | int | +----------------+---------+ transaction_id is the primary key for this table. this table contains information about the transactions made during the visit_id. write a sql query to find the ids of the users who visited without making any transactions and the number of times they made these types of visits. return the result table sorted in any order. the query result format is in the following example.
convert a number to hexadecimal given an integer num, return a string representing its hexadecimal representation. for negative integers, two’s complement method is used. all the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself. note: you are not allowed to use any built-in library method to directly solve this problem.
find the losers of the circular game there are n friends that are playing a game. the friends are sitting in a circle and are numbered from 1 to n in clockwise order. more formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend. the rules of the game are as follows: 1st friend receives the ball. after that, 1st friend passes it to the friend who is k steps away from them in the clockwise direction. after that, the friend who receives the ball should pass it to the friend who is 2 * k steps away from them in the clockwise direction. after that, the friend who receives the ball should pass it to the friend who is 3 * k steps away from them in the clockwise direction, and so on and so forth. in other words, on the ith turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction. the game is finished when some friend receives the ball for the second time. the losers of the game are friends who did not receive the ball in the entire game. given the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.
implement magic dictionary design a data structure that is initialized with a list of different words. provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure. implement the magicdictionary class: magicdictionary() initializes the object. void builddict(string[] dictionary) sets the data structure with an array of distinct strings dictionary. bool search(string searchword) returns true if you can change exactly one character in searchword to match any string in the data structure, otherwise returns false.
maximum candies you can get from boxes you have n boxes labeled from 0 to n - 1. you are given four arrays: status, candies, keys, and containedboxes where: status[i] is 1 if the ith box is open and 0 if the ith box is closed, candies[i] is the number of candies in the ith box, keys[i] is a list of the labels of the boxes you can open after opening the ith box. containedboxes[i] is a list of the boxes you found inside the ith box. you are given an integer array initialboxes that contains the labels of the boxes you initially have. you can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it. return the maximum number of candies you can get following the rules above.
palindrome partitioning iv given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. otherwise, return false. a string is said to be palindrome if it the same string when reversed.
leaf-similar trees consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. for example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8). two binary trees are considered leaf-similar if their leaf value sequence is the same. return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.
reverse prefix of word given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). if the character ch does not exist in word, do nothing. for example, if word = "abcdefd" and ch = "d", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). the resulting string will be "dcbaefd". return the resulting string.
minimum window substring given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. if there is no such substring, return the empty string "". the testcases will be generated such that the answer is unique.
lfu cache design and implement a data structure for a least frequently used (lfu) cache. implement the lfucache class: lfucache(int capacity) initializes the object with the capacity of the data structure. int get(int key) gets the value of the key if the key exists in the cache. otherwise, returns -1. void put(int key, int value) update the value of the key if present, or inserts the key if not already present. when the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. for this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated. to determine the least frequently used key, a use counter is maintained for each key in the cache. the key with the smallest use counter is the least frequently used key. when a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). the use counter for a key in the cache is incremented either a get or put operation is called on it. the functions get and put must each run in o(1) average time complexity.
array prototype last write code that enhances all arrays such that you can call the array.last() method on any array and it will return the last element. if there are no elements in the array, it should return -1.
solving questions with brainpower you are given a 0-indexed 2d integer array questions where questions[i] = [pointsi, brainpoweri]. the array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. if you skip question i, you get to make the decision on the next question. for example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]: if question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2. if instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3. return the maximum points you can earn for the exam.
find the town judge in a town, there are n people labeled from 1 to n. there is a rumor that one of these people is secretly the town judge. if the town judge exists, then: the town judge trusts nobody. everybody (except for the town judge) trusts the town judge. there is exactly one person that satisfies properties 1 and 2. you are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. if a trust relationship does not exist in trust array, then such a trust relationship does not exist. return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.
find k pairs with smallest sums you are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k. define a pair (u, v) which consists of one element from the first array and one element from the second array. return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.
find winner on a tic tac toe game tic-tac-toe is played by two players a and b on a 3 x 3 grid. the rules of tic-tac-toe are: players take turns placing characters into empty squares ' '. the first player a always places 'x' characters, while the second player b always places 'o' characters. 'x' and 'o' characters are always placed into empty squares, never on filled ones. the game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. the game also ends if all squares are non-empty. no more moves can be played if the game is over. given a 2d integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (a or b). in case the game ends in a draw return "draw". if there are still movements to play return "pending". you can assume that moves is valid (i.e., it follows the rules of tic-tac-toe), the grid is initially empty, and a will play first.
prime palindrome given an integer n, return the smallest prime palindrome greater than or equal to n. an integer is prime if it has exactly two divisors: 1 and itself. note that 1 is not a prime number. for example, 2, 3, 5, 7, 11, and 13 are all primes. an integer is a palindrome if it reads the same from left to right as it does from right to left. for example, 101 and 12321 are palindromes. the test cases are generated so that the answer always exists and is in the range [2, 2 * 108].
maximal square given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.
paint house iii there is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again. a neighborhood is a maximal group of continuous houses that are painted with the same color. for example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}]. given an array houses, an m x n matrix cost and an integer target where: houses[i]: is the color of the house i, and 0 if the house is not painted yet. cost[i][j]: is the cost of paint the house i with the color j + 1. return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. if it is not possible, return -1.
find users with valid e-mails sql schema table: users +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | name | varchar | | mail | varchar | +---------------+---------+ user_id is the primary key for this table. this table contains information of the users signed up in a website. some e-mails are invalid. write an sql query to find the users who have valid emails. a valid e-mail has a prefix name and a domain where: the prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. the prefix name must start with a letter. the domain is '@leetcode.com'. return the result table in any order. the query result format is in the following example.
task scheduler given a characters array tasks, representing the tasks a cpu needs to do, where each letter represents a different task. tasks could be done in any order. each task is done in one unit of time. for each unit of time, the cpu could complete either one task or just be idle. however, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks. return the least number of units of times that the cpu will take to finish all the given tasks.
longer contiguous segments of ones than zeros given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise. for example, in s = "110100010" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3. note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. the same applies if there is no 1's.
kth smallest element in a sorted matrix given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix. note that it is the kth smallest element in the sorted order, not the kth distinct element. you must find a solution with a memory complexity better than o(n2).
find xor sum of all pairs bitwise and the xor sum of a list is the bitwise xor of all its elements. if the list only contains one element, then its xor sum will be equal to this element. for example, the xor sum of [1,2,3,4] is equal to 1 xor 2 xor 3 xor 4 = 4, and the xor sum of [3] is equal to 3. you are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers. consider the list containing the result of arr1[i] and arr2[j] (bitwise and) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length. return the xor sum of the aforementioned list.
rising temperature sql schema table: weather +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | recorddate | date | | temperature | int | +---------------+---------+ id is the primary key for this table. this table contains information about the temperature on a certain day. write an sql query to find all dates' id with higher temperatures compared to its previous dates (yesterday). return the result table in any order. the query result format is in the following example.
container with most water you are given an integer array height of length n. there are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). find two lines that together with the x-axis form a container, such that the container contains the most water. return the maximum amount of water a container can store. notice that you may not slant the container.
check if there is a valid partition for the array you are given a 0-indexed integer array nums. you have to partition the array into one or more contiguous subarrays. we call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions: the subarray consists of exactly 2 equal elements. for example, the subarray [2,2] is good. the subarray consists of exactly 3 equal elements. for example, the subarray [4,4,4] is good. the subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. for example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not. return true if the array has at least one valid partition. otherwise, return false.
maximum repeating substring for a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. the word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. if word is not a substring of sequence, word's maximum k-repeating value is 0. given strings sequence and word, return the maximum k-repeating value of word in sequence.
linked list cycle ii given the head of a linked list, return the node where the cycle begins. if there is no cycle, return null. there is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). it is -1 if there is no cycle. note that pos is not passed as a parameter. do not modify the linked list.
single element in a sorted array you are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. return the single element that appears only once. your solution must run in o(log n) time and o(1) space.
user activity for the past 30 days i sql schema table: activity +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | session_id | int | | activity_date | date | | activity_type | enum | +---------------+---------+ there is no primary key for this table, it may have duplicate rows. the activity_type column is an enum of type ('open_session', 'end_session', 'scroll_down', 'send_message'). the table shows the user activities for a social media website. note that each session belongs to exactly one user. write an sql query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. a user was active on someday if they made at least one activity on that day. return the result table in any order. the query result format is in the following example.
most frequent subtree sum given the root of a binary tree, return the most frequent subtree sum. if there is a tie, return all the values with the highest frequency in any order. the subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).
path with maximum probability you are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succprob[i]. given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability. if there is no path from start to end, return 0. your answer will be accepted if it differs from the correct answer by at most 1e-5.
2 keys keyboard there is only one character 'a' on the screen of a notepad. you can perform one of two operations on this notepad for each step: copy all: you can copy all the characters present on the screen (a partial copy is not allowed). paste: you can paste the characters which are copied last time. given an integer n, return the minimum number of operations to get the character 'a' exactly n times on the screen.
largest 3-same-digit number in string you are given a string num representing a large integer. an integer is good if it meets the following conditions: it is a substring of num with length 3. it consists of only one unique digit. return the maximum good integer as a string or an empty string "" if no such integer exists. note: a substring is a contiguous sequence of characters within a string. there may be leading zeroes in num or a good integer.
domino and tromino tiling you have two types of tiles: a 2 x 1 domino shape and a tromino shape. you may rotate these shapes. given an integer n, return the number of ways to tile an 2 x n board. since the answer may be very large, return it modulo 109 + 7. in a tiling, every square must be covered by a tile. two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.
pizza with 3n slices there is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows: you will pick any pizza slice. your friend alice will pick the next slice in the anti-clockwise direction of your pick. your friend bob will pick the next slice in the clockwise direction of your pick. repeat until there are no more slices of pizzas. given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.
count pairs with xor in a range given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs. a nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] xor nums[j]) <= high.
count the number of fair pairs given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs. a pair (i, j) is fair if: 0 <= i < j < n, and lower <= nums[i] + nums[j] <= upper
longest valid parentheses given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring .
check if all the integers in a range are covered you are given a 2d integer array ranges and two integers left and right. each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi. return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. return false otherwise. an integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.
special positions in a binary matrix given an m x n binary matrix mat, return the number of special positions in mat. a position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).
binary subarrays with sum given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal. a subarray is a contiguous part of the array.
allow one function call given a function fn, return a new function that is identical to the original function except that it ensures fn is called at most once. the first time the returned function is called, it should return the same result as fn. every subsequent time it is called, it should return undefined.
flip columns for maximum number of equal rows you are given an m x n binary matrix matrix. you can choose any number of columns in the matrix and flip every cell in that column (i.e., change the value of the cell from 0 to 1 or vice versa). return the maximum number of rows that have all values equal after some number of flips.
maximum sum bst in binary tree given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a binary search tree (bst). assume a bst is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees.
number of common factors given two positive integers a and b, return the number of common factors of a and b. an integer x is a common factor of a and b if x divides both a and b.
reverse only letters given a string s, reverse the string according to the following rules: all the characters that are not english letters remain in the same position. all the english letters (lowercase or uppercase) should be reversed. return s after reversing it.
serialize and deserialize binary tree serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. design an algorithm to serialize and deserialize a binary tree. there is no restriction on how your serialization/deserialization algorithm should work. you just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. clarification: the input/output format is the same as how leetcode serializes a binary tree. you do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
house robber you are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
minimum operations to make array equal you have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n). in one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). the goal is to make all the elements of the array equal. it is guaranteed that all the elements of the array can be made equal using some operations. given an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.
implement rand10() using rand7() given the api rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. you can only call the api rand7(), and you shouldn't call any other api. please do not use a language's built-in random api. each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. note that this is not an argument passed to rand10().
reverse string ii given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string. if there are fewer than k characters left, reverse all of them. if there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.
design circular deque design your implementation of the circular double-ended queue (deque). implement the mycirculardeque class: mycirculardeque(int k) initializes the deque with a maximum size of k. boolean insertfront() adds an item at the front of deque. returns true if the operation is successful, or false otherwise. boolean insertlast() adds an item at the rear of deque. returns true if the operation is successful, or false otherwise. boolean deletefront() deletes an item from the front of deque. returns true if the operation is successful, or false otherwise. boolean deletelast() deletes an item from the rear of deque. returns true if the operation is successful, or false otherwise. int getfront() returns the front item from the deque. returns -1 if the deque is empty. int getrear() returns the last item from deque. returns -1 if the deque is empty. boolean isempty() returns true if the deque is empty, or false otherwise. boolean isfull() returns true if the deque is full, or false otherwise.
minimum increment to make array unique you are given an integer array nums. in one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1. return the minimum number of moves to make every value in nums unique. the test cases are generated so that the answer fits in a 32-bit integer.
capital gain/loss sql schema table: stocks +---------------+---------+ | column name | type | +---------------+---------+ | stock_name | varchar | | operation | enum | | operation_day | int | | price | int | +---------------+---------+ (stock_name, operation_day) is the primary key for this table. the operation column is an enum of type ('sell', 'buy') each row of this table indicates that the stock which has stock_name had an operation on the day operation_day with the price. it is guaranteed that each 'sell' operation for a stock has a corresponding 'buy' operation in a previous day. it is also guaranteed that each 'buy' operation for a stock has a corresponding 'sell' operation in an upcoming day. write an sql query to report the capital gain/loss for each stock. the capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times. return the result table in any order. the query result format is in the following example.
shortest unsorted continuous subarray given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order. return the shortest such subarray and output its length.
online stock span design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day. the span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day. for example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days. also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days. implement the stockspanner class: stockspanner() initializes the object of the class. int next(int price) returns the span of the stock's price given that today's price is price.
find all people with secret you are given an integer n indicating there are n people numbered from 0 to n - 1. you are also given a 0-indexed 2d integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. a person may attend multiple meetings at the same time. finally, you are given an integer firstperson. person 0 has a secret and initially shares the secret with a person firstperson at time 0. this secret is then shared every time a meeting takes place with a person that has the secret. more formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa. the secrets are shared instantaneously. that is, a person may receive the secret and share it with people in other meetings within the same time frame. return a list of all the people that have the secret after all the meetings have taken place. you may return the answer in any order.
last substring in lexicographical order given a string s, return the last substring of s in lexicographical order.
reveal cards in increasing order you are given an integer array deck. there is a deck of cards where every card has a unique integer. the integer on the ith card is deck[i]. you can order the deck in any order you want. initially, all the cards start face down (unrevealed) in one deck. you will do the following steps repeatedly until all cards are revealed: take the top card of the deck, reveal it, and take it out of the deck. if there are still cards in the deck then put the next top card of the deck at the bottom of the deck. if there are still unrevealed cards, go back to step 1. otherwise, stop. return an ordering of the deck that would reveal the cards in increasing order. note that the first entry in the answer is considered to be the top of the deck.
maximum score of spliced array you are given two 0-indexed integer arrays nums1 and nums2, both of length n. you can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right]. for example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15]. you may choose to apply the mentioned operation once or not do anything. the score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr. return the maximum possible score. a subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).
burst balloons you are given n balloons, indexed from 0 to n - 1. each balloon is painted with a number on it represented by an array nums. you are asked to burst all the balloons. if you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. if i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it. return the maximum coins you can collect by bursting the balloons wisely.
split array with same average you are given an integer array nums. you should move each element of nums into one of the two arrays a and b such that a and b are non-empty, and average(a) == average(b). return true if it is possible to achieve that and false otherwise. note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.
maximum strictly increasing cells in a matrix given a 1-indexed m x n integer matrix mat, you can select any cell in the matrix as your starting cell. from the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. you can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves. your task is to find the maximum number of cells that you can visit in the matrix by starting from some cell. return an integer denoting the maximum number of cells that can be visited.
take k of each character from left and right you are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. each minute, you may take either the leftmost character of s, or the rightmost character of s. return the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.
shopping offers in leetcode store, there are n items to sell. each item has a price. however, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. you are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy. you are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer. return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. you are not allowed to buy more items than you want, even if that would lower the overall price. you could use any of the special offers as many times as you want.
largest sum of averages you are given an integer array nums and an integer k. you can partition the array into at most k non-empty adjacent subarrays. the score of a partition is the sum of the averages of each subarray. note that the partition must use every integer in nums, and that the score is not necessarily an integer. return the maximum score you can achieve of all the possible partitions. answers within 10-6 of the actual answer will be accepted.
maximum product of three numbers given an integer array nums, find three numbers whose product is maximum and return the maximum product.
maximal network rank there is an infrastructure of n cities with some number of roads connecting these cities. each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi. the network rank of two different cities is defined as the total number of directly connected roads to either city. if a road is directly connected to both cities, it is only counted once. the maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities. given the integer n and the array roads, return the maximal network rank of the entire infrastructure.
remove palindromic subsequences you are given a string s consisting only of letters 'a' and 'b'. in a single step you can remove one palindromic subsequence from s. return the minimum number of steps to make the given string empty. a string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. note that a subsequence does not necessarily need to be contiguous. a string is called palindrome if is one that reads the same backward as well as forward.
longest common subpath there is a country of n cities numbered from 0 to n - 1. in this country, there is a road connecting every pair of cities. there are m friends numbered from 0 to m - 1 who are traveling through the country. each one of them will take a path consisting of some cities. each path is represented by an integer array that contains the visited cities in order. the path may contain a city more than once, but the same city will not be listed consecutively. given an integer n and a 2d integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all. a subpath of a path is a contiguous sequence of cities within that path.
gas station there are n gas stations along a circular route, where the amount of gas at the ith station is gas[i]. you have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. you begin the journey with an empty tank at one of the gas stations. given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. if there exists a solution, it is guaranteed to be unique
find the shortest superstring given an array of strings words, return the smallest string that contains each string in words as a substring. if there are multiple valid strings of the smallest length, return any of them. you may assume that no string in words is a substring of another string in words.
strange printer there is a strange printer with the following two special properties: the printer can only print a sequence of the same character each time. at each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters. given a string s, return the minimum number of turns the printer needed to print it.
maximum segment sum after removals you are given two 0-indexed integer arrays nums and removequeries, both of length n. for the ith query, the element in nums at the index removequeries[i] is removed, splitting nums into different segments. a segment is a contiguous sequence of positive integers in nums. a segment sum is the sum of every element in a segment. return an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal. note: the same index will not be removed more than once.
minimum difference between largest and smallest value in three moves you are given an integer array nums. in one move, you can choose one element of nums and change it to any value. return the minimum difference between the largest and smallest value of nums after performing at most three moves.
best time to buy and sell stock with transaction fee you are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee. find the maximum profit you can achieve. you may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
array nesting you are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1]. you should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule: the first element in s[k] starts with the selection of the element nums[k] of index = k. the next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on. we stop adding right before a duplicate element occurs in s[k]. return the longest length of a set s[k].
combination sum iii find all valid combinations of k numbers that sum up to n such that the following conditions are true: only numbers 1 through 9 are used. each number is used at most once. return a list of all possible valid combinations. the list must not contain the same combination twice, and the combinations may be returned in any order.
minimum number of flips to convert binary matrix to zero matrix given a m x n binary matrix mat. in one step, you can choose one cell and flip it and all the four neighbors of it if they exist (flip is changing 1 to 0 and 0 to 1). a pair of cells are called neighbors if they share one edge. return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot. a binary matrix is a matrix with all cells equal to 0 or 1 only. a zero matrix is a matrix with all cells equal to 0.
sentence similarity iii a sentence is a list of words that are separated by a single space with no leading or trailing spaces. for example, "hello world", "hello", "hello world hello world" are all sentences. words consist of only uppercase and lowercase english letters. two sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. for example, sentence1 = "hello my name is jane" and sentence2 = "hello jane" can be made equal by inserting "my name is" between "hello" and "jane" in sentence2. given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. otherwise, return false.
minimum consecutive cards to pick up you are given an integer array cards where cards[i] represents the value of the ith card. a pair of cards are matching if the cards have the same value. return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. if it is impossible to have matching cards, return -1.
equal rational numbers given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. the strings may use parentheses to denote the repeating part of the rational number. a rational number can be represented using up to three parts: <integerpart>, <nonrepeatingpart>, and a <repeatingpart>. the number will be represented in one of the following three ways: <integerpart> for example, 12, 0, and 123. <integerpart><.><nonrepeatingpart> for example, 0.5, 1., 2.12, and 123.0001. <integerpart><.><nonrepeatingpart><(><repeatingpart><)> for example, 0.1(6), 1.(9), 123.00(1212). the repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. for example: 1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).
maximum length of subarray with positive product given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive. a subarray of an array is a consecutive sequence of zero or more values taken out of that array. return the maximum length of a subarray with positive product.
next permutation a permutation of an array of integers is an arrangement of its members into a sequence or linear order. for example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]. the next permutation of an array of integers is the next lexicographically greater permutation of its integer. more formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. if such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). for example, the next permutation of arr = [1,2,3] is [1,3,2]. similarly, the next permutation of arr = [2,3,1] is [3,1,2]. while the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement. given an array of integers nums, find the next permutation of nums. the replacement must be in place and use only constant extra memory.
monotone increasing digits an integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y. given an integer n, return the largest number that is less than or equal to n with monotone increasing digits.
reconstruct a 2-row binary matrix given the following details of a matrix with n columns and 2 rows : the matrix is a binary matrix, which means each element in the matrix can be 0 or 1. the sum of elements of the 0-th(upper) row is given as upper. the sum of elements of the 1-st(lower) row is given as lower. the sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n. your task is to reconstruct the matrix with upper, lower and colsum. return it as a 2-d integer array. if there are more than one valid solution, any of them will be accepted. if no valid solution exists, return an empty 2-d array.
minimum depth of binary tree given a binary tree, find its minimum depth. the minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. note: a leaf is a node with no children.
last stone weight you are given an array of integers stones where stones[i] is the weight of the ith stone. we are playing a game with the stones. on each turn, we choose the heaviest two stones and smash them together. suppose the heaviest two stones have weights x and y with x <= y. the result of this smash is: if x == y, both stones are destroyed, and if x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. at the end of the game, there is at most one stone left. return the weight of the last remaining stone. if there are no stones left, return 0.
smallest value of the rearranged number you are given an integer num. rearrange the digits of num such that its value is minimized and it does not contain any leading zeros. return the rearranged number with minimal value. note that the sign of the number does not change after rearranging the digits.
longest palindrome by concatenating two letter words you are given an array of strings words. each element of words consists of two lowercase english letters. create the longest possible palindrome by selecting some elements from words and concatenating them in any order. each element can be selected at most once. return the length of the longest palindrome that you can create. if it is impossible to create any palindrome, return 0. a palindrome is a string that reads the same forward and backward.
minimum number of days to eat n oranges there are n oranges in the kitchen and you decided to eat some of these oranges every day as follows: eat one orange. if the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges. if the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges. you can only choose one of the actions per day. given the integer n, return the minimum number of days to eat n oranges.
populating next right pointers in each node you are given a perfect binary tree where all leaves are on the same level, and every parent has two children. the binary tree has the following definition: struct node { int val; node *left; node *right; node *next; } populate each next pointer to point to its next right node. if there is no next right node, the next pointer should be set to null. initially, all next pointers are set to null.
number of ways to reconstruct a tree you are given an array pairs, where pairs[i] = [xi, yi], and: there are no duplicates. xi < yi let ways be the number of rooted trees that satisfy the following conditions: the tree consists of nodes whose values appeared in pairs. a pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi. note: the tree does not have to be a binary tree. two ways are considered to be different if there is at least one node that has different parents in both ways. return: 0 if ways == 0 1 if ways == 1 2 if ways > 1 a rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root. an ancestor of a node is any node on the path from the root to that node (excluding the node itself). the root has no ancestors.
ways to make a fair array you are given an integer array nums. you can choose exactly one index (0-indexed) and remove the element. notice that the index of the elements may change after the removal. for example, if nums = [6,1,7,4,1]: choosing to remove index 1 results in nums = [6,7,4,1]. choosing to remove index 2 results in nums = [6,1,4,1]. choosing to remove index 4 results in nums = [6,1,7,4]. an array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values. return the number of indices that you could choose such that after the removal, nums is fair.
kth smallest instructions bob is standing at cell (0, 0), and he wants to reach destination: (row, column). he can only travel right and down. you are going to help bob by providing instructions for him to reach destination. the instructions are represented as a string, where each character is either: 'h', meaning move horizontally (go right), or 'v', meaning move vertically (go down). multiple instructions will lead bob to destination. for example, if destination is (2, 3), both "hhhvv" and "hvhvh" are valid instructions. however, bob is very picky. bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed. given an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take bob to destination.
best poker hand you are given an integer array ranks and a character array suits. you have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i]. the following are the types of poker hands you can make from best to worst: "flush": five cards of the same suit. "three of a kind": three cards of the same rank. "pair": two cards of the same rank. "high card": any single card. return a string representing the best type of poker hand you can make with the given cards. note that the return values are case-sensitive.
number of sub-arrays of size k and average greater than or equal to threshold given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.
prime subtraction operation you are given a 0-indexed integer array nums of length n. you can perform the following operation as many times as you want: pick an index i that you haven’t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i]. return true if you can make nums a strictly increasing array using the above operation and false otherwise. a strictly increasing array is an array whose each element is strictly greater than its preceding element.
maximum split of positive even integers you are given an integer finalsum. split it into a sum of a maximum number of unique positive even integers. for example, given finalsum = 12, the following splits are valid (unique positive even integers summing up to finalsum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). among them, (2 + 4 + 6) contains the maximum number of integers. note that finalsum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique. return a list of integers that represent a valid split containing a maximum number of integers. if no valid split exists for finalsum, return an empty list. you may return the integers in any order.
distinct echo substrings return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).
longest substring with at least k repeating characters given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.
palindrome number given an integer x, return true if x is a palindrome , and false otherwise.
longest increasing path in a matrix given an m x n integers matrix, return the length of the longest increasing path in matrix. from each cell, you can either move in four directions: left, right, up, or down. you may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).
distribute candies alice has n candies, where the ith candy is of type candytype[i]. alice noticed that she started to gain weight, so she visited a doctor. the doctor advised alice to only eat n / 2 of the candies she has (n is always even). alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. given the integer array candytype of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.
painting a grid with three different colors you are given two integers m and n. consider an m x n grid where each cell is initially white. you can paint each cell red, green, or blue. all cells must be painted. return the number of ways to color the grid with no two adjacent cells having the same color. since the answer can be very large, return it modulo 109 + 7.
diagonal traverse given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.
maximum swap you are given an integer num. you can swap two digits at most once to get the maximum valued number. return the maximum valued number you can get.
minimum number of operations to convert time you are given two strings current and correct representing two 24-hour times. 24-hour times are formatted as "hh:mm", where hh is between 00 and 23, and mm is between 00 and 59. the earliest 24-hour time is 00:00, and the latest is 23:59. in one operation you can increase the time current by 1, 5, 15, or 60 minutes. you can perform this operation any number of times. return the minimum number of operations needed to convert current to correct.
number of recent calls you have a recentcounter class which counts the number of recent requests within a certain time frame. implement the recentcounter class: recentcounter() initializes the counter with zero recent requests. int ping(int t) adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). specifically, return the number of requests that have happened in the inclusive range [t - 3000, t]. it is guaranteed that every call to ping uses a strictly larger value of t than the previous call.
groups of special-equivalent strings you are given an array of strings of the same length words. in one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i]. two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j]. for example, words[i] = "zzxy" and words[j] = "xyzz" are special-equivalent because we may make the moves "zzxy" -> "xzzy" -> "xyzz". a group of special-equivalent strings from words is a non-empty subset of words such that: every pair of strings in the group are special equivalent, and the group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group). return the number of groups of special-equivalent strings from words.
word break given a string s and a dictionary of strings worddict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. note that the same word in the dictionary may be reused multiple times in the segmentation.
letter combinations of a phone number given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. return the answer in any order. a mapping of digits to letters (just like on the telephone buttons) is given below. note that 1 does not map to any letters.
find the divisibility array of a string you are given a 0-indexed string word of length n consisting of digits, and a positive integer m. the divisibility array div of word is an integer array of length n such that: div[i] = 1 if the numeric value of word[0,...,i] is divisible by m, or div[i] = 0 otherwise. return the divisibility array of word.
delete columns to make sorted iii you are given an array of n strings strs, all of the same length. we may choose any deletion indices, and we delete all the characters in those indices for each string. for example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"]. suppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). return the minimum possible value of answer.length.
minimum bit flips to convert number a bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0. for example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. we can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc. given two integers start and goal, return the minimum number of bit flips to convert start to goal.
restore the array from adjacent pairs there is an integer array nums that consists of n unique elements, but you have forgotten it. however, you do remember every pair of adjacent elements in nums. you are given a 2d integer array adjacentpairs of size n - 1 where each adjacentpairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums. it is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentpairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. the pairs can appear in any order. return the original array nums. if there are multiple solutions, return any of them.
thousand separator given an integer n, add a dot (".") as the thousands separator and return it in string format.
sort array by increasing frequency given an array of integers nums, sort the array in increasing order based on the frequency of the values. if multiple values have the same frequency, sort them in decreasing order. return the sorted array.
group by write code that enhances all arrays such that you can call the array.groupby(fn) method on any array and it will return a grouped version of the array. a grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array with that key. the provided callback fn will accept an item in the array and return a string key. the order of each value list should be the order the items appear in the array. any order of keys is acceptable. please solve it without lodash's _.groupby function.
subarray sum equals k given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k. a subarray is a contiguous non-empty sequence of elements within an array.
partition labels you are given a string s. we want to partition the string into as many parts as possible so that each letter appears in at most one part. note that the partition is done so that after concatenating all the parts in order, the resultant string should be s. return a list of integers representing the size of these parts.
wiggle sort ii given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3].... you may assume the input array always has a valid answer.
find all anagrams in a string given two strings s and p, return an array of all the start indices of p's anagrams in s. you may return the answer in any order. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
min cost climbing stairs you are given an integer array cost where cost[i] is the cost of ith step on a staircase. once you pay the cost, you can either climb one or two steps. you can either start from the step with index 0, or the step with index 1. return the minimum cost to reach the top of the floor.
word ladder ii a transformation sequence from word beginword to word endword using a dictionary wordlist is a sequence of words beginword -> s1 -> s2 -> ... -> sk such that: every adjacent pair of words differs by a single letter. every si for 1 <= i <= k is in wordlist. note that beginword does not need to be in wordlist. sk == endword given two words, beginword and endword, and a dictionary wordlist, return all the shortest transformation sequences from beginword to endword, or an empty list if no such sequence exists. each sequence should be returned as a list of the words [beginword, s1, s2, ..., sk].
maximum path quality of a graph there is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). you are given a 0-indexed integer array values where values[i] is the value of the ith node. you are also given a 0-indexed 2d integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. finally, you are given an integer maxtime. a valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxtime seconds to complete. you may visit the same node multiple times. the quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum). return the maximum quality of a valid path. note: there are at most four edges connected to each node.
last moment before all ants fall out of a plank we have a wooden plank of the length n units. some ants are walking on the plank, each ant moves with a speed of 1 unit per second. some of the ants move to the left, the other move to the right. when two ants moving in two different directions meet at some point, they change their directions and continue moving again. assume changing directions does not take any additional time. when an ant reaches one end of the plank at a time t, it falls out of the plank immediately. given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.
predict the winner you are given an integer array nums. two players are playing a game with this array: player 1 and player 2. player 1 and player 2 take turns, with player 1 starting first. both players start the game with a score of 0. at each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. the player adds the chosen number to their score. the game ends when there are no more elements in the array. return true if player 1 can win the game. if the scores of both players are equal, then player 1 is still the winner, and you should also return true. you may assume that both players are playing optimally.
clone graph given a reference of a node in a connected undirected graph. return a deep copy (clone) of the graph. each node in the graph contains a value (int) and a list (list[node]) of its neighbors. class node { public int val; public list<node> neighbors; } test case format: for simplicity, each node's value is the same as the node's index (1-indexed). for example, the first node with val == 1, the second node with val == 2, and so on. the graph is represented in the test case using an adjacency list. an adjacency list is a collection of unordered lists used to represent a finite graph. each list describes the set of neighbors of a node in the graph. the given node will always be the first node with val = 1. you must return the copy of the given node as a reference to the cloned graph.
find subarrays with equal sum given a 0-indexed integer array nums, determine whether there exist two subarrays of length 2 with equal sum. note that the two subarrays must begin at different indices. return true if these subarrays exist, and false otherwise. a subarray is a contiguous non-empty sequence of elements within an array.
decode ways ii a message containing letters from a-z can be encoded into numbers using the following mapping: 'a' -> "1" 'b' -> "2" ... 'z' -> "26" to decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, "11106" can be mapped into: "aajf" with the grouping (1 1 10 6) "kjf" with the grouping (11 10 6) note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'f' since "6" is different from "06". in addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). for example, the encoded message "1*" may represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19". decoding "1*" is equivalent to decoding any of the encoded messages it can represent. given a string s consisting of digits and '*' characters, return the number of ways to decode it. since the answer may be very large, return it modulo 109 + 7.
count binary substrings given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. substrings that occur multiple times are counted the number of times they occur.
special binary string special binary strings are binary strings with the following two properties: the number of 0's is equal to the number of 1's. every prefix of the binary string has at least as many 1's as 0's. you are given a special binary string s. a move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string. return the lexicographically largest resulting string possible after applying the mentioned operations on the string.
orderly queue you are given a string s and an integer k. you can choose one of the first k letters of s and append it at the end of the string.. return the lexicographically smallest string you could have after applying the mentioned step any number of moves.
valid triangle number given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
find the longest valid obstacle course at each position you want to build some obstacle courses. you are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle. for every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that: you choose any number of obstacles between 0 and i inclusive. you must include the ith obstacle in the course. you must put the chosen obstacles in the same order as they appear in obstacles. every obstacle (except the first) is taller than or the same height as the obstacle immediately before it. return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.
01 matrix given an m x n binary matrix mat, return the distance of the nearest 0 for each cell. the distance between two adjacent cells is 1.
online election you are given two integer arrays persons and times. in an election, the ith vote was cast for persons[i] at time times[i]. for each query at a time t, find the person that was leading the election at time t. votes cast at time t will count towards our query. in the case of a tie, the most recent vote (among tied candidates) wins. implement the topvotedcandidate class: topvotedcandidate(int[] persons, int[] times) initializes the object with the persons and times arrays. int q(int t) returns the number of the person that was leading the election at time t according to the mentioned rules.
best time to buy and sell stock ii you are given an integer array prices where prices[i] is the price of a given stock on the ith day. on each day, you may decide to buy and/or sell the stock. you can only hold at most one share of the stock at any time. however, you can buy it then immediately sell it on the same day. find and return the maximum profit you can achieve.
find good days to rob the bank you and a gang of thieves are planning on robbing a bank. you are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. the days are numbered starting from 0. you are also given an integer time. the ith day is a good day to rob the bank if: there are at least time days before and after the ith day, the number of guards at the bank for the time days before i are non-increasing, and the number of guards at the bank for the time days after i are non-decreasing. more formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]. return a list of all days (0-indexed) that are good days to rob the bank. the order that the days are returned in does not matter.
maximize distance to closest person you are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed). there is at least one empty seat, and at least one person sitting. alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. return that maximum distance to the closest person.
maximum binary tree ii a maximum tree is a tree where every node has a value greater than any other value in its subtree. you are given the root of a maximum binary tree and an integer val. just as in the previous problem, the given tree was constructed from a list a (root = construct(a)) recursively with the following construct(a) routine: if a is empty, return null. otherwise, let a[i] be the largest element of a. create a root node with the value a[i]. the left child of root will be construct([a[0], a[1], ..., a[i - 1]]). the right child of root will be construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]). return root. note that we were not given a directly, only a root node root = construct(a). suppose b is a copy of a with the value val appended to it. it is guaranteed that b has unique values. return construct(b).
rotate image you are given an n x n 2d matrix representing an image, rotate the image by 90 degrees (clockwise). you have to rotate the image in-place, which means you have to modify the input 2d matrix directly. do not allocate another 2d matrix and do the rotation.
different ways to add parentheses given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. you may return the answer in any order. the test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.
prime in diagonal you are given a 0-indexed two-dimensional integer array nums. return the largest prime number that lies on at least one of the diagonals of nums. in case, no prime is present on any of the diagonals, return 0. note that: an integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself. an integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val. in the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].
minimum number of days to disconnect island you are given an m x n binary grid grid where 1 represents land and 0 represents water. an island is a maximal 4-directionally (horizontal or vertical) connected group of 1's. the grid is said to be connected if we have exactly one island, otherwise is said disconnected. in one day, we are allowed to change any single land cell (1) into a water cell (0). return the minimum number of days to disconnect the grid.
find the duplicate number given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. there is only one repeated number in nums, return this repeated number. you must solve the problem without modifying the array nums and uses only constant extra space.
compare version numbers given two version numbers, version1 and version2, compare them. version numbers consist of one or more revisions joined by a dot '.'. each revision consists of digits and may contain leading zeros. every revision contains at least one character. revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. for example 2.5.33 and 0.1 are valid version numbers. to compare version numbers, compare their revisions in left-to-right order. revisions are compared using their integer value ignoring any leading zeros. this means that revisions 1 and 001 are considered equal. if a version number does not specify a revision at an index, then treat the revision as 0. for example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1. return the following: if version1 < version2, return -1. if version1 > version2, return 1. otherwise, return 0.
snakes and ladders you are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row. you start on square 1 of the board. in each move, starting from square curr, do the following: choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)]. this choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board. if next has a snake or ladder, you must move to the destination of that snake or ladder. otherwise, you move to next. the game ends when you reach the square n2. a board square on row r and column c has a snake or ladder if board[r][c] != -1. the destination of that snake or ladder is board[r][c]. squares 1 and n2 do not have a snake or ladder. note that you only take a snake or ladder at most once per move. if the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder. for example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. you follow the ladder to square 3, but do not follow the subsequent ladder to 4. return the least number of moves required to reach the square n2. if it is not possible to reach the square, return -1.
finding the users active minutes you are given the logs for users' actions on leetcode, and an integer k. the logs are represented by a 2d integer array logs where each logs[i] = [idi, timei] indicates that the user with idi performed an action at the minute timei. multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute. the user active minutes (uam) for a given user is defined as the number of unique minutes in which the user performed an action on leetcode. a minute can only be counted once, even if multiple actions occur during it. you are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose uam equals j. return the array answer as described above.
minimum sum of four digit number after splitting digits you are given a positive integer num consisting of exactly four digits. split num into two new integers new1 and new2 by using the digits found in num. leading zeros are allowed in new1 and new2, and all the digits found in num must be used. for example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329]. return the minimum possible sum of new1 and new2.
pairs of songs with total durations divisible by 60 you are given a list of songs where the ith song has a duration of time[i] seconds. return the number of pairs of songs for which their total duration in seconds is divisible by 60. formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.
ipo suppose leetcode will start its ipo soon. in order to sell a good price of its shares to venture capital, leetcode would like to work on some projects to increase its capital before the ipo. since it has limited resources, it can only finish at most k distinct projects before the ipo. help leetcode design the best way to maximize its total capital after finishing at most k distinct projects. you are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it. initially, you have w capital. when you finish a project, you will obtain its pure profit and the profit will be added to your total capital. pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital. the answer is guaranteed to fit in a 32-bit signed integer.
count collisions on a road there are n cars on an infinitely long road. the cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point. you are given a 0-indexed string directions of length n. directions[i] can be either 'l', 'r', or 's' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. each moving car has the same speed. the number of collisions can be calculated as follows: when two cars moving in opposite directions collide with each other, the number of collisions increases by 2. when a moving car collides with a stationary car, the number of collisions increases by 1. after a collision, the cars involved can no longer move and will stay at the point where they collided. other than that, cars cannot change their state or direction of motion. return the total number of collisions that will happen on the road.
24 game you are given an integer array cards of length 4. you have four cards, each containing a number in the range [1, 9]. you should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24. you are restricted with the following rules: the division operator '/' represents real division, not integer division. for example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12. every operation done is between two numbers. in particular, we cannot use '-' as a unary operator. for example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed. you cannot concatenate numbers together for example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid. return true if you can get such expression that evaluates to 24, and false otherwise.
circle and rectangle overlapping you are given a circle represented as (radius, xcenter, ycenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle. return true if the circle and rectangle are overlapped otherwise return false. in other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.
tag validator given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid. a code snippet is valid if all the following rules hold: the code must be wrapped in a valid closed tag. otherwise, the code is invalid. a closed tag (not necessarily valid) has exactly the following format : <tag_name>tag_content</tag_name>. among them, <tag_name> is the start tag, and </tag_name> is the end tag. the tag_name in start and end tags should be the same. a closed tag is valid if and only if the tag_name and tag_content are valid. a valid tag_name only contain upper-case letters, and has length in range [1,9]. otherwise, the tag_name is invalid. a valid tag_content may contain other valid closed tags, cdata and any characters (see note1) except unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid tag_name. otherwise, the tag_content is invalid. a start tag is unmatched if no end tag exists with the same tag_name, and vice versa. however, you also need to consider the issue of unbalanced when tags are nested. a < is unmatched if you cannot find a subsequent >. and when you find a < or </, all the subsequent characters until the next > should be parsed as tag_name (not necessarily valid). the cdata has the following format : <![cdata[cdata_content]]>. the range of cdata_content is defined as the characters between <![cdata[ and the first subsequent ]]>. cdata_content may contain any characters. the function of cdata is to forbid the validator to parse cdata_content, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.
evaluate reverse polish notation you are given an array of strings tokens that represents an arithmetic expression in a reverse polish notation. evaluate the expression. return an integer that represents the value of the expression. note that: the valid operators are '+', '-', '*', and '/'. each operand may be an integer or another expression. the division between two integers always truncates toward zero. there will not be any division by zero. the input represents a valid arithmetic expression in a reverse polish notation. the answer and all the intermediate calculations can be represented in a 32-bit integer.
append k integers with minimal sum you are given an integer array nums and an integer k. append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum. return the sum of the k integers appended to nums.
maximum number of words you can type there is a malfunctioning keyboard where some letter keys do not work. all other keys on the keyboard work properly. given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenletters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.
logical or of two binary grids represented as quad-trees a binary matrix is a matrix in which all the elements are either 0 or 1. given quadtree1 and quadtree2. quadtree1 represents a n * n binary matrix and quadtree2 represents another n * n binary matrix. return a quad-tree representing the n * n binary matrix which is the result of logical bitwise or of the two binary matrixes represented by quadtree1 and quadtree2. notice that you can assign the value of a node to true or false when isleaf is false, and both are accepted in the answer. a quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes: val: true if the node represents a grid of 1's or false if the node represents a grid of 0's. isleaf: true if the node is leaf node on the tree or false if the node has the four children. class node { public boolean val; public boolean isleaf; public node topleft; public node topright; public node bottomleft; public node bottomright; } we can construct a quad-tree from a two-dimensional area using the following steps: if the current grid has the same value (i.e all 1's or all 0's) set isleaf true and set val to the value of the grid and set the four children to null and stop. if the current grid has different values, set isleaf to false and set val to any value and divide the current grid into four sub-grids as shown in the photo. recurse for each of the children with the proper sub-grid. if you want to know more about the quad-tree, you can refer to the wiki. quad-tree format: the input/output represents the serialized format of a quad-tree using level order traversal, where null signifies a path terminator where no node exists below. it is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list [isleaf, val]. if the value of isleaf or val is true we represent it as 1 in the list [isleaf, val] and if the value of isleaf or val is false we represent it as 0.
sort the students by their kth score there is a class with m students and n exams. you are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. the matrix score contains distinct integers only. you are also given an integer k. sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest. return the matrix after sorting it.
minimum number of operations to make all array elements equal to 1 you are given a 0-indexed array nums consisiting of positive integers. you can do the following operation on the array any number of times: select an index i such that 0 <= i < n - 1 and replace either of nums[i] or nums[i+1] with their gcd value. return the minimum number of operations to make all elements of nums equal to 1. if it is impossible, return -1. the gcd of two integers is the greatest common divisor of the two integers.
find eventual safe states there is a directed graph of n nodes with each node labeled from 0 to n - 1. the graph is represented by a 0-indexed 2d integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i]. a node is a terminal node if there are no outgoing edges. a node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node). return an array containing all the safe nodes of the graph. the answer should be sorted in ascending order.
last day where you can still cross there is a 1-based binary matrix where 0 represents land and 1 represents water. you are given integers row and col representing the number of rows and columns in the matrix, respectively. initially on day 0, the entire matrix is land. however, each day a new cell becomes flooded with water. you are given a 1-based 2d array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1). you want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. you can start from any cell in the top row and end at any cell in the bottom row. you can only travel in the four cardinal directions (left, right, up, and down). return the last day where it is possible to walk from the top to the bottom by only walking on land cells.
duplicate zeros given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right. note that elements beyond the length of the original array are not written. do the above modifications to the input array in place and do not return anything.
longest continuous subarray with absolute diff less than or equal to limit given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.
number of digit one given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.
delete nodes and return forest given the root of a binary tree, each node in the tree has a distinct value. after deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees). return the roots of the trees in the remaining forest. you may return the result in any order.
find the score of all prefixes of an array we define the conversion array conver of an array arr as follows: conver[i] = arr[i] + max(arr[0..i]) where max(arr[0..i]) is the maximum value of arr[j] over 0 <= j <= i. we also define the score of an array arr as the sum of the values of the conversion array of arr. given a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i].
rotate function you are given an integer array nums of length n. assume arrk to be an array obtained by rotating nums by k positions clock-wise. we define the rotation function f on nums as follow: f(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]. return the maximum value of f(0), f(1), ..., f(n-1). the test cases are generated so that the answer fits in a 32-bit integer.
letter tile possibilities you have n tiles, where each tile has one letter tiles[i] printed on it. return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.
frequency of the most frequent element the frequency of an element is the number of times it occurs in an array. you are given an integer array nums and an integer k. in one operation, you can choose an index of nums and increment the element at that index by 1. return the maximum possible frequency of an element after performing at most k operations.
count servers that communicate you are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. two servers are said to communicate if they are on the same row or on the same column. return the number of servers that communicate with any other server.
find longest awesome substring you are given a string s. an awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome. return the length of the maximum length awesome substring of s.
reverse nodes in k-group given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. if the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. you may not alter the values in the list's nodes, only nodes themselves may be changed.
calculate digit sum of a string you are given a string s consisting of digits and an integer k. a round can be completed if the length of s is greater than k. in one round, do the following: divide s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. note that the size of the last group can be smaller than k. replace each group of s with a string representing the sum of all its digits. for example, "346" is replaced with "13" because 3 + 4 + 6 = 13. merge consecutive groups together to form a new string. if the length of the string is greater than k, repeat from step 1. return s after all rounds have been completed.
extra characters in a string you are given a 0-indexed string s and a dictionary of words dictionary. you have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. there may be some extra characters in s which are not present in any of the substrings. return the minimum number of extra characters left over if you break up s optimally.
zigzag conversion the string "paypalishiring" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) p a h n a p l s i i g y i r and then read line by line: "pahnaplsiigyir" write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numrows);
unique email addresses every valid email consists of a local name and a domain name, separated by the '@' sign. besides lowercase letters, the email may contain one or more '.' or '+'. for example, in "alice@leetcode.com", "alice" is the local name, and "leetcode.com" is the domain name. if you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. note that this rule does not apply to domain names. for example, "alice.z@leetcode.com" and "alicez@leetcode.com" forward to the same email address. if you add a plus '+' in the local name, everything after the first plus sign will be ignored. this allows certain emails to be filtered. note that this rule does not apply to domain names. for example, "m.y+name@email.com" will be forwarded to "my@email.com". it is possible to use both of these rules at the same time. given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.
3sum closest given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. return the sum of the three integers. you may assume that each input would have exactly one solution.
increment submatrices by one you are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes. you are also given a 2d integer array query. for each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation: add 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). that is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i. return the matrix mat after performing every query.
make costs of paths equal in a binary tree you are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. the root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1. each node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. you are allowed to increment the cost of any node by 1 any number of times. return the minimum number of increments you need to make the cost of paths from the root to each leaf node equal. note: a perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children. the cost of a path is the sum of costs of nodes in the path.
word frequency write a bash script to calculate the frequency of each word in a text file words.txt. for simplicity sake, you may assume: words.txt contains only lowercase characters and space ' ' characters. each word must consist of lowercase characters only. words are separated by one or more whitespace characters. example: assume that words.txt has the following content: the day is sunny the the the sunny is is your script should output the following, sorted by descending frequency: the 4 is 3 sunny 2 day 1 note: don't worry about handling ties, it is guaranteed that each word's frequency count is unique. could you write it in one-line using unix pipes?
transform to chessboard you are given an n x n binary grid board. in each move, you can swap any two rows with each other, or any two columns with each other. return the minimum number of moves to transform the board into a chessboard board. if the task is impossible, return -1. a chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.
memoize ii given a function fn, return a memoized version of that function. a memoized function is a function that will never be called twice with the same inputs. instead it will return a cached value. fn can be any function and there are no constraints on what type of values it accepts. inputs are considered identical if they are === to each other.
difference between ones and zeros in row and column you are given a 0-indexed m x n binary matrix grid. a 0-indexed m x n difference matrix diff is created with the following procedure: let the number of ones in the ith row be onesrowi. let the number of ones in the jth column be onescolj. let the number of zeros in the ith row be zerosrowi. let the number of zeros in the jth column be zeroscolj. diff[i][j] = onesrowi + onescolj - zerosrowi - zeroscolj return the difference matrix diff.
make the xor of all segments equal to zero you are given an array nums and an integer k. the xor of a segment [left, right] where left <= right is the xor of all the elements with indices between left and right, inclusive: nums[left] xor nums[left+1] xor ... xor nums[right]. return the minimum number of elements to change in the array such that the xor of all segments of size k is equal to zero.
sum of square numbers given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.
count equal and divisible pairs in an array given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.
reordered power of 2 you are given an integer n. we reorder the digits in any order (including the original order) such that the leading digit is not zero. return true if and only if we can do this so that the resulting number is a power of two.
binary tree zigzag level order traversal given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).
maximum number of events that can be attended ii you are given an array of events where events[i] = [startdayi, enddayi, valuei]. the ith event starts at startdayi and ends at enddayi, and if you attend this event, you will receive a value of valuei. you are also given an integer k which represents the maximum number of events you can attend. you can only attend one event at a time. if you choose to attend an event, you must attend the entire event. note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day. return the maximum sum of values that you can receive by attending events.
next greater element ii given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums. the next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. if it doesn't exist, return -1 for this number.
maximum number of balloons given a string text, you want to use the characters of text to form as many instances of the word "balloon" as possible. you can use each character in text at most once. return the maximum number of instances that can be formed.
insert delete getrandom o(1) - duplicates allowed randomizedcollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). it should support inserting and removing specific elements and also reporting a random element. implement the randomizedcollection class: randomizedcollection() initializes the empty randomizedcollection object. bool insert(int val) inserts an item val into the multiset, even if the item is already present. returns true if the item is not present, false otherwise. bool remove(int val) removes an item val from the multiset if present. returns true if the item is present, false otherwise. note that if val has multiple occurrences in the multiset, we only remove one of them. int getrandom() returns a random element from the current multiset of elements. the probability of each element being returned is linearly related to the number of the same values the multiset contains. you must implement the functions of the class such that each function works on average o(1) time complexity. note: the test cases are generated such that getrandom will only be called if there is at least one item in the randomizedcollection.
island perimeter you are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water. grid cells are connected horizontally/vertically (not diagonally). the grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). the island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. one cell is a square with side length 1. the grid is rectangular, width and height don't exceed 100. determine the perimeter of the island.
search a 2d matrix you are given an m x n integer matrix matrix with the following two properties: each row is sorted in non-decreasing order. the first integer of each row is greater than the last integer of the previous row. given an integer target, return true if target is in matrix or false otherwise. you must write a solution in o(log(m * n)) time complexity.
two city scheduling a company is planning to interview 2n people. given the array costs where costs[i] = [acosti, bcosti], the cost of flying the ith person to city a is acosti, and the cost of flying the ith person to city b is bcosti. return the minimum cost to fly every person to a city such that exactly n people arrive in each city.
delete columns to make sorted you are given an array of n strings strs, all of the same length. the strings can be arranged such that there is one on each line, making a grid. for example, strs = ["abc", "bce", "cae"] can be arranged as follows: abc bce cae you want to delete the columns that are not sorted lexicographically. in the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1. return the number of columns that you will delete.
custom sort string you are given two strings order and s. all the characters of order are unique and were sorted in some custom order previously. permute the characters of s so that they match the order that order was sorted. more specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string. return any permutation of s that satisfies this property.
accounts merge given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account. now, we would like to merge these accounts. two accounts definitely belong to the same person if there is some common email to both accounts. note that even if two accounts have the same name, they may belong to different people as people could have the same name. a person can have any number of accounts initially, but all of their accounts definitely have the same name. after merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. the accounts themselves can be returned in any order.
design hashset design a hashset without using any built-in hash table libraries. implement myhashset class: void add(key) inserts the value key into the hashset. bool contains(key) returns whether the value key exists in the hashset or not. void remove(key) removes the value key in the hashset. if key does not exist in the hashset, do nothing.
check if the sentence is pangram a pangram is a sentence where every letter of the english alphabet appears at least once. given a string sentence containing only lowercase english letters, return true if sentence is a pangram, or false otherwise.
find median from data stream the median is the middle value in an ordered integer list. if the size of the list is even, there is no middle value, and the median is the mean of the two middle values. for example, for arr = [2,3,4], the median is 3. for example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5. implement the medianfinder class: medianfinder() initializes the medianfinder object. void addnum(int num) adds the integer num from the data stream to the data structure. double findmedian() returns the median of all elements so far. answers within 10-5 of the actual answer will be accepted.
count integers with even digit sum given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even. the digit sum of a positive integer is the sum of all its digits.
basic calculator ii given a string s which represents an expression, evaluate this expression and return its value. the integer division should truncate toward zero. you may assume that the given expression is always valid. all intermediate results will be in the range of [-231, 231 - 1]. note: you are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().
check if object instance of class write a function that checks if a given value is an instance of a given class or superclass. for this problem, an object is considered an instance of a given class if that object has access to that class's methods. there are no constraints on the data types that can be passed to the function. for example, the value or the class could be undefined.
count square submatrices with all ones given a m * n matrix of ones and zeros, return how many square submatrices have all ones.
robot return to origin there is a robot starting at the position (0, 0), the origin, on a 2d plane. given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves. you are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. valid moves are 'r' (right), 'l' (left), 'u' (up), and 'd' (down). return true if the robot returns to the origin after it finishes all of its moves, or false otherwise. note: the way that the robot is "facing" is irrelevant. 'r' will always make the robot move to the right once, 'l' will always make it move left, etc. also, assume that the magnitude of the robot's movement is the same for each move.
bulb switcher there are n bulbs that are initially off. you first turn on all the bulbs, then you turn off every second bulb. on the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). for the ith round, you toggle every i bulb. for the nth round, you only toggle the last bulb. return the number of bulbs that are on after n rounds.
the number of good subsets you are given an integer array nums. we call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers. for example, if nums = [1, 2, 3, 4]: [2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively. [1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively. return the number of different good subsets in nums modulo 109 + 7. a subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. two subsets are different if and only if the chosen indices to delete are different.
arithmetic slices ii - subsequence given an integer array nums, return the number of all the arithmetic subsequences of nums. a sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. for example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences. for example, [1, 1, 2, 5, 7] is not an arithmetic sequence. a subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. for example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. the test cases are generated so that the answer fits in 32-bit integer.
construct target array with multiple sums you are given an array target of n integers. from a starting array arr consisting of n 1's, you may perform the following procedure : let x be the sum of all elements currently in your array. choose index i, such that 0 <= i < n and set the value of arr at index i to x. you may repeat this procedure as many times as needed. return true if it is possible to construct the target array from arr, otherwise, return false.
interval list intersections you are given two lists of closed intervals, firstlist and secondlist, where firstlist[i] = [starti, endi] and secondlist[j] = [startj, endj]. each list of intervals is pairwise disjoint and in sorted order. return the intersection of these two interval lists. a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b. the intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. for example, the intersection of [1, 3] and [2, 4] is [2, 3].
path sum iii given the root of a binary tree and an integer targetsum, return the number of paths where the sum of the values along the path equals targetsum. the path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).
delete columns to make sorted ii you are given an array of n strings strs, all of the same length. we may choose any deletion indices, and we delete all the characters in those indices for each string. for example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"]. suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). return the minimum possible value of answer.length.
sequential digits an integer has sequential digits if and only if each digit in the number is one more than the previous digit. return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.
linked list random node given a singly linked list, return a random node's value from the linked list. each node must have the same probability of being chosen. implement the solution class: solution(listnode head) initializes the object with the head of the singly-linked list head. int getrandom() chooses a node randomly from the list and returns its value. all the nodes of the list should be equally likely to be chosen.
distinct prime factors of product of array given an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums. note that: a number greater than 1 is called prime if it is divisible by only 1 and itself. an integer val1 is a factor of another integer val2 if val2 / val1 is an integer.
max increase to keep city skyline there is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. you are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c. a city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. the skyline from each cardinal direction north, east, south, and west may be different. we are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). the height of a 0-height building can also be increased. however, increasing the height of a building should not affect the city's skyline from any cardinal direction. return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.
the earliest and latest rounds where players compete there is a tournament where n players are participating. the players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.). the tournament consists of multiple rounds (starting from round number 1). in each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. when the number of players is odd for the current round, the player in the middle automatically advances to the next round. for example, if the row consists of players 1, 2, 4, 6, 7 player 1 competes against player 7. player 2 competes against player 6. player 4 automatically advances to the next round. after each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order). the players numbered firstplayer and secondplayer are the best in the tournament. they can win against any other player before they compete against each other. if any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round. given the integers n, firstplayer, and secondplayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.
rearrange words in a sentence given a sentence text (a sentence is a string of space-separated words) in the following format: first letter is in upper case. each word in text are separated by a single space. your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. if two words have the same length, arrange them in their original order. return the new text following the format shown above.
remove k digits given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.
stamping the sequence you are given two strings stamp and target. initially, there is a string s of length target.length with all s[i] == '?'. in one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp. for example, if stamp = "abc" and target = "abcba", then s is "?????" initially. in one turn you can: place stamp at index 0 of s to obtain "abc??", place stamp at index 1 of s to obtain "?abc?", or place stamp at index 2 of s to obtain "??abc". note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s). we want to convert s to target using at most 10 * target.length turns. return an array of the index of the left-most letter being stamped at each turn. if we cannot obtain target from s within 10 * target.length turns, return an empty array.
reconstruct original digits from english given a string s containing an out-of-order english representation of digits 0-9, return the digits in ascending order.
longest zigzag path in a binary tree you are given the root of a binary tree. a zigzag path for a binary tree is defined as follow: choose any node in the binary tree and a direction (right or left). if the current direction is right, move to the right child of the current node; otherwise, move to the left child. change the direction from right to left or from left to right. repeat the second and third steps until you can't move in the tree. zigzag length is defined as the number of nodes visited - 1. (a single node has a length of 0). return the longest zigzag path contained in that tree.
maximum fruits harvested after at most k steps fruits are available at some positions on an infinite x-axis. you are given a 2d integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique. you are also given an integer startpos and an integer k. initially, you are at the position startpos. from any position, you can either walk to the left or right. it takes one step to move one unit on the x-axis, and you can walk at most k steps in total. for every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position. return the maximum total number of fruits you can harvest.
open the lock you have a lock in front of you with 4 circular wheels. each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. the wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. each move consists of turning one wheel one slot. the lock initially starts at '0000', a string representing the state of the 4 wheels. you are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it. given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.
insert into a binary search tree you are given the root node of a binary search tree (bst) and a value to insert into the tree. return the root node of the bst after the insertion. it is guaranteed that the new value does not exist in the original bst. notice that there may exist multiple valid ways for the insertion, as long as the tree remains a bst after insertion. you can return any of them.
number of unique good subsequences you are given a binary string binary. a subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of "0"). find the number of unique good subsequences of binary. for example, if binary = "001", then all the good subsequences are ["0", "0", "1"], so the unique good subsequences are "0" and "1". note that subsequences "00", "01", and "001" are not good because they have leading zeros. return the number of unique good subsequences of binary. since the answer may be very large, return it modulo 109 + 7. a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
decode the message you are given the strings key and message, which represent a cipher key and a secret message, respectively. the steps to decode message are as follows: use the first appearance of all 26 lowercase english letters in key as the order of the substitution table. align the substitution table with the regular english alphabet. each letter in message is then substituted using the table. spaces ' ' are transformed to themselves. for example, given key = "happy boy" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f'). return the decoded message.
find resultant array after removing anagrams you are given a 0-indexed string array words, where words[i] consists of lowercase english letters. in one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. keep performing this operation as long as you can select an index that satisfies the conditions. return words after performing all operations. it can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. for example, "dacb" is an anagram of "abdc".
super palindromes let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome. given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].
largest positive integer that exists with its negative given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array. return the positive integer k. if there is no such integer, return -1.
recover the original array alice had a 0-indexed array arr consisting of n positive integers. she chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner: lower[i] = arr[i] - k, for every index i where 0 <= i < n higher[i] = arr[i] + k, for every index i where 0 <= i < n unfortunately, alice lost all three arrays. however, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. help alice and recover the original array. given an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. in case the answer is not unique, return any valid array. note: the test cases are generated such that there exists at least one valid array arr.
find the index of the first occurrence in a string given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
integer to roman roman numerals are represented by seven different symbols: i, v, x, l, c, d and m. symbol value i 1 v 5 x 10 l 50 c 100 d 500 m 1000 for example, 2 is written as ii in roman numeral, just two one's added together. 12 is written as xii, which is simply x + ii. the number 27 is written as xxvii, which is xx + v + ii. roman numerals are usually written largest to smallest from left to right. however, the numeral for four is not iiii. instead, the number four is written as iv. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as ix. there are six instances where subtraction is used: i can be placed before v (5) and x (10) to make 4 and 9. x can be placed before l (50) and c (100) to make 40 and 90. c can be placed before d (500) and m (1000) to make 400 and 900. given an integer, convert it to a roman numeral.
valid parentheses given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. an input string is valid if: open brackets must be closed by the same type of brackets. open brackets must be closed in the correct order. every close bracket has a corresponding open bracket of the same type.
special array with x elements greater than or equal x you are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x. notice that x does not have to be an element in nums. return x if the array is special, otherwise, return -1. it can be proven that if nums is special, the value for x is unique.
determine color of a chessboard square you are given coordinates, a string that represents the coordinates of a square of the chessboard. below is a chessboard for your reference. return true if the square is white, and false if the square is black. the coordinate will always represent a valid chessboard square. the coordinate will always have the letter first, and the number second.
count of matches in tournament you are given an integer n, the number of teams in a tournament that has strange rules: if the current number of teams is even, each team gets paired with another team. a total of n / 2 matches are played, and n / 2 teams advance to the next round. if the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. a total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round. return the number of matches played in the tournament until a winner is decided.
sum of unique elements you are given an integer array nums. the unique elements of an array are the elements that appear exactly once in the array. return the sum of all the unique elements of nums.
koko eating bananas koko loves to eat bananas. there are n piles of bananas, the ith pile has piles[i] bananas. the guards have gone and will come back in h hours. koko can decide her bananas-per-hour eating speed of k. each hour, she chooses some pile of bananas and eats k bananas from that pile. if the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. return the minimum integer k such that she can eat all the bananas within h hours.
delete operation for two strings given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same. in one step, you can delete exactly one character in either string.
form smallest number from two digit arrays given two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.
remove covered intervals given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list. the interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d. return the number of remaining intervals.
bag of tokens you have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed). your goal is to maximize your total score by potentially playing each token in one of two ways: if your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score. if your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score. each token may be played at most once and in any order. you do not have to play all the tokens. return the largest possible score you can achieve after playing any number of tokens.
neighboring bitwise xor a 0-indexed array derived with length n is derived by computing the bitwise xor (⊕) of adjacent values in a binary array original of length n. specifically, for each index i in the range [0, n - 1]: if i = n - 1, then derived[i] = original[i] ⊕ original[0]. otherwise, derived[i] = original[i] ⊕ original[i + 1]. given an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived. return true if such an array exists or false otherwise. a binary array is an array containing only 0's and 1's
find and replace pattern given a list of strings words and a string pattern, return a list of words[i] that match pattern. you may return the answer in any order. a word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word. recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.
minimum degree of a connected trio in a graph you are given an undirected graph. you are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. a connected trio is a set of three nodes where there is an edge between every pair of them. the degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not. return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.
search a 2d matrix ii write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. this matrix has the following properties: integers in each row are sorted in ascending from left to right. integers in each column are sorted in ascending from top to bottom.
count vowel substrings of a string a substring is a contiguous (non-empty) sequence of characters within a string. a vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it. given a string word, return the number of vowel substrings in word.
robot bounded in circle on an infinite plane, a robot initially stands at (0, 0) and faces north. note that: the north direction is the positive direction of the y-axis. the south direction is the negative direction of the y-axis. the east direction is the positive direction of the x-axis. the west direction is the negative direction of the x-axis. the robot can receive one of three instructions: "g": go straight 1 unit. "l": turn 90 degrees to the left (i.e., anti-clockwise direction). "r": turn 90 degrees to the right (i.e., clockwise direction). the robot performs the instructions given in order, and repeats them forever. return true if and only if there exists a circle in the plane such that the robot never leaves the circle.
minimum number of increments on subarrays to form a target array you are given an integer array target. you have an integer array initial of the same size as target with all elements initially zeros. in one operation you can choose any subarray from initial and increment each value by one. return the minimum number of operations to form a target array from initial. the test cases are generated so that the answer fits in a 32-bit integer.
word search given an m x n grid of characters board and a string word, return true if word exists in the grid. the word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once.
third maximum number given an integer array nums, return the third distinct maximum number in this array. if the third maximum does not exist, return the maximum number.
longest absolute file path suppose we have a file system that stores both files and directories. an example of one system is represented in the following picture: here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext. in text form, it looks like this (with ⟶ representing the tab character): dir ⟶ subdir1 ⟶ ⟶ file1.ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶ ⟶ file2.ext if we were to write this representation in code, it will look like this: "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext". note that the '\n' and '\t' are the new-line and tab characters. every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. using the above example, the absolute path to file2.ext is "dir/subdir2/subsubdir2/file2.ext". each directory name consists of letters, digits, and/or spaces. each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces. given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. if there is no file in the system, return 0. note that the testcases are generated such that the file system is valid and no file or directory name has length 0.
maximum ice cream bars it is a sweltering summer day, and a boy wants to buy some ice cream bars. at the store, there are n ice cream bars. you are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. the boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. note: the boy can buy the ice cream bars in any order. return the maximum number of ice cream bars the boy can buy with coins coins. you must solve the problem by counting sort.
minimum cost of buying candies with discount a shop is selling candies at a discount. for every two candies sold, the shop gives a third candy for free. the customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought. for example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they can take the candy with cost 1 for free, but not the candy with cost 4. given a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.
maximum nesting depth of the parentheses a string is a valid parentheses string (denoted vps) if it meets one of the following: it is an empty string "", or a single character not equal to "(" or ")", it can be written as ab (a concatenated with b), where a and b are vps's, or it can be written as (a), where a is a vps. we can similarly define the nesting depth depth(s) of any vps s as follows: depth("") = 0 depth(c) = 0, where c is a string with a single character not equal to "(" or ")". depth(a + b) = max(depth(a), depth(b)), where a and b are vps's. depth("(" + a + ")") = 1 + depth(a), where a is a vps. for example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's. given a vps represented as string s, return the nesting depth of s.
find the highest altitude there is a biker going on a road trip. the road trip consists of n + 1 points at different altitudes. the biker starts his trip on point 0 with altitude equal 0. you are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). return the highest altitude of a point.
check if word equals summation of two words the letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.). the numerical value of some string of lowercase english letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer. for example, if s = "acb", we concatenate each letter's letter value, resulting in "021". after converting it, we get 21. you are given three strings firstword, secondword, and targetword, each consisting of lowercase english letters 'a' through 'j' inclusive. return true if the summation of the numerical values of firstword and secondword equals the numerical value of targetword, or false otherwise.
count collisions of monkeys on a polygon there is a regular convex polygon with n vertices. the vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. the following figure shows a convex polygon of 6 vertices. each monkey moves simultaneously to a neighboring vertex. a neighboring vertex for a vertex i can be: the vertex (i + 1) % n in the clockwise direction, or the vertex (i - 1 + n) % n in the counter-clockwise direction. a collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge. return the number of ways the monkeys can move so that at least one collision happens. since the answer may be very large, return it modulo 109 + 7. note that each monkey can only move once.
letter case permutation given a string s, you can transform every letter individually to be lowercase or uppercase to create another string. return a list of all possible strings we could create. return the output in any order.
design browser history you have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps. implement the browserhistory class: browserhistory(string homepage) initializes the object with the homepage of the browser. void visit(string url) visits url from the current page. it clears up all the forward history. string back(int steps) move steps back in history. if you can only return x steps in the history and steps > x, you will return only x steps. return the current url after moving back in history at most steps. string forward(int steps) move steps forward in history. if you can only forward x steps in the history and steps > x, you will forward only x steps. return the current url after forwarding in history at most steps. example: input: ["browserhistory","visit","visit","visit","back","back","forward","visit","forward","back","back"] [["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]] output: [null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"] explanation: browserhistory browserhistory = new browserhistory("leetcode.com"); browserhistory.visit("google.com"); // you are in "leetcode.com". visit "google.com" browserhistory.visit("facebook.com"); // you are in "google.com". visit "facebook.com" browserhistory.visit("youtube.com"); // you are in "facebook.com". visit "youtube.com" browserhistory.back(1); // you are in "youtube.com", move back to "facebook.com" return "facebook.com" browserhistory.back(1); // you are in "facebook.com", move back to "google.com" return "google.com" browserhistory.forward(1); // you are in "google.com", move forward to "facebook.com" return "facebook.com" browserhistory.visit("linkedin.com"); // you are in "facebook.com". visit "linkedin.com" browserhistory.forward(2); // you are in "linkedin.com", you cannot move forward any steps. browserhistory.back(2); // you are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com" browserhistory.back(7); // you are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com" constraints: 1 <= homepage.length <= 20 1 <= url.length <= 20 1 <= steps <= 100 homepage and url consist of '.' or lower case english letters. at most 5000 calls will be made to visit, back, and forward.
event emitter design an eventemitter class. this interface is similar (but with some differences) to the one found in node.js or the event target interface of the dom. the eventemitter should allow for subscribing to events and emitting them. your eventemitter class should have the following two methods: subscribe - this method takes in two arguments: the name of an event as a string and a callback function. this callback function will later be called when the event is emitted. an event should be able to have multiple listeners for the same event. when emitting an event with multiple callbacks, each should be called in the order in which they were subscribed. an array of results should be returned. you can assume no callbacks passed to subscribe are referentially identical. the subscribe method should also return an object with an unsubscribe method that enables the user to unsubscribe. when it is called, the callback should be removed from the list of subscriptions and undefined should be returned. emit - this method takes in two arguments: the name of an event as a string and an optional array of arguments that will be passed to the callback(s). if there are no callbacks subscribed to the given event, return an empty array. otherwise, return an array of the results of all callback calls in the order they were subscribed.
integer to english words convert a non-negative integer num to its english words representation.
bitwise xor of all pairings you are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. there exists another array, nums3, which contains the bitwise xor of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once). return the bitwise xor of all integers in nums3.
maximum total importance of roads you are given an integer n denoting the number of cities in a country. the cities are numbered from 0 to n - 1. you are also given a 2d integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi. you need to assign each city with an integer value from 1 to n, where each value can only be used once. the importance of a road is then defined as the sum of the values of the two cities it connects. return the maximum total importance of all roads possible after assigning the values optimally.
number of enclaves you are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. a move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.
check whether two strings are almost equivalent two strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3. given two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise. the frequency of a letter x is the number of times it occurs in the string.
smallest subsequence of distinct characters given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.
minimum time visiting all points on a 2d plane, there are n points with integer coordinates points[i] = [xi, yi]. return the minimum time in seconds to visit all the points in the order given by points. you can move according to these rules: in 1 second, you can either: move vertically by one unit, move horizontally by one unit, or move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second). you have to visit the points in the same order as they appear in the array. you are allowed to pass through points that appear later in the order, but these do not count as visits.
set mismatch you have a set of integers s, which originally contains all the numbers from 1 to n. unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number. you are given an integer array nums representing the data status of this set after the error. find the number that occurs twice and the number that is missing and return them in the form of an array.
lowest common ancestor of a binary tree given a binary tree, find the lowest common ancestor (lca) of two given nodes in the tree. according to the definition of lca on wikipedia: “the lowest common ancestor is defined between two nodes p and q as the lowest node in t that has both p and q as descendants (where we allow a node to be a descendant of itself).”
process tasks using servers you are given two 0-indexed integer arrays servers and tasks of lengths n and m respectively. servers[i] is the weight of the ith server, and tasks[j] is the time needed to process the jth task in seconds. tasks are assigned to the servers using a task queue. initially, all servers are free, and the queue is empty. at second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). as long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index. if there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. if multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above. a server that is assigned task j at second t will be free again at second t + tasks[j]. build an array ans of length m, where ans[j] is the index of the server the jth task will be assigned to. return the array ans.
insertion sort list given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head. the steps of the insertion sort algorithm: insertion sort iterates, consuming one input element each repetition and growing a sorted output list. at each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. it repeats until no input elements remain. the following is a graphical example of the insertion sort algorithm. the partially sorted list (black) initially contains only the first element in the list. one element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.
using a robot to print the lexicographically smallest string you are given a string s and a robot that currently holds an empty string t. apply one of the following operations until s and t are both empty: remove the first character of a string s and give it to the robot. the robot will append this character to the string t. remove the last character of a string t and give it to the robot. the robot will write this character on paper. return the lexicographically smallest string that can be written on the paper.
count integers in intervals given an empty set of intervals, implement a data structure that can: add an interval to the set of intervals. count the number of integers that are present in at least one interval. implement the countintervals class: countintervals() initializes the object with an empty set of intervals. void add(int left, int right) adds the interval [left, right] to the set of intervals. int count() returns the number of integers that are present in at least one interval. note that an interval [left, right] denotes all the integers x where left <= x <= right.
number of matching subsequences given a string s and an array of strings words, return the number of words[i] that is a subsequence of s. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, "ace" is a subsequence of "abcde".
count the number of vowel strings in range you are given a 0-indexed array of string words and two integers left and right. a string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'. return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].
two sum iv - input is a bst given the root of a binary search tree and an integer k, return true if there exist two elements in the bst such that their sum is equal to k, or false otherwise.
abbreviating the product of a range you are given two positive integers left and right with left <= right. calculate the product of all integers in the inclusive range [left, right]. since the product may be very large, you will abbreviate it following these steps: count all trailing zeros in the product and remove them. let us denote this count as c. for example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546. denote the remaining number of digits in the product as d. if d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. if d <= 10, we keep it unchanged. for example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567. finally, represent the product as a string "<pre>...<suf>ec". for example, 12345678987600000 will be represented as "12345...89876e5". return a string denoting the abbreviated product of all integers in the inclusive range [left, right].
shuffle an array given an integer array nums, design an algorithm to randomly shuffle the array. all permutations of the array should be equally likely as a result of the shuffling. implement the solution class: solution(int[] nums) initializes the object with the integer array nums. int[] reset() resets the array to its original configuration and returns it. int[] shuffle() returns a random shuffling of the array.
pseudo-palindromic paths in a binary tree given a binary tree where node values are digits from 1 to 9. a path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome. return the number of pseudo-palindromic paths going from the root node to leaf nodes.
find largest value in each tree row given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
partition to k equal sum subsets given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.
count nodes with the highest score there is a binary tree rooted at 0 consisting of n nodes. the nodes are labeled from 0 to n - 1. you are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. since node 0 is the root, parents[0] == -1. each node has a score. to find the score of a node, consider if the node and the edges connected to it were removed. the tree would become one or more non-empty subtrees. the size of a subtree is the number of the nodes in it. the score of the node is the product of the sizes of all those subtrees. return the number of nodes that have the highest score.
shortest palindrome you are given a string s. you can convert s to a palindrome by adding characters in front of it. return the shortest palindrome you can find by performing this transformation.
number of visible people in a queue there are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. you are given an array heights of distinct integers where heights[i] represents the height of the ith person. a person can see another person to their right in the queue if everybody in between is shorter than both of them. more formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]). return an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.
largest number at least twice of others you are given an integer array nums where the largest integer is unique. determine whether the largest element in the array is at least twice as much as every other number in the array. if it is, return the index of the largest element, or return -1 otherwise.
minimum insertion steps to make a string palindrome given a string s. in one step you can insert any character at any index of the string. return the minimum number of steps to make s palindrome. a palindrome string is one that reads the same backward as well as forward.
make the string great given a string s of lower and upper case english letters. a good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where: 0 <= i <= s.length - 2 s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa. to make the string good, you can choose two adjacent characters that make the string bad and remove them. you can keep doing this until the string becomes good. return the string after making it good. the answer is guaranteed to be unique under the given constraints. notice that an empty string is also good.
the number of the smallest unoccupied chair there is a party where n friends numbered from 0 to n - 1 are attending. there is an infinite number of chairs in this party that are numbered from 0 to infinity. when a friend arrives at the party, they sit on the unoccupied chair with the smallest number. for example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2. when a friend leaves the party, their chair becomes unoccupied at the moment they leave. if another friend arrives at that same moment, they can sit in that chair. you are given a 0-indexed 2d integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetfriend. all arrival times are distinct. return the chair number that the friend numbered targetfriend will sit on.
matrix block sum given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for: i - k <= r <= i + k, j - k <= c <= j + k, and (r, c) is a valid position in the matrix.
sort integers by the power value the power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps: if x is even then x = x / 2 if x is odd then x = 3 * x + 1 for example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1). given three integers lo, hi and k. the task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order. return the kth integer in the range [lo, hi] sorted by the power value. notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.
chalkboard xor game you are given an array of integers nums represents the numbers written on a chalkboard. alice and bob take turns erasing exactly one number from the chalkboard, with alice starting first. if erasing a number causes the bitwise xor of all the elements of the chalkboard to become 0, then that player loses. the bitwise xor of one element is that element itself, and the bitwise xor of no elements is 0. also, if any player starts their turn with the bitwise xor of all the elements of the chalkboard equal to 0, then that player wins. return true if and only if alice wins the game, assuming both players play optimally.
day of the week given a date, return the corresponding day of the week for that date. the input is given as three integers representing the day, month and year respectively. return the answer as one of the following values {"sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"}.
transpose file given a text file file.txt, transpose its content. you may assume that each row has the same number of columns, and each field is separated by the ' ' character. example: if file.txt has the following content: name age alice 21 ryan 30 output the following: name alice ryan age 21 30
number of ways to rearrange sticks with k sticks visible there are n uniquely-sized sticks whose lengths are integers from 1 to n. you want to arrange the sticks such that exactly k sticks are visible from the left. a stick is visible from the left if there are no longer sticks to the left of it. for example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left. given n and k, return the number of such arrangements. since the answer may be large, return it modulo 109 + 7.
repeated string match given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. if it is impossible for b to be a substring of a after repeating it, return -1. notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".
make array empty you are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty: if the first element has the smallest value, remove it otherwise, put the first element at the end of the array. return an integer denoting the number of operations it takes to make nums empty.
maximum enemy forts that can be captured you are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where: -1 represents there is no fort at the ith position. 0 indicates there is an enemy fort at the ith position. 1 indicates the fort at the ith the position is under your command. now you have decided to move your army from one of your forts at position i to an empty position j such that: 0 <= i, j <= n - 1 the army travels over enemy forts only. formally, for all k where min(i,j) < k < max(i,j), forts[k] == 0. while moving the army, all the enemy forts that come in the way are captured. return the maximum number of enemy forts that can be captured. in case it is impossible to move your army, or you do not have any fort under your command, return 0.
smallest integer divisible by k given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1. return the length of n. if there is no such n, return -1. note: n may not fit in a 64-bit signed integer.
sum of total strength of wizards as the ruler of a kingdom, you have an army of wizards at your command. you are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. for a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values: the strength of the weakest wizard in the group. the total of all the individual strengths of the wizards in the group. return the sum of the total strengths of all contiguous groups of wizards. since the answer may be very large, return it modulo 109 + 7. a subarray is a contiguous non-empty sequence of elements within an array.
sum of mutated array closest to target given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target. in case of a tie, return the minimum such integer. notice that the answer is not neccesarilly a number from arr.
design circular queue design your implementation of the circular queue. the circular queue is a linear data structure in which the operations are performed based on fifo (first in first out) principle, and the last position is connected back to the first position to make a circle. it is also called "ring buffer". one of the benefits of the circular queue is that we can make use of the spaces in front of the queue. in a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. but using the circular queue, we can use the space to store new values. implement the mycircularqueue class: mycircularqueue(k) initializes the object with the size of the queue to be k. int front() gets the front item from the queue. if the queue is empty, return -1. int rear() gets the last item from the queue. if the queue is empty, return -1. boolean enqueue(int value) inserts an element into the circular queue. return true if the operation is successful. boolean dequeue() deletes an element from the circular queue. return true if the operation is successful. boolean isempty() checks whether the circular queue is empty or not. boolean isfull() checks whether the circular queue is full or not. you must solve the problem without using the built-in queue data structure in your programming language.
making file names unique given an array of strings names of size n. you will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i]. since two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique. return an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.
average selling price sql schema table: prices +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | start_date | date | | end_date | date | | price | int | +---------------+---------+ (product_id, start_date, end_date) is the primary key for this table. each row of this table indicates the price of the product_id in the period from start_date to end_date. for each product_id there will be no two overlapping periods. that means there will be no two intersecting periods for the same product_id. table: unitssold +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | purchase_date | date | | units | int | +---------------+---------+ there is no primary key for this table, it may contain duplicates. each row of this table indicates the date, units, and product_id of each product sold. write an sql query to find the average selling price for each product. average_price should be rounded to 2 decimal places. return the result table in any order. the query result format is in the following example.
add two integers given two integers num1 and num2, return the sum of the two integers.
maximum binary string after change you are given a binary string binary consisting of only 0's or 1's. you can apply each of the following operations any number of times: operation 1: if the number contains the substring "00", you can replace it with "10". for example, "00010" -> "10010" operation 2: if the number contains the substring "10", you can replace it with "01". for example, "00010" -> "00001" return the maximum binary string you can obtain after any number of operations. binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.
find all groups of farmland you are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland. to keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. these rectangular areas are called groups. no two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group. land can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). find the coordinates of the top left and bottom right corner of each group of farmland. a group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2]. return a 2d array containing the 4-length arrays described above for each group of farmland in land. if there are no groups of farmland, return an empty array. you may return the answer in any order.
number of provinces there are n cities. some of them are connected, while some are not. if city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c. a province is a group of directly or indirectly connected cities and no other cities outside of the group. you are given an n x n matrix isconnected where isconnected[i][j] = 1 if the ith city and the jth city are directly connected, and isconnected[i][j] = 0 otherwise. return the total number of provinces.
stone game v there are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stonevalue. in each round of the game, alice divides the row into two non-empty rows (i.e. left row and right row), then bob calculates the value of each row which is the sum of the values of all the stones in this row. bob throws away the row which has the maximum value, and alice's score increases by the value of the remaining row. if the value of the two rows are equal, bob lets alice decide which row will be thrown away. the next round starts with the remaining row. the game ends when there is only one stone remaining. alice's is initially zero. return the maximum score that alice can obtain.
minimum absolute difference in bst given the root of a binary search tree (bst), return the minimum absolute difference between the values of any two different nodes in the tree.
best position for a service centre a delivery company wants to build a new service center in a new city. the company knows the positions of all the customers in this city on a 2d-map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum. given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers. in other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized: answers within 10-5 of the actual value will be accepted.
maximum sum of an hourglass you are given an m x n integer matrix grid. we define an hourglass as a part of the matrix with the following form: return the maximum sum of the elements of an hourglass. note that an hourglass cannot be rotated and must be entirely contained within the matrix.
count fertile pyramids in a land a farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. each cell is either fertile (represented by a 1) or barren (represented by a 0). all cells outside the grid are considered barren. a pyramidal plot of land can be defined as a set of cells with the following criteria: the number of cells in the set has to be greater than 1 and all cells must be fertile. the apex of a pyramid is the topmost cell of the pyramid. the height of a pyramid is the number of rows it covers. let (r, c) be the apex of the pyramid, and its height be h. then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r). an inverse pyramidal plot of land can be defined as a set of cells with similar criteria: the number of cells in the set has to be greater than 1 and all cells must be fertile. the apex of an inverse pyramid is the bottommost cell of the inverse pyramid. the height of an inverse pyramid is the number of rows it covers. let (r, c) be the apex of the pyramid, and its height be h. then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i). some examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. black cells indicate fertile cells. given a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.
minimum number of arrows to burst balloons there are some spherical balloons taped onto a flat wall that represents the xy-plane. the balloons are represented as a 2d integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. you do not know the exact y-coordinates of the balloons. arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. a balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. there is no limit to the number of arrows that can be shot. a shot arrow keeps traveling up infinitely, bursting any balloons in its path. given the array points, return the minimum number of arrows that must be shot to burst all balloons.
super egg drop you are given k identical eggs and you have access to a building with n floors labeled from 1 to n. you know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves. return the minimum number of moves that you need to determine with certainty what the value of f is.
find positive integer solution for a given equation given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. you may return the pairs in any order. while the exact formula is hidden, the function is monotonically increasing, i.e.: f(x, y) < f(x + 1, y) f(x, y) < f(x, y + 1) the function interface is defined like this: interface customfunction { public: // returns some positive integer f(x, y) for two positive integers x and y based on a formula. int f(int x, int y); }; we will judge your solution as follows: the judge has a list of 9 hidden implementations of customfunction, along with a way to generate an answer key of all valid pairs for a specific z. the judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z. the judge will call your findsolution and compare your results with the answer key. if your results match the answer key, your solution will be accepted.
frog jump a frog is crossing a river. the river is divided into some number of units, and at each unit, there may or may not exist a stone. the frog can jump on a stone, but it must not jump into the water. given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. initially, the frog is on the first stone and assumes the first jump must be 1 unit. if the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. the frog can only jump in the forward direction.
minimum hours of training to win a competition you are entering a competition, and are given two positive integers initialenergy and initialexperience denoting your initial energy and initial experience respectively. you are also given two 0-indexed integer arrays energy and experience, both of length n. you will face n opponents in order. the energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. when you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available. defeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i]. before starting the competition, you can train for some number of hours. after each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one. return the minimum number of training hours required to defeat all n opponents.
n-ary tree level order traversal given an n-ary tree, return the level order traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).
queries on a permutation with key given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules: in the beginning, you have the permutation p=[1,2,3,...,m]. for the current i, find the position of queries[i] in the permutation p (indexing from 0) and then move this at the beginning of the permutation p. notice that the position of queries[i] in p is the result for queries[i]. return an array containing the result for the given queries.
find minimum in rotated sorted array ii suppose an array of length n sorted in ascending order is rotated between 1 and n times. for example, the array nums = [0,1,4,4,5,6,7] might become: [4,5,6,7,0,1,4] if it was rotated 4 times. [0,1,4,4,5,6,7] if it was rotated 7 times. notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. given the sorted rotated array nums that may contain duplicates, return the minimum element of this array. you must decrease the overall operation steps as much as possible.
count asterisks you are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. in other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth. return the number of '*' in s, excluding the '*' between each pair of '|'. note that each '|' will belong to exactly one pair.
find the array concatenation value you are given a 0-indexed integer array nums. the concatenation of two numbers is the number formed by concatenating their numerals. for example, the concatenation of 15, 49 is 1549. the concatenation value of nums is initially equal to 0. perform this operation until nums becomes empty: if there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums. if one element exists, add its value to the concatenation value of nums, then delete it. return the concatenation value of the nums.
maximum white tiles covered by a carpet you are given a 2d integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white. you are also given an integer carpetlen, the length of a single carpet that can be placed anywhere. return the maximum number of white tiles that can be covered by the carpet.
number of equivalent domino pairs given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino. return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].
department top three salaries sql schema table: employee +--------------+---------+ | column name | type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentid | int | +--------------+---------+ id is the primary key column for this table. departmentid is a foreign key of the id from the department table. each row of this table indicates the id, name, and salary of an employee. it also contains the id of their department. table: department +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id of a department and its name. a company's executives are interested in seeing who earns the most money in each of the company's departments. a high earner in a department is an employee who has a salary in the top three unique salaries for that department. write an sql query to find the employees who are high earners in each of the departments. return the result table in any order. the query result format is in the following example.
find the winner of the circular game there are n friends that are playing a game. the friends are sitting in a circle and are numbered from 1 to n in clockwise order. more formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend. the rules of the game are as follows: start at the 1st friend. count the next k friends in the clockwise direction including the friend you started at. the counting wraps around the circle and may count some friends more than once. the last friend you counted leaves the circle and loses the game. if there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat. else, the last friend in the circle wins the game. given the number of friends, n, and an integer k, return the winner of the game.
replace elements with greatest element on right side given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. after doing so, return the array.
number of lines to write string you are given a string s of lowercase english letters and an array widths denoting how many pixels wide each lowercase english letter is. specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on. you are trying to write s across several lines, where each line is no longer than 100 pixels. starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. then, from where you stopped in s, continue writing as many letters as you can on the second line. continue this process until you have written all of s. return an array result of length 2 where: result[0] is the total number of lines. result[1] is the width of the last line in pixels.
length of longest fibonacci subsequence a sequence x1, x2, ..., xn is fibonacci-like if: n >= 3 xi + xi+1 == xi+2 for all i + 2 <= n given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest fibonacci-like subsequence of arr. if one does not exist, return 0. a subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. for example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].
number of smooth descent periods of a stock you are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day. a smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. the first day of the period is exempted from this rule. return the number of smooth descent periods.
check if number is a sum of powers of three given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. otherwise, return false. an integer y is a power of three if there exists an integer x such that y == 3x.
minimum cost homecoming of a robot in a grid there is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. you are given an integer array startpos where startpos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). you are also given an integer array homepos where homepos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol). the robot needs to go to its home. it can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. every move incurs some cost. you are further given two 0-indexed integer arrays: rowcosts of length m and colcosts of length n. if the robot moves up or down into a cell whose row is r, then this move costs rowcosts[r]. if the robot moves left or right into a cell whose column is c, then this move costs colcosts[c]. return the minimum total cost for this robot to return home.
circular array loop you are playing a game involving a circular array of non-zero integers nums. each nums[i] denotes the number of indices forward/backward you must move if you are located at index i: if nums[i] is positive, move nums[i] steps forward, and if nums[i] is negative, move nums[i] steps backward. since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. a cycle in the array consists of a sequence of indices seq of length k where: following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ... every nums[seq[j]] is either all positive or all negative. k > 1 return true if there is a cycle in nums, or false otherwise.
unique number of occurrences given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.
reverse string write a function that reverses a string. the input string is given as an array of characters s. you must do this by modifying the input array in-place with o(1) extra memory.
managers with at least 5 direct reports sql schema table: employee +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | | department | varchar | | managerid | int | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the name of an employee, their department, and the id of their manager. if managerid is null, then the employee does not have a manager. no employee will be the manager of themself. write an sql query to report the managers with at least five direct reports. return the result table in any order. the query result format is in the following example.
disconnect path in a binary matrix by at most one flip you are given a 0-indexed m x n binary matrix grid. you can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1. the matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1). you can flip the value of at most one (possibly none) cell. you cannot flip the cells (0, 0) and (m - 1, n - 1). return true if it is possible to make the matrix disconnect or false otherwise. note that flipping a cell changes its value from 0 to 1 or from 1 to 0.
combination sum iv given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target. the test cases are generated so that the answer can fit in a 32-bit integer.
maximum number of ways to partition an array you are given a 0-indexed integer array nums of length n. the number of ways to partition nums is the number of pivot indices that satisfy both conditions: 1 <= pivot < n nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1] you are also given an integer k. you can choose to change the value of one element of nums to k, or to leave the array unchanged. return the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.
first bad version you are a product manager and currently leading a team to develop a new product. unfortunately, the latest version of your product fails the quality check. since each version is developed based on the previous version, all the versions after a bad version are also bad. suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad. you are given an api bool isbadversion(version) which returns whether version is bad. implement a function to find the first bad version. you should minimize the number of calls to the api.
count subarrays with fixed bounds you are given an integer array nums and two integers mink and maxk. a fixed-bound subarray of nums is a subarray that satisfies the following conditions: the minimum value in the subarray is equal to mink. the maximum value in the subarray is equal to maxk. return the number of fixed-bound subarrays. a subarray is a contiguous part of an array.
number of subsequences that satisfy the given sum condition you are given an array of integers nums and an integer target. return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. since the answer may be too large, return it modulo 109 + 7.
most profitable path in a tree there is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. you are given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. at every node i, there is a gate. you are also given an array of even integers amount, where amount[i] represents: the price needed to open the gate at node i, if amount[i] is negative, or, the cash reward obtained on opening the gate at node i, otherwise. the game goes on as follows: initially, alice is at node 0 and bob is at node bob. at every second, alice and bob each move to an adjacent node. alice moves towards some leaf node, while bob moves towards node 0. for every node along their path, alice and bob either spend money to open the gate at that node, or accept the reward. note that: if the gate is already open, no price will be required, nor will there be any cash reward. if alice and bob reach the node simultaneously, they share the price/reward for opening the gate there. in other words, if the price to open the gate is c, then both alice and bob pay c / 2 each. similarly, if the reward at the gate is c, both of them receive c / 2 each. if alice reaches a leaf node, she stops moving. similarly, if bob reaches node 0, he stops moving. note that these events are independent of each other. return the maximum net income alice can have if she travels towards the optimal leaf node.
maximum element after decreasing and rearranging you are given an array of positive integers arr. perform some operations (possibly none) on arr so that it satisfies these conditions: the value of the first element in arr must be 1. the absolute difference between any 2 adjacent elements must be less than or equal to 1. in other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x. there are 2 types of operations that you can perform any number of times: decrease the value of any element of arr to a smaller positive integer. rearrange the elements of arr to be in any order. return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.
maximum number of pairs in array you are given a 0-indexed integer array nums. in one operation, you may do the following: choose two integers in nums that are equal. remove both integers from nums, forming a pair. the operation is done on nums as many times as possible. return a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.
create target array in the given order given two arrays of integers nums and index. your task is to create target array under the following rules: initially target array is empty. from left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array. repeat the previous step until there are no elements to read in nums and index. return the target array. it is guaranteed that the insertion operations will be valid.
longest common prefix write a function to find the longest common prefix string amongst an array of strings. if there is no common prefix, return an empty string "".
ugly number ii an ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. given an integer n, return the nth ugly number.
number of good leaf nodes pairs you are given the root of a binary tree and an integer distance. a pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance. return the number of good leaf node pairs in the tree.
friends of appropriate ages there are n persons on a social media website. you are given an integer array ages where ages[i] is the age of the ith person. a person x will not send a friend request to a person y (x != y) if any of the following conditions is true: age[y] <= 0.5 * age[x] + 7 age[y] > age[x] age[y] > 100 && age[x] < 100 otherwise, x will send a friend request to y. note that if x sends a request to y, y will not necessarily send a request to x. also, a person will not send a friend request to themself. return the total number of friend requests made.
find all k-distant indices in an array you are given a 0-indexed integer array nums and two integers key and k. a k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key. return a list of all k-distant indices sorted in increasing order.
throttle given a function fn and a time in milliseconds t, return a throttled version of that function. a throttled function is first called without delay and then, for a time interval of t milliseconds, can't be executed but should store the latest function arguments provided to call fn with them after the end of the delay. for instance, t = 50ms, and the function was called at 30ms, 40ms, and 60ms. the first function call would block calling functions for the following t milliseconds. the second function call would save arguments, and the third call arguments should overwrite currently stored arguments from the second call because the second and third calls are called before 80ms. once the delay has passed, the throttled function should be called with the latest arguments provided during the delay period, and it should also create another delay period of 80ms + t. the above diagram shows how throttle will transform events. each rectangle represents 100ms and the throttle time is 400ms. each color represents a different set of inputs.
step-by-step directions from a binary tree node to another you are given the root of a binary tree with n nodes. each node is uniquely assigned a value from 1 to n. you are also given an integer startvalue representing the value of the start node s, and a different integer destvalue representing the value of the destination node t. find the shortest path starting from node s and ending at node t. generate step-by-step directions of such path as a string consisting of only the uppercase letters 'l', 'r', and 'u'. each letter indicates a specific direction: 'l' means to go from a node to its left child node. 'r' means to go from a node to its right child node. 'u' means to go from a node to its parent node. return the step-by-step directions of the shortest path from node s to node t.
k-concatenation maximum sum given an integer array arr and an integer k, modify the array by repeating it k times. for example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2]. return the maximum sub-array sum in the modified array. note that the length of the sub-array can be 0 and its sum in that case is 0. as the answer can be very large, return the answer modulo 109 + 7.
decrease elements to make array zigzag given an array nums of integers, a move consists of choosing any element and decreasing it by 1. an array a is a zigzag array if either: every even-indexed element is greater than adjacent elements, ie. a[0] > a[1] < a[2] > a[3] < a[4] > ... or, every odd-indexed element is greater than adjacent elements, ie. a[0] < a[1] > a[2] < a[3] > a[4] < ... return the minimum number of moves to transform the given array nums into a zigzag array.
find the punishment number of an integer given a positive integer n, return the punishment number of n. the punishment number of n is defined as the sum of the squares of all integers i such that: 1 <= i <= n the decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.
count subarrays with score less than k the score of an array is defined as the product of its sum and its length. for example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75. given a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k. a subarray is a contiguous sequence of elements within an array.
find customer referee sql schema table: customer +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | | referee_id | int | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id of a customer, their name, and the id of the customer who referred them. write an sql query to report the names of the customer that are not referred by the customer with id = 2. return the result table in any order. the query result format is in the following example.
sum in a matrix you are given a 0-indexed 2d integer array nums. initially, your score is 0. perform the following operations until the matrix becomes empty: from each row in the matrix, select the largest number and remove it. in the case of a tie, it does not matter which number is chosen. identify the highest number amongst all those removed in step 1. add that number to your score. return the final score.
image smoother an image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). if one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother). given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.
find minimum time to finish all jobs you are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job. there are k workers that you can assign jobs to. each job should be assigned to exactly one worker. the working time of a worker is the sum of the time it takes to complete all jobs assigned to them. your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized. return the minimum possible maximum working time of any assignment.
counting bits given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.
maximum number of groups getting fresh donuts there is a donuts shop that bakes donuts in batches of batchsize. they have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. you are given an integer batchsize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. each customer will get exactly one donut. when a group visits the shop, all customers of the group must be served before serving any of the following groups. a group will be happy if they all get fresh donuts. that is, the first customer of the group does not receive a donut that was left over from the previous group. you can freely rearrange the ordering of the groups. return the maximum possible number of happy groups after rearranging the groups.
search in rotated sorted array there is an integer array nums sorted in ascending order (with distinct values). prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). for example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. you must write an algorithm with o(log n) runtime complexity.
minimum penalty for a shop you are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'n' and 'y': if the ith character is 'y', it means that customers come at the ith hour whereas 'n' indicates that no customers come at the ith hour. if the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows: for every hour when the shop is open and no customers come, the penalty increases by 1. for every hour when the shop is closed and customers come, the penalty increases by 1. return the earliest hour at which the shop must be closed to incur a minimum penalty. note that if a shop closes at the jth hour, it means the shop is closed at the hour j.
fizz buzz given an integer n, return a string array answer (1-indexed) where: answer[i] == "fizzbuzz" if i is divisible by 3 and 5. answer[i] == "fizz" if i is divisible by 3. answer[i] == "buzz" if i is divisible by 5. answer[i] == i (as a string) if none of the above conditions are true.
guess the word you are given an array of unique strings words where words[i] is six letters long. one word of words was chosen as a secret word. you are also given the helper object master. you may call master.guess(word) where word is a six-letter-long string, and it must be from words. master.guess(word) returns: -1 if word is not from words, or an integer representing the number of exact matches (value and position) of your guess to the secret word. there is a parameter allowedguesses for each test case where allowedguesses is the maximum number of times you can call master.guess(word). for each test case, you should call master.guess with the secret word without exceeding the maximum number of allowed guesses. you will get: "either you took too many guesses, or you did not find the secret word." if you called master.guess more than allowedguesses times or if you did not call master.guess with the secret word, or "you guessed the secret word correctly." if you called master.guess with the secret word with the number of calls to master.guess less than or equal to allowedguesses. the test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).
count unguarded cells in the grid you are given two integers m and n representing a 0-indexed m x n grid. you are also given two 2d integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively. a guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. a cell is guarded if there is at least one guard that can see it. return the number of unoccupied cells that are not guarded.
describe the painting there is a long and thin painting that can be represented by a number line. the painting was painted with multiple overlapping segments where each segment was painted with a unique color. you are given a 2d integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color. the colors in the overlapping segments of the painting were mixed when it was painted. when two or more colors mix, they form a new color that can be represented as a set of mixed colors. for example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}. for the sake of simplicity, you should only output the sum of the elements in the set rather than the full set. you want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. these segments can be represented by the 2d array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj. for example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because: [1,4) is colored {5,7} (with a sum of 12) from both the first and second segments. [4,7) is colored {7} from only the second segment. return the 2d array painting describing the finished painting (excluding any parts that are not painted). you may return the segments in any order. a half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.
course schedule iii there are n different online courses numbered from 1 to n. you are given an array courses where courses[i] = [durationi, lastdayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastdayi. you will start on the 1st day and you cannot take two or more courses simultaneously. return the maximum number of courses that you can take.
convert binary number in a linked list to integer given head which is a reference node to a singly-linked list. the value of each node in the linked list is either 0 or 1. the linked list holds the binary representation of a number. return the decimal value of the number in the linked list. the most significant bit is at the head of the linked list.
sum of numbers with units digit k given two integers num and k, consider a set of positive integers with the following properties: the units digit of each integer is k. the sum of the integers is num. return the minimum possible size of such a set, or -1 if no such set exists. note: the set can contain multiple instances of the same integer, and the sum of an empty set is considered 0. the units digit of a number is the rightmost digit of the number.
count special integers we call a positive integer special if all of its digits are distinct. given a positive integer n, return the number of special integers that belong to the interval [1, n].
number of nodes in the sub-tree with the same label you are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. the root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. the node with the number i has the label labels[i]). the edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree. return an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i. a subtree of a tree t is the tree consisting of a node in t and all of its descendant nodes.
construct the lexicographically largest valid sequence given an integer n, find a sequence that satisfies all of the following: the integer 1 occurs once in the sequence. each integer between 2 and n occurs twice in the sequence. for every integer i between 2 and n, the distance between the two occurrences of i is exactly i. the distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|. return the lexicographically largest sequence. it is guaranteed that under the given constraints, there is always a solution. a sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. for example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.
lucky numbers in a matrix given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order. a lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.
find closest node to given two nodes you are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge. the graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. if there is no outgoing edge from i, then edges[i] == -1. you are also given two integers node1 and node2. return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. if there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1. note that edges may contain cycles.
divide intervals into minimum number of groups you are given a 2d integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti]. you have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other. return the minimum number of groups you need to make. two intervals intersect if there is at least one common number between them. for example, the intervals [1, 5] and [5, 8] intersect.
minimum cost to cut a stick given a wooden stick of length n units. the stick is labelled from 0 to n. for example, a stick of length 6 is labelled as follows: given an integer array cuts where cuts[i] denotes a position you should perform a cut at. you should perform the cuts in order, you can change the order of the cuts as you wish. the cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. when you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). please refer to the first example for a better explanation. return the minimum total cost of the cuts.
execution of all suffix instructions staying in a grid there is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). you are given the integer n and an integer array startpos where startpos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol). you are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'l' (move left), 'r' (move right), 'u' (move up), and 'd' (move down). the robot can begin executing from any ith instruction in s. it executes the instructions one by one towards the end of s but it stops if either of these conditions is met: the next instruction will move the robot off the grid. there are no more instructions left to execute. return an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.
count number of bad pairs you are given a 0-indexed integer array nums. a pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. return the total number of bad pairs in nums.
capacity to ship packages within d days a conveyor belt has packages that must be shipped from one port to another within days days. the ith package on the conveyor belt has a weight of weights[i]. each day, we load the ship with packages on the conveyor belt (in the order given by weights). we may not load more weight than the maximum weight capacity of the ship. return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.
all nodes distance k in binary tree given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node. you can return the answer in any order.
grid game you are given a 0-indexed 2d array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. two robots are playing a game on this matrix. both robots initially start at (0, 0) and want to reach (1, n-1). each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)). at the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. for all cells (r, c) traversed on the path, grid[r][c] is set to 0. then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. note that their paths may intersect with one another. the first robot wants to minimize the number of points collected by the second robot. in contrast, the second robot wants to maximize the number of points it collects. if both robots play optimally, return the number of points collected by the second robot.
3sum with multiplicity given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target. as the answer can be very large, return it modulo 109 + 7.
minimum absolute difference given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements. return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows a, b are from arr a < b b - a equals to the minimum absolute difference of any two elements in arr
design an ordered stream there is a stream of n (idkey, value) pairs arriving in an arbitrary order, where idkey is an integer between 1 and n and value is a string. no two pairs have the same id. design a stream that returns the values in increasing order of their ids by returning a chunk (list) of values after each insertion. the concatenation of all the chunks should result in a list of the sorted values. implement the orderedstream class: orderedstream(int n) constructs the stream to take n values. string[] insert(int idkey, string value) inserts the pair (idkey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order. example: input ["orderedstream", "insert", "insert", "insert", "insert", "insert"] [[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]] output [null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]] explanation // note that the values ordered by id is ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"]. orderedstream os = new orderedstream(5); os.insert(3, "ccccc"); // inserts (3, "ccccc"), returns []. os.insert(1, "aaaaa"); // inserts (1, "aaaaa"), returns ["aaaaa"]. os.insert(2, "bbbbb"); // inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"]. os.insert(5, "eeeee"); // inserts (5, "eeeee"), returns []. os.insert(4, "ddddd"); // inserts (4, "ddddd"), returns ["ddddd", "eeeee"]. // concatentating all the chunks returned: // [] + ["aaaaa"] + ["bbbbb", "ccccc"] + [] + ["ddddd", "eeeee"] = ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"] // the resulting order is the same as the order above. constraints: 1 <= n <= 1000 1 <= id <= n value.length == 5 value consists only of lowercase letters. each call to insert will have a unique id. exactly n calls will be made to insert.
flower planting with no adjacent you have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. in each garden, you want to plant one of 4 types of flowers. all gardens have at most 3 paths coming into or leaving it. your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers. return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. the flower types are denoted 1, 2, 3, or 4. it is guaranteed an answer exists.
decode xored array there is a hidden integer array arr that consists of n non-negative integers. it was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] xor arr[i + 1]. for example, if arr = [1,0,2,1], then encoded = [1,2,3]. you are given the encoded array. you are also given an integer first, that is the first element of arr, i.e. arr[0]. return the original array arr. it can be proved that the answer exists and is unique.
roman to integer roman numerals are represented by seven different symbols: i, v, x, l, c, d and m. symbol value i 1 v 5 x 10 l 50 c 100 d 500 m 1000 for example, 2 is written as ii in roman numeral, just two ones added together. 12 is written as xii, which is simply x + ii. the number 27 is written as xxvii, which is xx + v + ii. roman numerals are usually written largest to smallest from left to right. however, the numeral for four is not iiii. instead, the number four is written as iv. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as ix. there are six instances where subtraction is used: i can be placed before v (5) and x (10) to make 4 and 9. x can be placed before l (50) and c (100) to make 40 and 90. c can be placed before d (500) and m (1000) to make 400 and 900. given a roman numeral, convert it to an integer.
largest rectangle in histogram given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.
shortest distance to a character given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s. the distance between two indices i and j is abs(i - j), where abs is the absolute value function.
number of adjacent elements with the same color there is a 0-indexed array nums of length n. initially, all elements are uncolored (has a value of 0). you are given a 2d integer array queries where queries[i] = [indexi, colori]. for each query, you color the index indexi with the color colori in the array nums. return an array answer of the same length as queries where answer[i] is the number of adjacent elements with the same color after the ith query. more formally, answer[i] is the number of indices j, such that 0 <= j < n - 1 and nums[j] == nums[j + 1] and nums[j] != 0 after the ith query.
reverse bits reverse bits of a given 32 bits unsigned integer. note: note that in some languages, such as java, there is no unsigned integer type. in this case, both input and output will be given as a signed integer type. they should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. in java, the compiler represents the signed integers using 2's complement notation. therefore, in example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
maximum value after insertion you are given a very large integer n, represented as a string, and an integer digit x. the digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number. you want to maximize n's numerical value by inserting x anywhere in the decimal representation of n. you cannot insert x to the left of the negative sign. for example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763. if n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255. return a string representing the maximum value of n after the insertion.
maximum product difference between two pairs the product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d). for example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16. given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized. return the maximum such product difference.
max difference you can get from changing an integer you are given an integer num. you will apply the following steps exactly two times: pick a digit x (0 <= x <= 9). pick another digit y (0 <= y <= 9). the digit y can be equal to x. replace all the occurrences of x in the decimal representation of num by y. the new integer cannot have any leading zeros, also the new integer cannot be 0. let a and b be the results of applying the operations to num the first and second times, respectively. return the max difference between a and b.
filter restaurants by vegan-friendly, price and distance given the array restaurants where restaurants[i] = [idi, ratingi, veganfriendlyi, pricei, distancei]. you have to filter the restaurants using three filters. the veganfriendly filter will be either true (meaning you should only include restaurants with veganfriendlyi set to true) or false (meaning you can include any restaurant). in addition, you have the filters maxprice and maxdistance which are the maximum value for price and distance of restaurants you should consider respectively. return the array of restaurant ids after filtering, ordered by rating from highest to lowest. for restaurants with the same rating, order them by id from highest to lowest. for simplicity veganfriendlyi and veganfriendly take value 1 when it is true, and 0 when it is false.
count negative numbers in a sorted matrix given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.
pass the pillow there are n people standing in a line labeled from 1 to n. the first person in the line is holding a pillow initially. every second, the person holding the pillow passes it to the next person standing in the line. once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction. for example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on. given the two positive integers n and time, return the index of the person holding the pillow after time seconds.
number of islands given an m x n 2d binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. an island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. you may assume all four edges of the grid are all surrounded by water.
count sub islands you are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). an island is a group of 1's connected 4-directionally (horizontal or vertical). any cells outside of the grid are considered water cells. an island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2. return the number of islands in grid2 that are considered sub-islands.
reconstruct itinerary you are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. reconstruct the itinerary in order and return it. all of the tickets belong to a man who departs from "jfk", thus, the itinerary must begin with "jfk". if there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. for example, the itinerary ["jfk", "lga"] has a smaller lexical order than ["jfk", "lgb"]. you may assume all tickets form at least one valid itinerary. you must use all the tickets once and only once.
validate binary search tree given the root of a binary tree, determine if it is a valid binary search tree (bst). a valid bst is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees.
patching array given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array. return the minimum number of patches required.
probability of a two boxes having the same number of distinct balls given 2n balls of k distinct colors. you will be given an integer array balls of size k where balls[i] is the number of balls of color i. all the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (please read the explanation of the second example carefully). please note that the two boxes are considered different. for example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (please read the explanation of the first example carefully). return the probability that the two boxes have the same number of distinct balls. answers within 10-5 of the actual value will be accepted as correct.
minimum remove to make valid parentheses given a string s of '(' , ')' and lowercase english characters. your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string. formally, a parentheses string is valid if and only if: it is the empty string, contains only lowercase characters, or it can be written as ab (a concatenated with b), where a and b are valid strings, or it can be written as (a), where a is a valid string.
number of ways to reach a position after exactly k steps you are given two positive integers startpos and endpos. initially, you are standing at position startpos on an infinite number line. with one step, you can move either one position to the left, or one position to the right. given a positive integer k, return the number of different ways to reach the position endpos starting from startpos, such that you perform exactly k steps. since the answer may be very large, return it modulo 109 + 7. two ways are considered different if the order of the steps made is not exactly the same. note that the number line includes negative integers.
rank transform of a matrix given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col]. the rank is an integer that represents how large an element is compared to other elements. it is calculated using the following rules: the rank is an integer starting from 1. if two elements p and q are in the same row or column, then: if p < q then rank(p) < rank(q) if p == q then rank(p) == rank(q) if p > q then rank(p) > rank(q) the rank should be as small as possible. the test cases are generated so that answer is unique under the given rules.
find the k-sum of an array you are given an integer array nums and a positive integer k. you can choose any subsequence of the array and sum all of its elements together. we define the k-sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct). return the k-sum of the array. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. note that the empty subsequence is considered to have a sum of 0.
minimize xor given two positive integers num1 and num2, find the positive integer x such that: x has the same number of set bits as num2, and the value x xor num1 is minimal. note that xor is the bitwise xor operation. return the integer x. the test cases are generated such that x is uniquely determined. the number of set bits of an integer is the number of 1's in its binary representation.
get biggest three rhombus sums in a grid you are given an m x n integer matrix grid. a rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid. the rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum: note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner. return the biggest three distinct rhombus sums in the grid in descending order. if there are less than three distinct values, return all of them.
sell diminishing-valued colored balls you have an inventory of different colored balls, and there is a customer that wants orders balls of any color. the customer weirdly values the colored balls. each colored ball's value is the number of balls of that color you currently have in your inventory. for example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. after the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer). you are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. you are also given an integer orders, which represents the total number of balls that the customer wants. you can sell the balls in any order. return the maximum total value that you can attain after selling orders colored balls. as the answer may be too large, return it modulo 109 + 7.
maximum ascending subarray sum given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums. a subarray is defined as a contiguous sequence of numbers in an array. a subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. note that a subarray of size 1 is ascending.
maximum profit in job scheduling we have n jobs, where every job is scheduled to be done from starttime[i] to endtime[i], obtaining a profit of profit[i]. you're given the starttime, endtime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range. if you choose a job that ends at time x you will be able to start another job that starts at time x.
minimum cost to make at least one valid path in a grid given an m x n grid. each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. the sign of grid[i][j] can be: 1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1]) 2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1]) 3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j]) 4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j]) notice that there could be some signs on the cells of the grid that point outside the grid. you will initially start at the upper left cell (0, 0). a valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. the valid path does not have to be the shortest. you can modify the sign on a cell with cost = 1. you can modify the sign on a cell one time only. return the minimum cost to make the grid have at least one valid path.
snapshot array implement a snapshotarray that supports the following interface: snapshotarray(int length) initializes an array-like data structure with the given length. initially, each element equals 0. void set(index, val) sets the element at the given index to be equal to val. int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1. int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
not boring movies sql schema table: cinema +----------------+----------+ | column name | type | +----------------+----------+ | id | int | | movie | varchar | | description | varchar | | rating | float | +----------------+----------+ id is the primary key for this table. each row contains information about the name of a movie, its genre, and its rating. rating is a 2 decimal places float in the range [0, 10] write an sql query to report the movies with an odd-numbered id and a description that is not "boring". return the result table ordered by rating in descending order. the query result format is in the following example.
baseball game you are keeping the scores for a baseball game with strange rules. at the beginning of the game, you start with an empty record. you are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following: an integer x. record a new score of x. '+'. record a new score that is the sum of the previous two scores. 'd'. record a new score that is the double of the previous score. 'c'. invalidate the previous score, removing it from the record. return the sum of all the scores on the record after applying all the operations. the test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.
minimum one bit operations to make integers zero given an integer n, you must transform it into 0 using the following operations any number of times: change the rightmost (0th) bit in the binary representation of n. change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0. return the minimum number of operations to transform n into 0.
product of the last k numbers design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream. implement the productofnumbers class: productofnumbers() initializes the object with an empty stream. void add(int num) appends the integer num to the stream. int getproduct(int k) returns the product of the last k numbers in the current list. you can assume that always the current list has at least k numbers. the test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing. example: input ["productofnumbers","add","add","add","add","add","getproduct","getproduct","getproduct","add","getproduct"] [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]] output [null,null,null,null,null,null,20,40,0,null,32] explanation productofnumbers productofnumbers = new productofnumbers(); productofnumbers.add(3); // [3] productofnumbers.add(0); // [3,0] productofnumbers.add(2); // [3,0,2] productofnumbers.add(5); // [3,0,2,5] productofnumbers.add(4); // [3,0,2,5,4] productofnumbers.getproduct(2); // return 20. the product of the last 2 numbers is 5 * 4 = 20 productofnumbers.getproduct(3); // return 40. the product of the last 3 numbers is 2 * 5 * 4 = 40 productofnumbers.getproduct(4); // return 0. the product of the last 4 numbers is 0 * 2 * 5 * 4 = 0 productofnumbers.add(8); // [3,0,2,5,4,8] productofnumbers.getproduct(2); // return 32. the product of the last 2 numbers is 4 * 8 = 32 constraints: 0 <= num <= 100 1 <= k <= 4 * 104 at most 4 * 104 calls will be made to add and getproduct. the product of the stream at any point in time will fit in a 32-bit integer.
brace expansion ii under the grammar given below, strings can represent a set of lowercase words. let r(expr) denote the set of words the expression represents. the grammar can best be understood through simple examples: single letters represent a singleton set containing that word. r("a") = {"a"} r("w") = {"w"} when we take a comma-delimited list of two or more expressions, we take the union of possibilities. r("{a,b,c}") = {"a","b","c"} r("{{a,b},{b,c}}") = {"a","b","c"} (notice the final set only contains each word at most once) when we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. r("{a,b}{c,d}") = {"ac","ad","bc","bd"} r("a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"} formally, the three rules for our grammar: for every lowercase letter x, we have r(x) = {x}. for expressions e1, e2, ... , ek with k >= 2, we have r({e1, e2, ...}) = r(e1) ∪ r(e2) ∪ ... for expressions e1 and e2, we have r(e1 + e2) = {a + b for (a, b) in r(e1) × r(e2)}, where + denotes concatenation, and × denotes the cartesian product. given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.
percentage of users attended a contest sql schema table: users +-------------+---------+ | column name | type | +-------------+---------+ | user_id | int | | user_name | varchar | +-------------+---------+ user_id is the primary key for this table. each row of this table contains the name and the id of a user. table: register +-------------+---------+ | column name | type | +-------------+---------+ | contest_id | int | | user_id | int | +-------------+---------+ (contest_id, user_id) is the primary key for this table. each row of this table contains the id of a user and the contest they registered into. write an sql query to find the percentage of the users registered in each contest rounded to two decimals. return the result table ordered by percentage in descending order. in case of a tie, order it by contest_id in ascending order. the query result format is in the following example.
longest path with different adjacent characters you are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. the tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. since node 0 is the root, parent[0] == -1. you are also given a string s of length n, where s[i] is the character assigned to node i. return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.
additive number an additive number is a string whose digits can form an additive sequence. a valid additive sequence should contain at least three numbers. except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. given a string containing only digits, return true if it is an additive number or false otherwise. note: numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.
reducing dishes a chef has collected data on the satisfaction level of his n dishes. chef can cook any dish in 1 unit of time. like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i]. return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation. dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.
closest subsequence sum you are given an integer array nums and an integer goal. you want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. that is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal). return the minimum possible value of abs(sum - goal). note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.
the time when the network becomes idle there is a network of n servers, labeled from 0 to n - 1. you are given a 2d integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. you are also given a 0-indexed integer array patience of length n. all servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels. the server labeled 0 is the master server. the rest are data servers. each data server needs to send its message to the master server for processing and wait for a reply. messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. the master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through. at the beginning of second 0, each data server sends its message to be processed. starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server: if it has not, it will resend the message periodically. the data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server. otherwise, no more resending will occur from this server. the network becomes idle when there are no messages passing between servers or arriving at servers. return the earliest second starting from which the network becomes idle.
earliest possible day of full bloom you have n flower seeds. every seed must be planted first before it can begin to grow, then bloom. planting a seed takes time and so does the growth of a seed. you are given two 0-indexed integer arrays planttime and growtime, of length n each: planttime[i] is the number of full days it takes you to plant the ith seed. every day, you can work on planting exactly one seed. you do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked planttime[i] days on planting it in total. growtime[i] is the number of full days it takes the ith seed to grow after being completely planted. after the last day of its growth, the flower blooms and stays bloomed forever. from the beginning of day 0, you can plant the seeds in any order. return the earliest possible day where all seeds are blooming.
group sold products by the date sql schema table activities: +-------------+---------+ | column name | type | +-------------+---------+ | sell_date | date | | product | varchar | +-------------+---------+ there is no primary key for this table, it may contain duplicates. each row of this table contains the product name and the date it was sold in a market. write an sql query to find for each date the number of different products sold and their names. the sold products names for each date should be sorted lexicographically. return the result table ordered by sell_date. the query result format is in the following example.
exam room there is an exam room with n seats in a single row labeled from 0 to n - 1. when a student enters the room, they must sit in the seat that maximizes the distance to the closest person. if there are multiple such seats, they sit in the seat with the lowest number. if no one is in the room, then the student sits at seat number 0. design a class that simulates the mentioned exam room. implement the examroom class: examroom(int n) initializes the object of the exam room with the number of the seats n. int seat() returns the label of the seat at which the next student will set. void leave(int p) indicates that the student sitting at seat p will leave the room. it is guaranteed that there will be a student sitting at seat p.
check completeness of a binary tree given the root of a binary tree, determine if it is a complete binary tree. in a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. it can have between 1 and 2h nodes inclusive at the last level h.
k closest points to origin given an array of points where points[i] = [xi, yi] represents a point on the x-y plane and an integer k, return the k closest points to the origin (0, 0). the distance between two points on the x-y plane is the euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2). you may return the answer in any order. the answer is guaranteed to be unique (except for the order that it is in).
middle of the linked list given the head of a singly linked list, return the middle node of the linked list. if there are two middle nodes, return the second middle node.
minimum adjacent swaps for k consecutive ones you are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. in one move, you can choose two adjacent indices and swap their values. return the minimum number of moves required so that nums has k consecutive 1's.
univalued binary tree a binary tree is uni-valued if every node in the tree has the same value. given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.
push dominoes there are n dominoes in a line, and we place each domino vertically upright. in the beginning, we simultaneously push some of the dominoes either to the left or to the right. after each second, each domino that is falling to the left pushes the adjacent domino on the left. similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. when a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. for the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. you are given a string dominoes representing the initial state where: dominoes[i] = 'l', if the ith domino has been pushed to the left, dominoes[i] = 'r', if the ith domino has been pushed to the right, and dominoes[i] = '.', if the ith domino has not been pushed. return a string representing the final state.
stone game iii alice and bob continue their games with piles of stones. there are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stonevalue. alice and bob take turns, with alice starting first. on each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row. the score of each player is the sum of the values of the stones taken. the score of each player is 0 initially. the objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. the game continues until all the stones have been taken. assume alice and bob play optimally. return "alice" if alice will win, "bob" if bob will win, or "tie" if they will end the game with the same score.
cat and mouse ii a game is played by a cat and a mouse named cat and mouse. the environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (cat, mouse), or food. players are represented by the characters 'c'(cat),'m'(mouse). floors are represented by the character '.' and can be walked on. walls are represented by the character '#' and cannot be walked on. food is represented by the character 'f' and can be walked on. there is only one of each character 'c', 'm', and 'f' in grid. mouse and cat play according to the following rules: mouse moves first, then they take turns to move. during each turn, cat and mouse can jump in one of the four directions (left, right, up, down). they cannot jump over the wall nor outside of the grid. catjump, mousejump are the maximum lengths cat and mouse can jump at a time, respectively. cat and mouse can jump less than the maximum length. staying in the same position is allowed. mouse can jump over cat. the game can end in 4 ways: if cat occupies the same position as mouse, cat wins. if cat reaches the food first, cat wins. if mouse reaches the food first, mouse wins. if mouse cannot get to the food within 1000 turns, cat wins. given a rows x cols matrix grid and two integers catjump and mousejump, return true if mouse can win the game if both cat and mouse play optimally, otherwise return false.
non-negative integers without consecutive ones given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.
path with minimum effort you are a hiker preparing for an upcoming hike. you are given heights, a 2d array of size rows x columns, where heights[row][col] represents the height of cell (row, col). you are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). you can move up, down, left, or right, and you wish to find a route that requires the minimum effort. a route's effort is the maximum absolute difference in heights between two consecutive cells of the route. return the minimum effort required to travel from the top-left cell to the bottom-right cell.
number of substrings with only 1s given a binary string s, return the number of substrings with all characters 1's. since the answer may be too large, return it modulo 109 + 7.
minimum number of flips to make the binary string alternating you are given a binary string s. you are allowed to perform two types of operations on the string in any sequence: type-1: remove the character at the start of the string s and append it to the end of the string. type-2: pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa. return the minimum number of type-2 operations you need to perform such that s becomes alternating. the string is called alternating if no two adjacent characters are equal. for example, the strings "010" and "1010" are alternating, while the string "0100" is not.
find valid matrix given row and column sums you are given two arrays rowsum and colsum of non-negative integers where rowsum[i] is the sum of the elements in the ith row and colsum[j] is the sum of the elements of the jth column of a 2d matrix. in other words, you do not know the elements of the matrix, but you do know the sums of each row and column. find any matrix of non-negative integers of size rowsum.length x colsum.length that satisfies the rowsum and colsum requirements. return a 2d array representing any matrix that fulfills the requirements. it's guaranteed that at least one matrix that fulfills the requirements exists.
building h2o there are two kinds of threads: oxygen and hydrogen. your goal is to group these threads to form water molecules. there is a barrier where each thread has to wait until a complete molecule can be formed. hydrogen and oxygen threads will be given releasehydrogen and releaseoxygen methods respectively, which will allow them to pass the barrier. these threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. you must guarantee that all the threads from one molecule bond before any other threads from the next molecule do. in other words: if an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads. if a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread. we do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. the key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads. write synchronization code for oxygen and hydrogen molecules that enforces these constraints.
ransom note given two strings ransomnote and magazine, return true if ransomnote can be constructed by using the letters from magazine and false otherwise. each letter in magazine can only be used once in ransomnote.
find a value of a mysterious function closest to target winston was given the above mysterious function func. he has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible. return the minimum possible value of |func(arr, l, r) - target|. notice that func should be called with the values l and r where 0 <= l, r < arr.length.
longest subarray with maximum bitwise and you are given an integer array nums of size n. consider a non-empty subarray from nums that has the maximum possible bitwise and. in other words, let k be the maximum value of the bitwise and of any subarray of nums. then, only subarrays with a bitwise and equal to k should be considered. return the length of the longest such subarray. the bitwise and of an array is the bitwise and of all the numbers in it. a subarray is a contiguous sequence of elements within an array.
climbing stairs you are climbing a staircase. it takes n steps to reach the top. each time you can either climb 1 or 2 steps. in how many distinct ways can you climb to the top?
minimum operations to make array equal ii you are given two integer arrays nums1 and nums2 of equal length n and an integer k. you can perform the following operation on nums1: choose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. in other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k. nums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i]. return the minimum number of operations required to make nums1 equal to nums2. if it is impossible to make them equal, return -1.
confirmation rate sql schema table: signups +----------------+----------+ | column name | type | +----------------+----------+ | user_id | int | | time_stamp | datetime | +----------------+----------+ user_id is the primary key for this table. each row contains information about the signup time for the user with id user_id. table: confirmations +----------------+----------+ | column name | type | +----------------+----------+ | user_id | int | | time_stamp | datetime | | action | enum | +----------------+----------+ (user_id, time_stamp) is the primary key for this table. user_id is a foreign key with a reference to the signups table. action is an enum of the type ('confirmed', 'timeout') each row of this table indicates that the user with id user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout'). the confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. the confirmation rate of a user that did not request any confirmation messages is 0. round the confirmation rate to two decimal places. write an sql query to find the confirmation rate of each user. return the result table in any order. the query result format is in the following example.
unique paths ii you are given an m x n integer array grid. there is a robot initially located at the top-left corner (i.e., grid[0][0]). the robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). the robot can only move either down or right at any point in time. an obstacle and space are marked as 1 or 0 respectively in grid. a path that the robot takes cannot include any square that is an obstacle. return the number of possible unique paths that the robot can take to reach the bottom-right corner. the testcases are generated so that the answer will be less than or equal to 2 * 109.
course schedule there are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. for example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. return true if you can finish all courses. otherwise, return false.
hand of straights alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupsize, and consists of groupsize consecutive cards. given an integer array hand where hand[i] is the value written on the ith card and an integer groupsize, return true if she can rearrange the cards, or false otherwise.
surrounded regions given an m x n matrix board containing 'x' and 'o', capture all regions that are 4-directionally surrounded by 'x'. a region is captured by flipping all 'o's into 'x's in that surrounded region.
queens that can attack the king on a 0-indexed 8 x 8 chessboard, there can be multiple black queens ad one white king. you are given a 2d integer array queens where queens[i] = [xqueeni, yqueeni] represents the position of the ith black queen on the chessboard. you are also given an integer array king of length 2 where king = [xking, yking] represents the position of the white king. return the coordinates of the black queens that can directly attack the king. you may return the answer in any order.
reverse vowels of a string given a string s, reverse only all the vowels in the string and return it. the vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.
stone game ii alice and bob continue their games with piles of stones. there are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. the objective of the game is to end with the most stones. alice and bob take turns, with alice starting first. initially, m = 1. on each player's turn, that player can take all the stones in the first x remaining piles, where 1 <= x <= 2m. then, we set m = max(m, x). the game continues until all the stones have been taken. assuming alice and bob play optimally, return the maximum number of stones alice can get.
cut off trees for golf event you are asked to cut off all the trees in a forest for a golf event. the forest is represented as an m x n matrix. in this matrix: 0 means the cell cannot be walked through. 1 represents an empty cell that can be walked through. a number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height. in one step, you can walk in any of the four directions: north, east, south, and west. if you are standing in a cell with a tree, you can choose whether to cut it off. you must cut off the trees in order from shortest to tallest. when you cut off a tree, the value at its cell becomes 1 (an empty cell). starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. if you cannot cut off all the trees, return -1. note: the input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.
minimum deletions to make character frequencies unique a string s is called good if there are no two different characters in s that have the same frequency. given a string s, return the minimum number of characters you need to delete to make s good. the frequency of a character in a string is the number of times it appears in the string. for example, in the string "aab", the frequency of 'a' is 2, while the frequency of 'b' is 1.
guess number higher or lower ii we are playing the guessing game. the game will work as follows: i pick a number between 1 and n. you guess a number. if you guess the right number, you win the game. if you guess the wrong number, then i will tell you whether the number i picked is higher or lower, and you will continue guessing. every time you guess a wrong number x, you will pay x dollars. if you run out of money, you lose the game. given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number i pick.
parallel courses iii you are given an integer n, which indicates that there are n courses labeled from 1 to n. you are also given a 2d integer array relations where relations[j] = [prevcoursej, nextcoursej] denotes that course prevcoursej has to be completed before course nextcoursej (prerequisite relationship). furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course. you must find the minimum number of months needed to complete all the courses following these rules: you may start taking a course at any time if the prerequisites are met. any number of courses can be taken at the same time. return the minimum number of months needed to complete all the courses. note: the test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).
course schedule ii there are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. for example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. return the ordering of courses you should take to finish all courses. if there are many valid answers, return any of them. if it is impossible to finish all courses, return an empty array.
incremental memory leak you are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. there is currently a faulty program running that consumes an increasing amount of memory every second. at the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). if neither stick has at least i bits of available memory, the program crashes. return an array containing [crashtime, memory1crash, memory2crash], where crashtime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.
minimum deletions to make string balanced you are given a string s consisting only of characters 'a' and 'b'. you can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'. return the minimum number of deletions needed to make s balanced.
reformat phone number you are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'. you would like to reformat the phone number in a certain manner. firstly, remove all spaces and dashes. then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. the final digits are then grouped as follows: 2 digits: a single block of length 2. 3 digits: a single block of length 3. 4 digits: two blocks of length 2 each. the blocks are then joined by dashes. notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2. return the phone number after formatting.
maximum distance between a pair of values you are given two non-increasing 0-indexed integer arrays nums1 and nums2. a pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. the distance of the pair is j - i. return the maximum distance of any valid pair (i, j). if there are no valid pairs, return 0. an array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.
water and jug problem you are given two jugs with capacities jug1capacity and jug2capacity liters. there is an infinite amount of water supply available. determine whether it is possible to measure exactly targetcapacity liters using these two jugs. if targetcapacity liters of water are measurable, you must have targetcapacity liters of water contained within one or both buckets by the end. operations allowed: fill any of the jugs with water. empty any of the jugs. pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.
minimum deletions to make array divisible you are given two positive integer arrays nums and numsdivide. you can delete any number of elements from nums. return the minimum number of deletions such that the smallest element in nums divides all the elements of numsdivide. if this is not possible, return -1. note that an integer x divides y if y % x == 0.
number of longest increasing subsequence given an integer array nums, return the number of longest increasing subsequences. notice that the sequence has to be strictly increasing.
human traffic of stadium sql schema table: stadium +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | visit_date | date | | people | int | +---------------+---------+ visit_date is the primary key for this table. each row of this table contains the visit date and visit id to the stadium with the number of people during the visit. no two rows will have the same visit_date, and as the id increases, the dates increase as well. write an sql query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each. return the result table ordered by visit_date in ascending order. the query result format is in the following example.
minimum space wasted from packaging you have n packages that you are trying to place in boxes, one package in each box. there are m suppliers that each produce boxes of different sizes (with infinite supply). a package can be placed in a box if the size of the package is less than or equal to the size of the box. the package sizes are given as an integer array packages, where packages[i] is the size of the ith package. the suppliers are given as a 2d integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces. you want to choose a single supplier and use boxes from them such that the total wasted space is minimized. for each package in a box, we define the space wasted to be size of the box - size of the package. the total wasted space is the sum of the space wasted in all the boxes. for example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. this would result in a waste of (4-2) + (4-3) + (8-5) = 6. return the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. since the answer may be large, return it modulo 109 + 7.
maximum erasure value you are given an array of positive integers nums and want to erase a subarray containing unique elements. the score you get by erasing the subarray is equal to the sum of its elements. return the maximum score you can get by erasing exactly one subarray. an array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).
minimum time to complete trips you are given an array time where time[i] denotes the time taken by the ith bus to complete one trip. each bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus. you are also given an integer totaltrips, which denotes the number of trips all buses should make in total. return the minimum time required for all buses to complete at least totaltrips trips.
count unique characters of all substrings of a given string let's define a function countuniquechars(s) that returns the number of unique characters on s. for example, calling countuniquechars(s) if s = "leetcode" then "l", "t", "c", "o", "d" are the unique characters since they appear only once in s, therefore countuniquechars(s) = 5. given a string s, return the sum of countuniquechars(t) where t is a substring of s. the test cases are generated such that the answer fits in a 32-bit integer. notice that some substrings can be repeated so in this case you have to count the repeated ones too.
minimum number of operations to sort a binary tree by level you are given the root of a binary tree with unique values. in one operation, you can choose any two nodes at the same level and swap their values. return the minimum number of operations needed to make the values at each level sorted in a strictly increasing order. the level of a node is the number of edges along the path between it and the root node.
valid square given the coordinates of four points in 2d space p1, p2, p3 and p4, return true if the four points construct a square. the coordinate of a point pi is represented as [xi, yi]. the input is not given in any order. a valid square has four equal sides with positive length and four equal angles (90-degree angles).
single-threaded cpu you are given n tasks labeled from 0 to n - 1 represented by a 2d integer array tasks, where tasks[i] = [enqueuetimei, processingtimei] means that the ith task will be available to process at enqueuetimei and will take processingtimei to finish processing. you have a single-threaded cpu that can process at most one task at a time and will act in the following way: if the cpu is idle and there are no available tasks to process, the cpu remains idle. if the cpu is idle and there are available tasks, the cpu will choose the one with the shortest processing time. if multiple tasks have the same shortest processing time, it will choose the task with the smallest index. once a task is started, the cpu will process the entire task without stopping. the cpu can finish a task then start a new one instantly. return the order in which the cpu will process the tasks.
furthest building you can reach you are given an integer array heights representing the heights of buildings, some bricks, and some ladders. you start your journey from building 0 and move to the next building by possibly using bricks or ladders. while moving from building i to building i+1 (0-indexed), if the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks. if the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks. return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.
ambiguous coordinates we had some 2-dimensional coordinates, like "(1, 3)" or "(2, 0.5)". then, we removed all commas, decimal points, and spaces and ended up with the string s. for example, "(1, 3)" becomes s = "(13)" and "(2, 0.5)" becomes s = "(205)". return a list of strings representing all possibilities for what our original coordinates could have been. our original representation never had extraneous zeroes, so we never started with numbers like "00", "0.0", "0.00", "1.0", "001", "00.01", or any other number that can be represented with fewer digits. also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like ".1". the final answer list can be returned in any order. all coordinates in the final answer have exactly one space between them (occurring after the comma.)
minimum xor sum of two arrays you are given two integer arrays nums1 and nums2 of length n. the xor sum of the two integer arrays is (nums1[0] xor nums2[0]) + (nums1[1] xor nums2[1]) + ... + (nums1[n - 1] xor nums2[n - 1]) (0-indexed). for example, the xor sum of [1,2,3] and [3,2,1] is equal to (1 xor 3) + (2 xor 2) + (3 xor 1) = 2 + 0 + 2 = 4. rearrange the elements of nums2 such that the resulting xor sum is minimized. return the xor sum after the rearrangement.
find numbers with even number of digits given an array nums of integers, return how many of them contain an even number of digits.
boats to save people you are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit. return the minimum number of boats to carry every given person.
list the products ordered in a period sql schema table: products +------------------+---------+ | column name | type | +------------------+---------+ | product_id | int | | product_name | varchar | | product_category | varchar | +------------------+---------+ product_id is the primary key for this table. this table contains data about the company's products. table: orders +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | order_date | date | | unit | int | +---------------+---------+ there is no primary key for this table. it may have duplicate rows. product_id is a foreign key to the products table. unit is the number of products ordered in order_date. write an sql query to get the names of products that have at least 100 units ordered in february 2020 and their amount. return result table in any order. the query result format is in the following example.
valid parenthesis string given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid. the following rules define a valid string: any left parenthesis '(' must have a corresponding right parenthesis ')'. any right parenthesis ')' must have a corresponding left parenthesis '('. left parenthesis '(' must go before the corresponding right parenthesis ')'. '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
keys and rooms there are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. your goal is to visit all the rooms. however, you cannot enter a locked room without having its key. when you visit a room, you may find a set of distinct keys in it. each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms. given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.
rearrange array elements by sign you are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers. you should rearrange the elements of nums such that the modified array follows the given conditions: every consecutive pair of integers have opposite signs. for all integers with the same sign, the order in which they were present in nums is preserved. the rearranged array begins with a positive integer. return the modified array after rearranging the elements to satisfy the aforementioned conditions.
integer break given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers. return the maximum product you can get.
count numbers with unique digits given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.
find servers that handled most number of requests you have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. each server has infinite computational capacity but cannot handle more than one request at a time. the requests are assigned to servers according to a specific algorithm: the ith (0-indexed) request arrives. if all servers are busy, the request is dropped (not handled at all). if the (i % k)th server is available, assign the request to that server. otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). for example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on. you are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). your goal is to find the busiest server(s). a server is considered busiest if it handled the most number of requests successfully among all the servers. return a list containing the ids (0-indexed) of the busiest server(s). you may return the ids in any order.
kth largest element in a stream design a class to find the kth largest element in a stream. note that it is the kth largest element in the sorted order, not the kth distinct element. implement kthlargest class: kthlargest(int k, int[] nums) initializes the object with the integer k and the stream of integers nums. int add(int val) appends the integer val to the stream and returns the element representing the kth largest element in the stream.
increasing order search tree given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.
greatest common divisor traversal you are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. you can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor. your task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j. return true if it is possible to traverse between all such pairs of indices, or false otherwise.
longest continuous increasing subsequence given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). the subsequence must be strictly increasing. a continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].
kth largest element in an array given an integer array nums and an integer k, return the kth largest element in the array. note that it is the kth largest element in the sorted order, not the kth distinct element. you must solve it in o(n) time complexity.
removing minimum number of magic beans you are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag. remove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. once a bean has been removed from a bag, you are not allowed to return it to any of the bags. return the minimum number of magic beans that you have to remove.
super washing machines you have n super washing machines on a line. initially, each washing machine has some dresses or is empty. for each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time. given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. if it is not possible to do it, return -1.
shortest impossible sequence of rolls you are given an integer array rolls of length n and an integer k. you roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i]. return the length of the shortest sequence of rolls that cannot be taken from rolls. a sequence of rolls of length len is the result of rolling a k sided dice len times. note that the sequence taken does not have to be consecutive as long as it is in order.
reachable nodes in subdivided graph you are given an undirected graph (the "original graph") with n nodes labeled from 0 to n - 1. you decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge. the graph is given as a 2d array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. note that cnti == 0 means you will not subdivide the edge. to subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. the new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi]. in this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxmoves or less. given the original graph and maxmoves, return the number of nodes that are reachable from node 0 in the new graph.
minimum changes to make alternating binary string you are given a string s consisting only of the characters '0' and '1'. in one operation, you can change any '0' to '1' or vice versa. the string is called alternating if no two adjacent characters are equal. for example, the string "010" is alternating, while the string "0100" is not. return the minimum number of operations needed to make s alternating.
create hello world function write a function createhelloworld. it should return a new function that always returns "hello world".
majority element ii given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
evaluate division you are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [ai, bi] and values[i] represent the equation ai / bi = values[i]. each ai or bi is a string that represents a single variable. you are also given some queries, where queries[j] = [cj, dj] represents the jth query where you must find the answer for cj / dj = ?. return the answers to all queries. if a single answer cannot be determined, return -1.0. note: the input is always valid. you may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
fair candy swap alice and bob have a different total number of candies. you are given two integer arrays alicesizes and bobsizes where alicesizes[i] is the number of candies of the ith box of candy that alice has and bobsizes[j] is the number of candies of the jth box of candy that bob has. since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. the total amount of candy a person has is the sum of the number of candies in each box they have. return an integer array answer where answer[0] is the number of candies in the box that alice must exchange, and answer[1] is the number of candies in the box that bob must exchange. if there are multiple answers, you may return any one of them. it is guaranteed that at least one answer exists.
max consecutive ones given a binary array nums, return the maximum number of consecutive 1's in the array.
widest vertical area between two points containing no points given n points on a 2d plane where points[i] = [xi, yi], return the widest vertical area between two points such that no points are inside the area. a vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). the widest vertical area is the one with the maximum width. note that points on the edge of a vertical area are not considered included in the area.
reverse linked list ii given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
find subsequence of length k with the largest sum you are given an integer array nums and an integer k. you want to find a subsequence of nums of length k that has the largest sum. return any such subsequence as an integer array of length k. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
generate a string with characters that have odd counts given an integer n, return a string with n characters such that each character in such string occurs an odd number of times. the returned string must contain only lowercase english letters. if there are multiples valid strings, return any of them.
final prices with a special discount in a shop you are given an integer array prices where prices[i] is the price of the ith item in a shop. there is a special discount for items in the shop. if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. otherwise, you will not receive any discount at all. return an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.
sender with largest word count you have a chat log of n messages. you are given two string arrays messages and senders where messages[i] is a message sent by senders[i]. a message is list of words that are separated by a single space with no leading or trailing spaces. the word count of a sender is the total number of words sent by the sender. note that a sender may send more than one message. return the sender with the largest word count. if there is more than one sender with the largest word count, return the one with the lexicographically largest name. note: uppercase letters come before lowercase letters in lexicographical order. "alice" and "alice" are distinct.
sorting the sentence a sentence is a list of words that are separated by a single space with no leading or trailing spaces. each word consists of lowercase and uppercase english letters. a sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence. for example, the sentence "this is a sentence" can be shuffled as "sentence4 a3 is2 this1" or "is2 sentence4 this1 a3". given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.
longest repeating character replacement you are given a string s and an integer k. you can choose any character of the string and change it to any other uppercase english character. you can perform this operation at most k times. return the length of the longest substring containing the same letter you can get after performing the above operations.
number of distinct averages you are given a 0-indexed integer array nums of even length. as long as nums is not empty, you must repetitively: find the minimum number in nums and remove it. find the maximum number in nums and remove it. calculate the average of the two removed numbers. the average of two numbers a and b is (a + b) / 2. for example, the average of 2 and 3 is (2 + 3) / 2 = 2.5. return the number of distinct averages calculated using the above process. note that when there is a tie for a minimum or maximum number, any can be removed.
check array formation through concatenation you are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. your goal is to form arr by concatenating the arrays in pieces in any order. however, you are not allowed to reorder the integers in each array pieces[i]. return true if it is possible to form the array arr from pieces. otherwise, return false.
minimum number of frogs croaking you are given the string croakoffrogs, which represents a combination of the string "croak" from different frogs, that is, multiple frogs can croak at the same time, so multiple "croak" are mixed. return the minimum number of different frogs to finish all the croaks in the given string. a valid "croak" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. the frogs have to print all five letters to finish a croak. if the given string is not a combination of a valid "croak" return -1.
minimum possible integer after at most k adjacent swaps on digits you are given a string num representing the digits of a very large integer and an integer k. you are allowed to swap any two adjacent digits of the integer at most k times. return the minimum integer you can obtain also as a string.
string matching in an array given an array of string words, return all strings in words that is a substring of another word. you can return the answer in any order. a substring is a contiguous sequence of characters within a string
max number of k-sum pairs you are given an integer array nums and an integer k. in one operation, you can pick two numbers from the array whose sum equals k and remove them from the array. return the maximum number of operations you can perform on the array.
maximum score from removing stones you are playing a solitaire game with three piles of stones of sizes a, b, and c respectively. each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. the game stops when there are fewer than two non-empty piles (meaning there are no more available moves). given three integers a, b, and c, return the maximum score you can get.
maximum product of the length of two palindromic subsequences given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. the two subsequences are disjoint if they do not both pick a character at the same index. return the maximum possible product of the lengths of the two palindromic subsequences. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. a string is palindromic if it reads the same forward and backward.
minimum interval to include each query you are given a 2d integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). the size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1. you are also given an integer array queries. the answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. if no such interval exists, the answer is -1. return an array containing the answers to the queries.
sort list given the head of a linked list, return the list after sorting it in ascending order.
strictly palindromic number an integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic. given an integer n, return true if n is strictly palindromic and false otherwise. a string is palindromic if it reads the same forward and backward.
reduction operations to make the array elements equal given an integer array nums, your goal is to make all elements in nums equal. to complete one operation, follow these steps: find the largest value in nums. let its index be i (0-indexed) and its value be largest. if there are multiple elements with the largest value, pick the smallest i. find the next largest value in nums strictly smaller than largest. let its value be nextlargest. reduce nums[i] to nextlargest. return the number of operations to make all elements in nums equal.
design underground system an underground railway system is keeping track of customer travel times between different stations. they are using this data to calculate the average time it takes to travel from one station to another. implement the undergroundsystem class: void checkin(int id, string stationname, int t) a customer with a card id equal to id, checks in at the station stationname at time t. a customer can only be checked into one place at a time. void checkout(int id, string stationname, int t) a customer with a card id equal to id, checks out from the station stationname at time t. double getaveragetime(string startstation, string endstation) returns the average time it takes to travel from startstation to endstation. the average time is computed from all the previous traveling times from startstation to endstation that happened directly, meaning a check in at startstation followed by a check out from endstation. the time it takes to travel from startstation to endstation may be different from the time it takes to travel from endstation to startstation. there will be at least one customer that has traveled from startstation to endstation before getaveragetime is called. you may assume all calls to the checkin and checkout methods are consistent. if a customer checks in at time t1 then checks out at time t2, then t1 < t2. all events happen in chronological order.
find critical and pseudo-critical edges in minimum spanning tree given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. a minimum spanning tree (mst) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight. find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (mst). an mst edge whose deletion from the graph would cause the mst weight to increase is called a critical edge. on the other hand, a pseudo-critical edge is that which can appear in some msts but not all. note that you can return the indices of the edges in any order.
longest happy string a string s is called happy if it satisfies the following conditions: s only contains the letters 'a', 'b', and 'c'. s does not contain any of "aaa", "bbb", or "ccc" as a substring. s contains at most a occurrences of the letter 'a'. s contains at most b occurrences of the letter 'b'. s contains at most c occurrences of the letter 'c'. given three integers a, b, and c, return the longest possible happy string. if there are multiple longest happy strings, return any of them. if there is no such string, return the empty string "". a substring is a contiguous sequence of characters within a string.
reverse nodes in even length groups you are given the head of a linked list. the nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). the length of a group is the number of nodes assigned to it. in other words, the 1st node is assigned to the first group. the 2nd and the 3rd nodes are assigned to the second group. the 4th, 5th, and 6th nodes are assigned to the third group, and so on. note that the length of the last group may be less than or equal to 1 + the length of the second to last group. reverse the nodes in each group with an even length, and return the head of the modified linked list.
jump game vii you are given a 0-indexed binary string s and two integers minjump and maxjump. in the beginning, you are standing at index 0, which is equal to '0'. you can move from index i to index j if the following conditions are fulfilled: i + minjump <= j <= min(i + maxjump, s.length - 1), and s[j] == '0'. return true if you can reach index s.length - 1 in s, or false otherwise.
numbers with repeated digits given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.
find the longest substring containing vowels in even counts given the string s, return the size of the longest substring containing each vowel an even number of times. that is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.
check if a string contains all binary codes of size k given a binary string s and an integer k, return true if every binary code of length k is a substring of s. otherwise, return false.
maximum width of binary tree given the root of a binary tree, return the maximum width of the given tree. the maximum width of a tree is the maximum width among all levels. the width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation. it is guaranteed that the answer will in the range of a 32-bit signed integer.
cache with time limit write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key. the class has three public methods: set(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. once the duration has elapsed, the key should be inaccessible. the method should return true if the same un-expired key already exists and false otherwise. both the value and duration should be overwritten if the key already exists. get(key): if an un-expired key exists, it should return the associated value. otherwise it should return -1. count(): returns the count of un-expired keys.
split the array to make coprime products you are given a 0-indexed integer array nums of length n. a split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime. for example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. a split at the index i = 2 is not valid because i == n - 1. return the smallest index i at which the array can be split validly or -1 if there is no such split. two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.
self crossing you are given an array of integers distance. you start at the point (0, 0) on an x-y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. in other words, after each move, your direction changes counter-clockwise. return true if your path crosses itself or false if it does not.
remove boxes you are given several boxes with different colors represented by different positive numbers. you may experience several rounds to remove boxes until there is no box left. each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points. return the maximum points you can get.
count prefixes of a given string you are given a string array words and a string s, where words[i] and s comprise only of lowercase english letters. return the number of strings in words that are a prefix of s. a prefix of a string is a substring that occurs at the beginning of the string. a substring is a contiguous sequence of characters within a string.
splitting a string into descending consecutive values you are given a string s that consists of only digits. check if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1. for example, the string s = "0090089" can be split into ["0090", "089"] with numerical values [90,89]. the values are in descending order and adjacent values differ by 1, so this way is valid. another example, the string s = "001" can be split into ["0", "01"], ["00", "1"], or ["0", "0", "1"]. however all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order. return true if it is possible to split s as described above, or false otherwise. a substring is a contiguous sequence of characters in a string.
score of parentheses given a balanced parentheses string s, return the score of the string. the score of a balanced parentheses string is based on the following rule: "()" has score 1. ab has score a + b, where a and b are balanced parentheses strings. (a) has score 2 * a, where a is a balanced parentheses string.
number of subarrays with gcd equal to k given an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k. a subarray is a contiguous non-empty sequence of elements within an array. the greatest common divisor of an array is the largest integer that evenly divides all the array elements.
sum of two integers given two integers a and b, return the sum of the two integers without using the operators + and -.
number of valid move combinations on chessboard there is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). you are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. in addition, you are given a 2d integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard. when making a move for a piece, you choose a destination square that the piece will travel toward and stop on. a rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1). a queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1). a bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1). you must make a move for every piece on the board simultaneously. a move combination consists of all the moves performed on all the given pieces. every second, each piece will instantaneously travel one square towards their destination if they are not already at it. all pieces start traveling at the 0th second. a move combination is invalid if, at a given time, two or more pieces occupy the same square. return the number of valid move combinations. notes: no two pieces will start in the same square. you may choose the square a piece is already on as its destination. if two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.
employee importance you have a data structure of employee information, including the employee's unique id, importance value, and direct subordinates' ids. you are given an array of employees employees where: employees[i].id is the id of the ith employee. employees[i].importance is the importance value of the ith employee. employees[i].subordinates is a list of the ids of the direct subordinates of the ith employee. given an integer id that represents an employee's id, return the total importance value of this employee and all their direct and indirect subordinates.
next greater node in linked list you are given the head of a linked list with n nodes. for each node in the list, find the value of the next greater node. that is, for each node, find the value of the first node that is next to it and has a strictly larger value than it. return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). if the ith node does not have a next greater node, set answer[i] = 0.
minimum operations to halve array sum you are given an array nums of positive integers. in one operation, you can choose any number from nums and reduce it to exactly half the number. (note that you may choose this reduced number in future operations.) return the minimum number of operations to reduce the sum of nums by at least half.
compact object given an object or array obj, return a compact object. a compact object is the same as the original object, except with keys containing falsy values removed. this operation applies to the object and any nested objects. arrays are considered objects where the indices are keys. a value is considered falsy when boolean(value) returns false. you may assume the obj is the output of json.parse. in other words, it is valid json.
valid number a valid number can be split up into these components (in order): a decimal number or an integer. (optional) an 'e' or 'e', followed by an integer. a decimal number can be split up into these components (in order): (optional) a sign character (either '+' or '-'). one of the following formats: one or more digits, followed by a dot '.'. one or more digits, followed by a dot '.', followed by one or more digits. a dot '.', followed by one or more digits. an integer can be split up into these components (in order): (optional) a sign character (either '+' or '-'). one or more digits. for example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90e3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"]. given a string s, return true if s is a valid number.
array partition given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. return the maximized sum.
best time to buy and sell stock iii you are given an array prices where prices[i] is the price of a given stock on the ith day. find the maximum profit you can achieve. you may complete at most two transactions. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
wildcard matching given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where: '?' matches any single character. '*' matches any sequence of characters (including the empty sequence). the matching should cover the entire input string (not partial).
check if it is a straight line you are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. check if these points make a straight line in the xy plane.
fair distribution of cookies you are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. you are also given an integer k that denotes the number of children to distribute all the bags of cookies to. all the cookies in the same bag must go to the same child and cannot be split up. the unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution. return the minimum unfairness of all distributions.
shifting letters ii you are given a string s of lowercase english letters and a 2d integer array shifts where shifts[i] = [starti, endi, directioni]. for every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0. shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z'). return the final string after all such shifts to s are applied.
equal row and column pairs given a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal. a row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).
number of ways to stay in the same place after some steps you have a pointer at index 0 in an array of size arrlen. at each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (the pointer should not be placed outside the array at any time). given two integers steps and arrlen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. since the answer may be too large, return it modulo 109 + 7.
smallest subtree with all the deepest nodes given the root of a binary tree, the depth of each node is the shortest distance to the root. return the smallest subtree such that it contains all the deepest nodes in the original tree. a node is called the deepest if it has the largest depth possible among any node in the entire tree. the subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.
add binary given two binary strings a and b, return their sum as a binary string.
3sum given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. notice that the solution set must not contain duplicate triplets.
clumsy factorial the factorial of a positive integer n is the product of all positive integers less than or equal to n. for example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1. we make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order. for example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1. however, these operations are still applied using the usual order of operations of arithmetic. we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. additionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11. given an integer n, return the clumsy factorial of n.
regular expression matching given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where: '.' matches any single character. '*' matches zero or more of the preceding element. the matching should cover the entire input string (not partial).
contiguous array given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.
check if word can be placed in crossword you are given an m x n matrix board, representing the current state of a crossword puzzle. the crossword contains lowercase english letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells. a word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if: it does not occupy a cell containing the character '#'. the cell each letter is placed in must either be ' ' (empty) or match the letter already on the board. there must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally. there must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically. given a string word, return true if word can be placed in board, or false otherwise.
minimum limit of balls in a bag you are given an integer array nums where the ith bag contains nums[i] balls. you are also given an integer maxoperations. you can perform the following operation at most maxoperations times: take any bag of balls and divide it into two new bags with a positive number of balls. for example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls. your penalty is the maximum number of balls in a bag. you want to minimize your penalty after the operations. return the minimum possible penalty after performing the operations.
substring xor queries you are given a binary string s, and a 2d integer array queries where queries[i] = [firsti, secondi]. for the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise xored with firsti. in other words, val ^ firsti == secondi. the answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. if there are multiple answers, choose the one with the minimum lefti. return an array ans where ans[i] = [lefti, righti] is the answer to the ith query. a substring is a contiguous non-empty sequence of characters within a string.
maximum absolute sum of any subarray you are given an integer array nums. the absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr). return the maximum absolute sum of any (possibly empty) subarray of nums. note that abs(x) is defined as follows: if x is a negative integer, then abs(x) = -x. if x is a non-negative integer, then abs(x) = x.
length of the longest alphabetical continuous substring an alphabetical continuous string is a string consisting of consecutive letters in the alphabet. in other words, it is any substring of the string "abcdefghijklmnopqrstuvwxyz". for example, "abc" is an alphabetical continuous string, while "acb" and "za" are not. given a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.
repeated dna sequences the dna sequence is composed of a series of nucleotides abbreviated as 'a', 'c', 'g', and 't'. for example, "acgaattccg" is a dna sequence. when studying dna, it is useful to identify repeated sequences within the dna. given a string s that represents a dna sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a dna molecule. you may return the answer in any order.
palindrome pairs you are given a 0-indexed array of unique strings words. a palindrome pair is a pair of integers (i, j) such that: 0 <= i, j < words.length, i != j, and words[i] + words[j] (the concatenation of the two strings) is a palindrome . return an array of all the palindrome pairs of words.
sort items by groups respecting dependencies there are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. the items and the groups are zero indexed. a group can have no item belonging to it. return a sorted list of the items such that: the items that belong to the same group are next to each other in the sorted list. there are some relations between these items where beforeitems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item). return any solution if there is more than one solution and return an empty list if there is no solution.
maximum length of pair chain you are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti. a pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. a chain of pairs can be formed in this fashion. return the length longest chain which can be formed. you do not need to use up all the given intervals. you can select pairs in any order.
longest ideal subsequence you are given a string s consisting of lowercase letters and an integer k. we call a string t ideal if the following conditions are satisfied: t is a subsequence of the string s. the absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k. return the length of the longest ideal string. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. note that the alphabet order is not cyclic. for example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.
max value of equation you are given an array points containing the coordinates of points on a 2d plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. you are also given an integer k. return the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length. it is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.
count number of texts alice is texting bob using her phone. the mapping of digits to letters is shown in the figure below. in order to add a letter, alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key. for example, to add the letter 's', alice has to press '7' four times. similarly, to add the letter 'k', alice has to press '5' twice. note that the digits '0' and '1' do not map to any letters, so alice does not use them. however, due to an error in transmission, bob did not receive alice's text message but received a string of pressed keys instead. for example, when alice sent the message "bob", bob received the string "2266622". given a string pressedkeys representing the string received by bob, return the total number of possible text messages alice could have sent. since the answer may be very large, return it modulo 109 + 7.
reverse words in a string given an input string s, reverse the order of the words. a word is defined as a sequence of non-space characters. the words in s will be separated by at least one space. return a string of the words in reverse order concatenated by a single space. note that s may contain leading or trailing spaces or multiple spaces between two words. the returned string should only have a single space separating the words. do not include any extra spaces.
the latest login in 2020 sql schema table: logins +----------------+----------+ | column name | type | +----------------+----------+ | user_id | int | | time_stamp | datetime | +----------------+----------+ (user_id, time_stamp) is the primary key for this table. each row contains information about the login time for the user with id user_id. write an sql query to report the latest login for all users in the year 2020. do not include the users who did not login in 2020. return the result table in any order. the query result format is in the following example.
populating next right pointers in each node ii given a binary tree struct node { int val; node *left; node *right; node *next; } populate each next pointer to point to its next right node. if there is no next right node, the next pointer should be set to null. initially, all next pointers are set to null.
find closest number to zero given an integer array nums of size n, return the number with the value closest to 0 in nums. if there are multiple answers, return the number with the largest value.
maximum depth of binary tree given the root of a binary tree, return its maximum depth. a binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
stone game iv alice and bob take turns playing a game, with alice starting first. initially, there are n stones in a pile. on each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile. also, if a player cannot make a move, he/she loses the game. given a positive integer n, return true if and only if alice wins the game otherwise return false, assuming both players play optimally.
search in a binary search tree you are given the root of a binary search tree (bst) and an integer val. find the node in the bst that the node's value equals val and return the subtree rooted with that node. if such a node does not exist, return null.
reaching points given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise. the allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).
partition array into three parts with equal sum given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums. formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])
merge triplets to form target triplet a triplet is an array of three integers. you are given a 2d integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. you are also given an integer array target = [x, y, z] that describes the triplet you want to obtain. to obtain target, you may apply the following operation on triplets any number of times (possibly zero): choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)]. for example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]. return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.
sort an array given an array of integers nums, sort the array in ascending order and return it. you must solve the problem without using any built-in functions in o(nlog(n)) time complexity and with the smallest space complexity possible.
minimum number of operations to move all balls to each box you have n boxes. you are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball. in one operation, you can move one ball from a box to an adjacent box. box i is adjacent to box j if abs(i - j) == 1. note that after doing so, there may be more than one ball in some boxes. return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box. each answer[i] is calculated considering the initial state of the boxes.
second minimum time to reach destination a city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). the edges in the graph are represented as a 2d integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself. the time taken to traverse any edge is time minutes. each vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. all signals change at the same time. you can enter a vertex at any time, but can leave a vertex only when the signal is green. you cannot wait at a vertex if the signal is green. the second minimum value is defined as the smallest value strictly larger than the minimum value. for example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4. given n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n. notes: you can go through any vertex any number of times, including 1 and n. you can assume that when the journey starts, all signals have just turned green.
array reduce transformation given an integer array nums, a reducer function fn, and an initial value init, return a reduced array. a reduced array is created by applying the following operation: val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ... until every element in the array has been processed. the final value of val is returned. if the length of the array is 0, it should return init. please solve it without using the built-in array.reduce method.
substring with concatenation of all words you are given a string s and an array of strings words. all the strings of words are of the same length. a concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated. for example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated substring because it is not the concatenation of any permutation of words. return the starting indices of all the concatenated substrings in s. you can return the answer in any order.
count artifacts that can be extracted there is an n x n 0-indexed grid with some artifacts buried in it. you are given the integer n and a 0-indexed 2d integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where: (r1i, c1i) is the coordinate of the top-left cell of the ith artifact and (r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact. you will excavate some cells of the grid and remove all the mud from them. if the cell has a part of an artifact buried underneath, it will be uncovered. if all the parts of an artifact are uncovered, you can extract it. given a 0-indexed 2d integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract. the test cases are generated such that: no two artifacts overlap. each artifact only covers at most 4 cells. the entries of dig are unique.
rank transform of an array given an array of integers arr, replace each element with its rank. the rank represents how large the element is. the rank has the following rules: rank is an integer starting from 1. the larger the element, the larger the rank. if two elements are equal, their rank must be the same. rank should be as small as possible.
house robber iii the thief has found himself a new place for his thievery again. there is only one entrance to this area, called root. besides the root, each house has one and only one parent house. after a tour, the smart thief realized that all houses in this place form a binary tree. it will automatically contact the police if two directly-linked houses were broken into on the same night. given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.
maximum xor of two numbers in an array given an integer array nums, return the maximum result of nums[i] xor nums[j], where 0 <= i <= j < n.
number of ways of cutting a pizza given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'a' (an apple) and '.' (empty cell) and given the integer k. you have to cut the pizza into k pieces using k-1 cuts. for each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. if you cut the pizza vertically, give the left part of the pizza to a person. if you cut the pizza horizontally, give the upper part of the pizza to a person. give the last piece of pizza to the last person. return the number of ways of cutting the pizza such that each piece contains at least one apple. since the answer can be a huge number, return this modulo 10^9 + 7.
get watched videos by your friends there are n people, each person has a unique id between 0 and n-1. given the arrays watchedvideos and friends, where watchedvideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i. level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. in general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). for videos with the same frequency order them alphabetically from least to greatest.
maximum points you can obtain from cards there are several cards arranged in a row, and each card has an associated number of points. the points are given in the integer array cardpoints. in one step, you can take one card from the beginning or from the end of the row. you have to take exactly k cards. your score is the sum of the points of the cards you have taken. given the integer array cardpoints and the integer k, return the maximum score you can obtain.
longest duplicate substring given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. the occurrences may overlap. return any duplicated substring that has the longest possible length. if s does not have a duplicated substring, the answer is "".
delete node in a linked list there is a singly-linked list head and we want to delete a node node in it. you are given the node to be deleted node. you will not be given access to the first node of head. all the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list. delete the given node. note that by deleting the node, we do not mean removing it from memory. we mean: the value of the given node should not exist in the linked list. the number of nodes in the linked list should decrease by one. all the values before node should be in the same order. all the values after node should be in the same order. custom testing: for the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list. we will build the linked list and pass the node to your function. the output will be the entire list after calling your function.
calculate special bonus sql schema table: employees +-------------+---------+ | column name | type | +-------------+---------+ | employee_id | int | | name | varchar | | salary | int | +-------------+---------+ employee_id is the primary key for this table. each row of this table indicates the employee id, employee name, and salary. write an sql query to calculate the bonus of each employee. the bonus of an employee is 100% of their salary if the id of the employee is an odd number and the employee name does not start with the character 'm'. the bonus of an employee is 0 otherwise. return the result table ordered by employee_id. the query result format is in the following example.
check if array is sorted and rotated given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). otherwise, return false. there may be duplicates in the original array. note: an array a rotated by x positions results in an array b of the same length such that a[i] == b[(i+x) % a.length], where % is the modulo operation.
stone game ix alice and bob continue their games with stones. there is a row of n stones, and each stone has an associated value. you are given an integer array stones, where stones[i] is the value of the ith stone. alice and bob take turns, with alice starting first. on each turn, the player may remove any stone from stones. the player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. bob will win automatically if there are no remaining stones (even if it is alice's turn). assuming both players play optimally, return true if alice wins and false if bob wins.
profitable schemes there is a group of n members, and a list of various crimes they could commit. the ith crime generates a profit[i] and requires group[i] members to participate in it. if a member participates in one crime, that member can't participate in another crime. let's call a profitable scheme any subset of these crimes that generates at least minprofit profit, and the total number of members participating in that subset of crimes is at most n. return the number of schemes that can be chosen. since the answer may be very large, return it modulo 109 + 7.
array of objects to matrix write a function that converts an array of objects arr into a matrix m. arr is an array of objects or arrays. each item in the array can be deeply nested with child arrays and child objects. it can also contain numbers, strings, booleans, and null values. the first row m should be the column names. if there is no nesting, the column names are the unique keys within the objects. if there is nesting, the column names are the respective paths in the object separated by ".". each of the remaining rows corresponds to an object in arr. each value in the matrix corresponds to a value in an object. if a given object doesn't contain a value for a given column, the cell should contain an empty string "". the colums in the matrix should be in lexographically ascending order.
sum of beauty in the array you are given a 0-indexed integer array nums. for each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals: 2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1. 1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied. 0, if none of the previous conditions holds. return the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.
kth smallest number in multiplication table nearly everyone has used the multiplication table. the multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed). given three integers m, n, and k, return the kth smallest element in the m x n multiplication table.
combinations given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n]. you may return the answer in any order.
largest 1-bordered square given a 2d grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.
split two strings to make palindrome you are given two strings a and b of the same length. choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. check if aprefix + bsuffix or bprefix + asuffix forms a palindrome. when you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. for example, if s = "abc", then "" + "abc", "a" + "bc", "ab" + "c" , and "abc" + "" are valid splits. return true if it is possible to form a palindrome string, otherwise return false. notice that x + y denotes the concatenation of strings x and y.
closest dessert cost you would like to make dessert and are preparing to buy the ingredients. you have n ice cream base flavors and m types of toppings to choose from. you must follow these rules when making your dessert: there must be exactly one ice cream base. you can add one or more types of topping or have no toppings at all. there are at most two of each type of topping. you are given three inputs: basecosts, an integer array of length n, where each basecosts[i] represents the price of the ith ice cream base flavor. toppingcosts, an integer array of length m, where each toppingcosts[i] is the price of one of the ith topping. target, an integer representing your target price for dessert. you want to make a dessert with a total cost as close to target as possible. return the closest possible cost of the dessert to target. if there are multiple, return the lower one.
minimum additions to make valid string given a string word to which you can insert letters "a", "b" or "c" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid. a string is called valid if it can be formed by concatenating the string "abc" several times.
minimum addition to make integer beautiful you are given two positive integers n and target. an integer is considered beautiful if the sum of its digits is less than or equal to target. return the minimum non-negative integer x such that n + x is beautiful. the input will be generated such that it is always possible to make n beautiful.
find duplicate file in system given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. you may return the answer in any order. a group of duplicate files consists of at least two files that have the same content. a single directory info string in the input list has the following format: "root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)" it means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory "root/d1/d2/.../dm". note that n >= 1 and m >= 0. if m = 0, it means the directory is just the root directory. the output is a list of groups of duplicate file paths. for each group, it contains all the file paths of the files that have the same content. a file path is a string that has the following format: "directory_path/file_name.txt"
n-th tribonacci number the tribonacci sequence tn is defined as follows: t0 = 0, t1 = 1, t2 = 1, and tn+3 = tn + tn+1 + tn+2 for n >= 0. given n, return the value of tn.
check if word is valid after substitutions given a string s, determine if it is valid. a string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following operation any number of times: insert string "abc" into any position in t. more formally, t becomes tleft + "abc" + tright, where t == tleft + tright. note that tleft and tright may be empty. return true if s is a valid string, otherwise, return false.
count days spent together alice and bob are traveling to rome for separate business meetings. you are given 4 strings arrivealice, leavealice, arrivebob, and leavebob. alice will be in the city from the dates arrivealice to leavealice (inclusive), while bob will be in the city from the dates arrivebob to leavebob (inclusive). each will be a 5-character string in the format "mm-dd", corresponding to the month and day of the date. return the total number of days that alice and bob are in rome together. you can assume that all dates occur in the same calendar year, which is not a leap year. note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].
minimum impossible or you are given a 0-indexed integer array nums. we say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. in other words, an integer is expressible if it can be written as the bitwise or of some subsequence of nums. return the minimum positive non-zero integer that is not expressible from nums.
validate stack sequences given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.
range module a range module is a module that tracks ranges of numbers. design a data structure to track the ranges represented as half-open intervals and query about them. a half-open interval [left, right) denotes all the real numbers x where left <= x < right. implement the rangemodule class: rangemodule() initializes the object of the data structure. void addrange(int left, int right) adds the half-open interval [left, right), tracking every real number in that interval. adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked. boolean queryrange(int left, int right) returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise. void removerange(int left, int right) stops tracking every real number currently being tracked in the half-open interval [left, right).
employees whose manager left the company sql schema table: employees +-------------+----------+ | column name | type | +-------------+----------+ | employee_id | int | | name | varchar | | manager_id | int | | salary | int | +-------------+----------+ employee_id is the primary key for this table. this table contains information about the employees, their salary, and the id of their manager. some employees do not have a manager (manager_id is null). write an sql query to report the ids of the employees whose salary is strictly less than $30000 and whose manager left the company. when a manager leaves the company, their information is deleted from the employees table, but the reports still have their manager_id set to the manager that left. return the result table ordered by employee_id. the query result format is in the following example.
department highest salary sql schema table: employee +--------------+---------+ | column name | type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentid | int | +--------------+---------+ id is the primary key column for this table. departmentid is a foreign key of the id from the department table. each row of this table indicates the id, name, and salary of an employee. it also contains the id of their department. table: department +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key column for this table. it is guaranteed that department name is not null. each row of this table indicates the id of a department and its name. write an sql query to find employees who have the highest salary in each of the departments. return the result table in any order. the query result format is in the following example.
copy list with random pointer a linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. construct a deep copy of the list. the deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. none of the pointers in the new list should point to nodes in the original list. for example, if there are two nodes x and y in the original list, where x.random --> y, then for the corresponding two nodes x and y in the copied list, x.random --> y. return the head of the copied linked list. the linked list is represented in the input/output as a list of n nodes. each node is represented as a pair of [val, random_index] where: val: an integer representing node.val random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node. your code will only be given the head of the original linked list.
maximum rows covered by columns you are given a 0-indexed m x n binary matrix matrix and an integer numselect, which denotes the number of distinct columns you must select from matrix. let us consider s = {c1, c2, ...., cnumselect} as the set of columns selected by you. a row row is covered by s if: for each cell matrix[row][col] (0 <= col <= n - 1) where matrix[row][col] == 1, col is present in s or, no cell in row has a value of 1. you need to choose numselect columns such that the number of rows that are covered is maximized. return the maximum number of rows that can be covered by a set of numselect columns.
movie rating sql schema table: movies +---------------+---------+ | column name | type | +---------------+---------+ | movie_id | int | | title | varchar | +---------------+---------+ movie_id is the primary key for this table. title is the name of the movie. table: users +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | name | varchar | +---------------+---------+ user_id is the primary key for this table. table: movierating +---------------+---------+ | column name | type | +---------------+---------+ | movie_id | int | | user_id | int | | rating | int | | created_at | date | +---------------+---------+ (movie_id, user_id) is the primary key for this table. this table contains the rating of a movie by a user in their review. created_at is the user's review date. write an sql query to: find the name of the user who has rated the greatest number of movies. in case of a tie, return the lexicographically smaller user name. find the movie name with the highest average rating in february 2020. in case of a tie, return the lexicographically smaller movie name. the query result format is in the following example.
gcd sort of an array you are given an integer array nums, and you can perform the following operation any number of times on nums: swap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j]. return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.
take gifts from the richest pile you are given an integer array gifts denoting the number of gifts in various piles. every second, you do the following: choose the pile with the maximum number of gifts. if there is more than one pile with the maximum number of gifts, choose any. leave behind the floor of the square root of the number of gifts in the pile. take the rest of the gifts. return the number of gifts remaining after k seconds.
count largest group you are given an integer n. each number from 1 to n is grouped according to the sum of its digits. return the number of groups that have the largest size.
separate the digits in an array given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums. to separate the digits of an integer is to get all the digits it has in the same order. for example, for the integer 10921, the separation of its digits is [1,0,9,2,1].
replace the substring for balanced string you are given a string s of length n containing only four kinds of characters: 'q', 'w', 'e', and 'r'. a string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string. return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. if s is already balanced, return 0.
maximum length of a concatenated string with unique characters you are given an array of strings arr. a string s is formed by the concatenation of a subsequence of arr that has unique characters. return the maximum possible length of s. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
deepest leaves sum given the root of a binary tree, return the sum of values of its deepest leaves.
construct the rectangle a web developer needs to know how to design a web page's size. so, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length l and width w satisfy the following requirements: the area of the rectangular web page you designed must equal to the given target area. the width w should not be larger than the length l, which means l >= w. the difference between length l and width w should be as small as possible. return an array [l, w] where l and w are the length and width of the web page you designed in sequence.
binary tree level order traversal given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
reachable nodes with restrictions there is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. you are given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are also given an integer array restricted which represents restricted nodes. return the maximum number of nodes you can reach from node 0 without visiting a restricted node. note that node 0 will not be a restricted node.
range sum query - immutable given an integer array nums, handle multiple queries of the following type: calculate the sum of the elements of nums between indices left and right inclusive where left <= right. implement the numarray class: numarray(int[] nums) initializes the object with the integer array nums. int sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
create binary tree from descriptions you are given a 2d integer array descriptions where descriptions[i] = [parenti, childi, islefti] indicates that parenti is the parent of childi in a binary tree of unique values. furthermore, if islefti == 1, then childi is the left child of parenti. if islefti == 0, then childi is the right child of parenti. construct the binary tree described by descriptions and return its root. the test cases will be generated such that the binary tree is valid.
concatenation of array given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed). specifically, ans is the concatenation of two nums arrays. return the array ans.
base 7 given an integer num, return a string of its base 7 representation.
egg drop with 2 eggs and n floors you are given two identical eggs and you have access to a building with n floors labeled from 1 to n. you know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. in each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves. return the minimum number of moves that you need to determine with certainty what the value of f is.
number of boomerangs you are given n points in the plane that are all distinct, where points[i] = [xi, yi]. a boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters). return the number of boomerangs.
reverse linked list given the head of a singly linked list, reverse the list, and return the reversed list.
largest multiple of three given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. if there is no answer return an empty string. since the answer may not fit in an integer data type, return the answer as a string. note that the returning answer must not contain unnecessary leading zeros.
maximum number of balls in a box you are working in a ball factory where you have n balls numbered from lowlimit up to highlimit inclusive (i.e., n == highlimit - lowlimit + 1), and an infinite number of boxes numbered from 1 to infinity. your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. for example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1. given two integers lowlimit and highlimit, return the number of balls in the box with the most balls.
subtract the product and sum of digits of an integer given an integer number n, return the difference between the product of its digits and the sum of its digits.
minimum number of taps to open to water a garden there is a one-dimensional garden on the x-axis. the garden starts at the point 0 and ends at the point n. (i.e the length of the garden is n). there are n + 1 taps located at points [0, 1, ..., n] in the garden. given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open. return the minimum number of taps that should be open to water the whole garden, if the garden cannot be watered return -1.
minimum genetic mutation a gene string can be represented by an 8-character long string, with choices from 'a', 'c', 'g', and 't'. suppose we need to investigate a mutation from a gene string startgene to a gene string endgene where one mutation is defined as one single character changed in the gene string. for example, "aaccggtt" --> "aaccggta" is one mutation. there is also a gene bank bank that records all the valid gene mutations. a gene must be in bank to make it a valid gene string. given the two gene strings startgene and endgene and the gene bank bank, return the minimum number of mutations needed to mutate from startgene to endgene. if there is no such a mutation, return -1. note that the starting point is assumed to be valid, so it might not be included in the bank.
cheapest flights within k stops there are n cities connected by some number of flights. you are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei. you are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. if there is no such route, return -1.
find bottom left tree value given the root of a binary tree, return the leftmost value in the last row of the tree.
encrypt and decrypt strings you are given a character array keys containing unique characters and a string array values containing strings of length 2. you are also given another string array dictionary that contains all permitted original strings after decryption. you should implement a data structure that can encrypt or decrypt a 0-indexed string. a string is encrypted with the following process: for each character c in the string, we find the index i satisfying keys[i] == c in keys. replace c with values[i] in the string. note that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string "" is returned. a string is decrypted with the following process: for each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. if there are multiple valid i, we choose any one of them. this means a string could have multiple possible strings it can decrypt to. replace s with keys[i] in the string. implement the encrypter class: encrypter(char[] keys, string[] values, string[] dictionary) initializes the encrypter class with keys, values, and dictionary. string encrypt(string word1) encrypts word1 with the encryption process described above and returns the encrypted string. int decrypt(string word2) returns the number of possible strings word2 could decrypt to that also appear in dictionary.
132 pattern given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j]. return true if there is a 132 pattern in nums, otherwise, return false.
remove nodes from linked list you are given the head of a linked list. remove every node which has a node with a strictly greater value anywhere to the right side of it. return the head of the modified linked list.
most profit assigning work you have n jobs and m workers. you are given three arrays: difficulty, profit, and worker where: difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]). every worker can be assigned at most one job, but one job can be completed multiple times. for example, if three workers attempt the same job that pays $1, then the total profit will be $3. if a worker cannot complete any job, their profit is $0. return the maximum profit we can achieve after assigning the workers to the jobs.
find smallest letter greater than target you are given an array of characters letters that is sorted in non-decreasing order, and a character target. there are at least two different characters in letters. return the smallest character in letters that is lexicographically greater than target. if such a character does not exist, return the first character in letters.
make array zero by subtracting equal amounts you are given a non-negative integer array nums. in one operation, you must: choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums. subtract x from every positive element in nums. return the minimum number of operations to make every element in nums equal to 0.
min max game you are given a 0-indexed integer array nums whose length is a power of 2. apply the following algorithm on nums: let n be the length of nums. if n == 1, end the process. otherwise, create a new 0-indexed integer array newnums of length n / 2. for every even index i where 0 <= i < n / 2, assign the value of newnums[i] as min(nums[2 * i], nums[2 * i + 1]). for every odd index i where 0 <= i < n / 2, assign the value of newnums[i] as max(nums[2 * i], nums[2 * i + 1]). replace the array nums with newnums. repeat the entire process starting from step 1. return the last number that remains in nums after applying the algorithm.
distinct subsequences ii given a string s, return the number of distinct non-empty subsequences of s. since the answer may be very large, return it modulo 109 + 7. a subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not.
maximum equal frequency given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences. if after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).
symmetric tree given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
optimal division you are given an integer array nums. the adjacent integers in nums will perform the float division. for example, for nums = [2,3,4], we will evaluate the expression "2/3/4". however, you can add any number of parenthesis at any position to change the priority of operations. you want to add these parentheses such the value of the expression after the evaluation is maximum. return the corresponding expression that has the maximum value in string format. note: your expression should not contain redundant parenthesis.
lexicographically smallest beautiful string a string is beautiful if: it consists of the first k letters of the english lowercase alphabet. it does not contain any substring of length 2 or more which is a palindrome. you are given a beautiful string s of length n and a positive integer k. return the lexicographically smallest string of length n, which is larger than s and is beautiful. if there is no such string, return an empty string. a string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. for example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.
partition array such that maximum difference is k you are given an integer array nums and an integer k. you may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences. return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k. a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
maximum tastiness of candy basket you are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k. the store sells baskets of k distinct candies. the tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket. return the maximum tastiness of a candy basket.
race car your car starts at position 0 and speed +1 on an infinite number line. your car can go into negative positions. your car drives automatically according to a sequence of instructions 'a' (accelerate) and 'r' (reverse): when you get an instruction 'a', your car does the following: position += speed speed *= 2 when you get an instruction 'r', your car does the following: if your speed is positive then speed = -1 otherwise speed = 1 your position stays the same. for example, after commands "aar", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1. given a target position target, return the length of the shortest sequence of instructions to get there.
check if matrix is x-matrix a square matrix is said to be an x-matrix if both of the following conditions hold: all the elements in the diagonals of the matrix are non-zero. all other elements are 0. given a 2d integer array grid of size n x n representing a square matrix, return true if grid is an x-matrix. otherwise, return false.
minimum falling path sum ii given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts. a falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.
defanging an ip address given a valid (ipv4) ip address, return a defanged version of that ip address. a defanged ip address replaces every period "." with "[.]".
sort the matrix diagonally a matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. for example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2]. given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.
sliding subarray beauty given an integer array nums containing n integers, find the beauty of each subarray of size k. the beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers. return an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array. a subarray is a contiguous non-empty sequence of elements within an array.
simple bank system you have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). the bank has n accounts numbered from 1 to n. the initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)th account having an initial balance of balance[i]. execute all the valid transactions. a transaction is valid if: the given account number(s) are between 1 and n, and the amount of money withdrawn or transferred from is less than or equal to the balance of the account. implement the bank class: bank(long[] balance) initializes the object with the 0-indexed integer array balance. boolean transfer(int account1, int account2, long money) transfers money dollars from the account numbered account1 to the account numbered account2. return true if the transaction was successful, false otherwise. boolean deposit(int account, long money) deposit money dollars into the account numbered account. return true if the transaction was successful, false otherwise. boolean withdraw(int account, long money) withdraw money dollars from the account numbered account. return true if the transaction was successful, false otherwise.
convert bst to greater tree given the root of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus the sum of all keys greater than the original key in bst. as a reminder, a binary search tree is a tree that satisfies these constraints: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees.
contains duplicate iii you are given an integer array nums and two integers indexdiff and valuediff. find a pair of indices (i, j) such that: i != j, abs(i - j) <= indexdiff. abs(nums[i] - nums[j]) <= valuediff, and return true if such pair exists or false otherwise.
stone game vii alice and bob take turns playing a game, with alice starting first. there are n stones arranged in a row. on each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. the winner is the one with the higher score when there are no stones left to remove. bob found that he will always lose this game (poor bob, he always loses), so he decided to minimize the score's difference. alice's goal is to maximize the difference in the score. given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in alice and bob's score if they both play optimally.
apply transform over each element in array given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element. the returned array should be created such that returnedarray[i] = fn(arr[i], i). please solve it without the built-in array.map method.
perfect number a perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. a divisor of an integer x is an integer that can divide x evenly. given an integer n, return true if n is a perfect number, otherwise return false.
invert binary tree given the root of a binary tree, invert the tree, and return its root.
curry given a function fn, return a curried version of that function. a curried function is a function that accepts fewer or an equal number of parameters as the original function and returns either another curried function or the same value the original function would have returned. in practical terms, if you called the original function like sum(1,2,3), you would call the curried version like csum(1)(2)(3), csum(1)(2,3), csum(1,2)(3), or csum(1,2,3). all these methods of calling the curried function should return the same value as the original.
best time to buy and sell stock with cooldown you are given an array prices where prices[i] is the price of a given stock on the ith day. find the maximum profit you can achieve. you may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: after you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
stock price fluctuation you are given a stream of records about a particular stock. each record contains a timestamp and the corresponding price of the stock at that timestamp. unfortunately due to the volatile nature of the stock market, the records do not come in order. even worse, some records may be incorrect. another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record. design an algorithm that: updates the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp. finds the latest price of the stock based on the current records. the latest price is the price at the latest timestamp recorded. finds the maximum price the stock has been based on the current records. finds the minimum price the stock has been based on the current records. implement the stockprice class: stockprice() initializes the object with no price records. void update(int timestamp, int price) updates the price of the stock at the given timestamp. int current() returns the latest price of the stock. int maximum() returns the maximum price of the stock. int minimum() returns the minimum price of the stock.
jump game iii given an array of non-negative integers arr, you are initially positioned at start index of the array. when you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0. notice that you can not jump outside of the array at any time.
game play analysis iv sql schema table: activity +--------------+---------+ | column name | type | +--------------+---------+ | player_id | int | | device_id | int | | event_date | date | | games_played | int | +--------------+---------+ (player_id, event_date) is the primary key of this table. this table shows the activity of players of some games. each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device. write an sql query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. in other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players. the query result format is in the following example.
insert interval you are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. you are also given an interval newinterval = [start, end] that represents the start and end of another interval. insert newinterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). return intervals after the insertion.
minimum area rectangle ii you are given an array of points in the x-y plane points where points[i] = [xi, yi]. return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes. if there is not any such rectangle, return 0. answers within 10-5 of the actual answer will be accepted.
remove zero sum consecutive nodes from linked list given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences. after doing so, return the head of the final linked list. you may return any such answer. (note that in the examples below, all sequences are serializations of listnode objects.)
maximize the confusion of an exam a teacher is writing a test with n true/false questions, with 't' denoting true and 'f' denoting false. he wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row). you are given a string answerkey, where answerkey[i] is the original answer to the ith question. in addition, you are given an integer k, the maximum number of times you may perform the following operation: change the answer key for any question to 't' or 'f' (i.e., set answerkey[i] to 't' or 'f'). return the maximum number of consecutive 't's or 'f's in the answer key after performing the operation at most k times.
minimum length of string after deleting similar ends given a string s consisting only of characters 'a', 'b', and 'c'. you are asked to apply the following algorithm on the string any number of times: pick a non-empty prefix from the string s where all the characters in the prefix are equal. pick a non-empty suffix from the string s where all the characters in this suffix are equal. the prefix and the suffix should not intersect at any index. the characters from the prefix and suffix must be the same. delete both the prefix and the suffix. return the minimum length of s after performing the above operation any number of times (possibly zero times).
find pivot index given an array of integers nums, calculate the pivot index of this array. the pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. if the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. this also applies to the right edge of the array. return the leftmost pivot index. if no such index exists, return -1.
construct string with repeat limit you are given a string s and an integer repeatlimit. construct a new string repeatlimitedstring using the characters of s such that no letter appears more than repeatlimit times in a row. you do not have to use all characters from s. return the lexicographically largest repeatlimitedstring possible. a string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. if the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.
check knight tour configuration there is a knight on an n x n chessboard. in a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once. you are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. the moves are 0-indexed. return true if grid represents a valid configuration of the knight's movements or false otherwise. note that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. the figure below illustrates all the possible eight moves of a knight from some cell.
design an atm machine there is an atm machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. initially the atm is empty. the user can use the machine to deposit or withdraw any amount of money. when withdrawing, the machine prioritizes using banknotes of larger values. for example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes. however, if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote. implement the atm class: atm() initializes the atm object. void deposit(int[] banknotescount) deposits new banknotes in the order $20, $50, $100, $200, and $500. int[] withdraw(int amount) returns an array of length 5 of the number of banknotes that will be handed to the user in the order $20, $50, $100, $200, and $500, and update the number of banknotes in the atm after withdrawing. returns [-1] if it is not possible (do not withdraw any banknotes in this case).
counter given an integer n, return a counter function. this counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).
employees with missing information sql schema table: employees +-------------+---------+ | column name | type | +-------------+---------+ | employee_id | int | | name | varchar | +-------------+---------+ employee_id is the primary key for this table. each row of this table indicates the name of the employee whose id is employee_id. table: salaries +-------------+---------+ | column name | type | +-------------+---------+ | employee_id | int | | salary | int | +-------------+---------+ employee_id is the primary key for this table. each row of this table indicates the salary of the employee whose id is employee_id. write an sql query to report the ids of all the employees with missing information. the information of an employee is missing if: the employee's name is missing, or the employee's salary is missing. return the result table ordered by employee_id in ascending order. the query result format is in the following example.
sum of root to leaf binary numbers you are given the root of a binary tree where each node has a value 0 or 1. each root-to-leaf path represents a binary number starting with the most significant bit. for example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13. for all leaves in the tree, consider the numbers represented by the path from the root to that leaf. return the sum of these numbers. the test cases are generated so that the answer fits in a 32-bits integer.
possible bipartition we want to split a group of n people (labeled from 1 to n) into two groups of any size. each person may dislike some other people, and they should not go into the same group. given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.
maximum of absolute value expression given two arrays of integers with equal lengths, return the maximum value of: |arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j| where the maximum is taken over all 0 <= i, j < arr1.length.
binary tree pruning given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed. a subtree of a node node is node plus every node that is a descendant of node.
product of array except self given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. the product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. you must write an algorithm that runs in o(n) time and without using the division operation.
two sum ii - input array is sorted given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length. return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2. the tests are generated such that there is exactly one solution. you may not use the same element twice. your solution must use only constant extra space.
operations on tree you are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. the root of the tree is node 0, so parent[0] = -1 since it has no parent. you want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree. the data structure should support the following functions: lock: locks the given node for the given user and prevents other users from locking the same node. you may only lock a node using this function if the node is unlocked. unlock: unlocks the given node for the given user. you may only unlock a node using this function if it is currently locked by the same user. upgrade: locks the given node for the given user and unlocks all of its descendants regardless of who locked it. you may only upgrade a node if all 3 conditions are true: the node is unlocked, it has at least one locked descendant (by any user), and it does not have any locked ancestors. implement the lockingtree class: lockingtree(int[] parent) initializes the data structure with the parent array. lock(int num, int user) returns true if it is possible for the user with id user to lock the node num, or false otherwise. if it is possible, the node num will become locked by the user with id user. unlock(int num, int user) returns true if it is possible for the user with id user to unlock the node num, or false otherwise. if it is possible, the node num will become unlocked. upgrade(int num, int user) returns true if it is possible for the user with id user to upgrade the node num, or false otherwise. if it is possible, the node num will be upgraded.
count good nodes in binary tree given a binary tree root, a node x in the tree is named good if in the path from root to x there are no nodes with a value greater than x. return the number of good nodes in the binary tree.
all ancestors of a node in a directed acyclic graph you are given a positive integer n representing the number of nodes of a directed acyclic graph (dag). the nodes are numbered from 0 to n - 1 (inclusive). you are also given a 2d integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph. return a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order. a node u is an ancestor of another node v if u can reach v via a set of edges.
minimum string length after removing substrings you are given a string s consisting only of uppercase english letters. you can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "ab" or "cd" from s. return the minimum possible length of the resulting string that you can obtain. note that the string concatenates after removing the substring and could produce new "ab" or "cd" substrings.
power of heroes you are given a 0-indexed integer array nums representing the strength of some heroes. the power of a group of heroes is defined as follows: let i0, i1, ... ,ik be the indices of the heroes in a group. then, the power of this group is max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik]). return the sum of the power of all non-empty groups of heroes possible. since the sum could be very large, return it modulo 109 + 7.
categorize box according to criteria given four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box. the box is "bulky" if: any of the dimensions of the box is greater or equal to 104. or, the volume of the box is greater or equal to 109. if the mass of the box is greater or equal to 100, it is "heavy". if the box is both "bulky" and "heavy", then its category is "both". if the box is neither "bulky" nor "heavy", then its category is "neither". if the box is "bulky" but not "heavy", then its category is "bulky". if the box is "heavy" but not "bulky", then its category is "heavy". note that the volume of the box is the product of its length, width and height.
longest substring of all vowels in order a string is considered beautiful if it satisfies the following conditions: each of the 5 english vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it. the letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.). for example, strings "aeiou" and "aaaaaaeiiiioou" are considered beautiful, but "uaeio", "aeoiu", and "aaaeeeooo" are not beautiful. given a string word consisting of english vowels, return the length of the longest beautiful substring of word. if no such substring exists, return 0. a substring is a contiguous sequence of characters in a string.
max sum of rectangle no larger than k given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k. it is guaranteed that there will be a rectangle with a sum no larger than k.
replace all digits with characters you are given a 0-indexed string s that has lowercase english letters in its even indices and digits in its odd indices. there is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c. for example, shift('a', 5) = 'f' and shift('x', 0) = 'x'. for every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]). return s after replacing all digits. it is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.
maximum product of two elements in an array given the array of integers nums, you will choose two different indices i and j of that array. return the maximum value of (nums[i]-1)*(nums[j]-1).
destroying asteroids you are given an integer mass, which represents the original mass of a planet. you are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid. you can arrange for the planet to collide with the asteroids in any arbitrary order. if the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. otherwise, the planet is destroyed. return true if all asteroids can be destroyed. otherwise, return false.
redundant connection ii in this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents. the given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. the resulting graph is given as a 2d-array of edges. each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi. return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. if there are multiple answers, return the answer that occurs last in the given 2d-array.
next greater numerically balanced number an integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x. given an integer n, return the smallest numerically balanced number strictly greater than n.
split array into fibonacci sequence you are given a string of digits num, such as "123456579". we can split it into a fibonacci-like sequence [123, 456, 579]. formally, a fibonacci-like sequence is a list f of non-negative integers such that: 0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type), f.length >= 3, and f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2. note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself. return any fibonacci-like sequence split from num, or return [] if it cannot be done.
minimum path sum given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. note: you can only move either down or right at any point in time.
construct binary tree from preorder and inorder traversal given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
tweet counts per frequency a social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. these periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day). for example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies: every minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000] every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000] every day (86400-second chunks): [10,10000] notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example). design and implement an api to help the company with their analysis. implement the tweetcounts class: tweetcounts() initializes the tweetcounts object. void recordtweet(string tweetname, int time) stores the tweetname at the recorded time (in seconds). list<integer> gettweetcountsperfrequency(string freq, string tweetname, int starttime, int endtime) returns a list of integers representing the number of tweets with tweetname in each time chunk for the given period of time [starttime, endtime] (in seconds) and frequency freq. freq is one of "minute", "hour", or "day" representing a frequency of every minute, hour, or day respectively. example: input ["tweetcounts","recordtweet","recordtweet","recordtweet","gettweetcountsperfrequency","gettweetcountsperfrequency","recordtweet","gettweetcountsperfrequency"] [[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]] output [null,null,null,null,[2],[2,1],null,[4]] explanation tweetcounts tweetcounts = new tweetcounts(); tweetcounts.recordtweet("tweet3", 0); // new tweet "tweet3" at time 0 tweetcounts.recordtweet("tweet3", 60); // new tweet "tweet3" at time 60 tweetcounts.recordtweet("tweet3", 10); // new tweet "tweet3" at time 10 tweetcounts.gettweetcountsperfrequency("minute", "tweet3", 0, 59); // return [2]; chunk [0,59] had 2 tweets tweetcounts.gettweetcountsperfrequency("minute", "tweet3", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet tweetcounts.recordtweet("tweet3", 120); // new tweet "tweet3" at time 120 tweetcounts.gettweetcountsperfrequency("hour", "tweet3", 0, 210); // return [4]; chunk [0,210] had 4 tweets constraints: 0 <= time, starttime, endtime <= 109 0 <= endtime - starttime <= 104 there will be at most 104 calls in total to recordtweet and gettweetcountsperfrequency.
count words obtained after adding a letter you are given two 0-indexed arrays of strings startwords and targetwords. each string consists of lowercase english letters only. for each string in targetwords, check if it is possible to choose a string from startwords and perform a conversion operation on it to be equal to that from targetwords. the conversion operation is described in the following two steps: append any lowercase letter that is not present in the string to its end. for example, if the string is "abc", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. if 'd' is added, the resulting string will be "abcd". rearrange the letters of the new string in any arbitrary order. for example, "abcd" can be rearranged to "acbd", "bacd", "cbda", and so on. note that it can also be rearranged to "abcd" itself. return the number of strings in targetwords that can be obtained by performing the operations on any string of startwords. note that you will only be verifying if the string in targetwords can be obtained from a string in startwords by performing the operations. the strings in startwords do not actually change during this process.
escape the ghosts you are playing a simplified pac-man game on an infinite 2-d grid. you start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. there are several ghosts on the map with their starting positions given as a 2d array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. all inputs are integral coordinates. each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. all actions happen simultaneously. you escape if and only if you can reach the target before any ghost reaches you. if you reach any square (including the target) at the same time as a ghost, it does not count as an escape. return true if it is possible to escape regardless of how the ghosts move, otherwise return false.
valid palindrome a phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. alphanumeric characters include letters and numbers. given a string s, return true if it is a palindrome, or false otherwise.
sort the people you are given an array of strings names, and an array heights that consists of distinct positive integers. both arrays are of length n. for each index i, names[i] and heights[i] denote the name and height of the ith person. return names sorted in descending order by the people's heights.
collect coins in a tree there exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. you are given an integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i. initially, you choose to start at any vertex in the tree. then, you can perform the following operations any number of times: collect all the coins that are at a distance of at most 2 from the current vertex, or move to any adjacent vertex in the tree. find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex. note that if you pass an edge several times, you need to count it into the answer several times.
maximum sum of distinct subarrays with length k you are given an integer array nums and an integer k. find the maximum subarray sum of all the subarrays of nums that meet the following conditions: the length of the subarray is k, and all the elements of the subarray are distinct. return the maximum subarray sum of all the subarrays that meet the conditions. if no subarray meets the conditions, return 0. a subarray is a contiguous non-empty sequence of elements within an array.
elimination game you have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. apply the following algorithm on arr: starting from left to right, remove the first number and every other number afterward until you reach the end of the list. repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. keep repeating the steps again, alternating left to right and right to left, until a single number remains. given the integer n, return the last number that remains in arr.
maximum xor after operations you are given a 0-indexed integer array nums. in one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] and (nums[i] xor x). note that and is the bitwise and operation and xor is the bitwise xor operation. return the maximum possible bitwise xor of all elements of nums after applying the operation any number of times.
unique paths there is a robot on an m x n grid. the robot is initially located at the top-left corner (i.e., grid[0][0]). the robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). the robot can only move either down or right at any point in time. given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner. the test cases are generated so that the answer will be less than or equal to 2 * 109.
destroy sequential targets you are given a 0-indexed array nums consisting of positive integers, representing targets on a number line. you are also given an integer space. you have a machine which can destroy targets. seeding the machine with some nums[i] allows it to destroy all targets with values that can be represented as nums[i] + c * space, where c is any non-negative integer. you want to destroy the maximum number of targets in nums. return the minimum value of nums[i] you can seed the machine with to destroy the maximum number of targets.
maximum number of robots within budget you have n robots. you are given two 0-indexed integer arrays, chargetimes and runningcosts, both of length n. the ith robot costs chargetimes[i] units to charge and costs runningcosts[i] units to run. you are also given an integer budget. the total cost of running k chosen robots is equal to max(chargetimes) + k * sum(runningcosts), where max(chargetimes) is the largest charge cost among the k robots and sum(runningcosts) is the sum of running costs among the k robots. return the maximum number of consecutive robots you can run such that the total cost does not exceed budget.
count nice pairs in an array you are given an array nums that consists of non-negative integers. let us define rev(x) as the reverse of the non-negative integer x. for example, rev(123) = 321, and rev(120) = 21. a pair of indices (i, j) is nice if it satisfies all of the following conditions: 0 <= i < j < nums.length nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]) return the number of nice pairs of indices. since that number can be too large, return it modulo 109 + 7.
number of ways to paint n × 3 grid you have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: red, yellow, or green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color). given n the number of rows of the grid, return the number of ways you can paint this grid. as the answer may grow large, the answer must be computed modulo 109 + 7.
max consecutive ones iii given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
market analysis i sql schema table: users +----------------+---------+ | column name | type | +----------------+---------+ | user_id | int | | join_date | date | | favorite_brand | varchar | +----------------+---------+ user_id is the primary key of this table. this table has the info of the users of an online shopping website where users can sell and buy items. table: orders +---------------+---------+ | column name | type | +---------------+---------+ | order_id | int | | order_date | date | | item_id | int | | buyer_id | int | | seller_id | int | +---------------+---------+ order_id is the primary key of this table. item_id is a foreign key to the items table. buyer_id and seller_id are foreign keys to the users table. table: items +---------------+---------+ | column name | type | +---------------+---------+ | item_id | int | | item_brand | varchar | +---------------+---------+ item_id is the primary key of this table. write an sql query to find for each user, the join date and the number of orders they made as a buyer in 2019. return the result table in any order. the query result format is in the following example.
the skyline problem a city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. given the locations and heights of all the buildings, return the skyline formed by these buildings collectively. the geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]: lefti is the x coordinate of the left edge of the ith building. righti is the x coordinate of the right edge of the ith building. heighti is the height of the ith building. you may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0. the skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. any ground between the leftmost and rightmost buildings should be part of the skyline's contour. note: there must be no consecutive horizontal lines of equal height in the output skyline. for instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]
count hills and valleys in an array you are given a 0-indexed integer array nums. an index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j]. note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index. return the number of hills and valleys in nums.
build an array with stack operations you are given an integer array target and an integer n. you have an empty stack with the two following operations: "push": pushes an integer to the top of the stack. "pop": removes the integer on the top of the stack. you also have a stream of the integers in the range [1, n]. use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. you should follow the following rules: if the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack. if the stack is not empty, pop the integer at the top of the stack. if, at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack. return the stack operations needed to build target following the mentioned rules. if there are multiple valid answers, return any of them.
maximum score after splitting a string given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring). the score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.
binary search tree iterator implement the bstiterator class that represents an iterator over the in-order traversal of a binary search tree (bst): bstiterator(treenode root) initializes an object of the bstiterator class. the root of the bst is given as part of the constructor. the pointer should be initialized to a non-existent number smaller than any element in the bst. boolean hasnext() returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false. int next() moves the pointer to the right, then returns the number at the pointer. notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the bst. you may assume that next() calls will always be valid. that is, there will be at least a next number in the in-order traversal when next() is called.
design bitset a bitset is a data structure that compactly stores bits. implement the bitset class: bitset(int size) initializes the bitset with size bits, all of which are 0. void fix(int idx) updates the value of the bit at the index idx to 1. if the value was already 1, no change occurs. void unfix(int idx) updates the value of the bit at the index idx to 0. if the value was already 0, no change occurs. void flip() flips the values of each bit in the bitset. in other words, all bits with value 0 will now have value 1 and vice versa. boolean all() checks if the value of each bit in the bitset is 1. returns true if it satisfies the condition, false otherwise. boolean one() checks if there is at least one bit in the bitset with value 1. returns true if it satisfies the condition, false otherwise. int count() returns the total number of bits in the bitset which have value 1. string tostring() returns the current composition of the bitset. note that in the resultant string, the character at the ith index should coincide with the value at the ith bit of the bitset.
minimum cost to set cooking time a generic microwave supports cooking times for: at least 1 second. at most 99 minutes and 99 seconds. to set the cooking time, you push at most four digits. the microwave normalizes what you push as four digits by prepending zeroes. it interprets the first two digits as the minutes and the last two digits as the seconds. it then adds them up as the cooking time. for example, you push 9 5 4 (three digits). it is normalized as 0954 and interpreted as 9 minutes and 54 seconds. you push 0 0 0 8 (four digits). it is interpreted as 0 minutes and 8 seconds. you push 8 0 9 0. it is interpreted as 80 minutes and 90 seconds. you push 8 1 3 0. it is interpreted as 81 minutes and 30 seconds. you are given integers startat, movecost, pushcost, and targetseconds. initially, your finger is on the digit startat. moving the finger above any specific digit costs movecost units of fatigue. pushing the digit below the finger once costs pushcost units of fatigue. there can be multiple ways to set the microwave to cook for targetseconds seconds but you are interested in the way with the minimum cost. return the minimum cost to set targetseconds seconds of cooking time. remember that one minute consists of 60 seconds.
permutation sequence the set [1, 2, 3, ..., n] contains a total of n! unique permutations. by listing and labeling all of the permutations in order, we get the following sequence for n = 3: "123" "132" "213" "231" "312" "321" given n and k, return the kth permutation sequence.
longest nice substring a string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. for example, "ababb" is nice because 'a' and 'a' appear, and 'b' and 'b' appear. however, "aba" is not because 'b' appears, but 'b' does not. given a string s, return the longest substring of s that is nice. if there are multiple, return the substring of the earliest occurrence. if there are none, return an empty string.
truncate sentence a sentence is a list of words that are separated by a single space with no leading or trailing spaces. each of the words consists of only uppercase and lowercase english letters (no punctuation). for example, "hello world", "hello", and "hello world hello world" are all sentences. you are given a sentence s and an integer k. you want to truncate s such that it contains only the first k words. return s after truncating it.
minimum rounds to complete all tasks you are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. in each round, you can complete either 2 or 3 tasks of the same difficulty level. return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.
minimum operations to make all array elements equal you are given an array nums consisting of positive integers. you are also given an integer array queries of size m. for the ith query, you want to make all of the elements of nums equal to queries[i]. you can perform the following operation on the array any number of times: increase or decrease an element of the array by 1. return an array answer of size m where answer[i] is the minimum number of operations to make all elements of nums equal to queries[i]. note that after each query the array is reset to its original state.
detonate the maximum bombs you are given a list of bombs. the range of a bomb is defined as the area where its effect can be felt. this area is in the shape of a circle with the center as the location of the bomb. the bombs are represented by a 0-indexed 2d integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the x-coordinate and y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range. you may choose to detonate a single bomb. when a bomb is detonated, it will detonate all bombs that lie in its range. these bombs will further detonate the bombs that lie in their ranges. given the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.
peeking iterator design an iterator that supports the peek operation on an existing iterator in addition to the hasnext and the next operations. implement the peekingiterator class: peekingiterator(iterator<int> nums) initializes the object with the given integer iterator iterator. int next() returns the next element in the array and moves the pointer to the next element. boolean hasnext() returns true if there are still elements in the array. int peek() returns the next element in the array without moving the pointer. note: each language may have a different implementation of the constructor and iterator, but they all support the int next() and boolean hasnext() functions.
number of excellent pairs you are given a 0-indexed positive integer array nums and a positive integer k. a pair of numbers (num1, num2) is called excellent if the following conditions are satisfied: both the numbers num1 and num2 exist in the array nums. the sum of the number of set bits in num1 or num2 and num1 and num2 is greater than or equal to k, where or is the bitwise or operation and and is the bitwise and operation. return the number of distinct excellent pairs. two pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. for example, (1, 2) and (2, 1) are distinct. note that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.
longest palindromic substring given a string s, return the longest palindromic substring in s.
validate binary tree nodes you have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftchild[i] and rightchild[i], return true if and only if all the given nodes form exactly one valid binary tree. if node i has no left child then leftchild[i] will equal -1, similarly for the right child. note that the nodes have no values and that we only use the node numbers in this problem.
count number of distinct integers after reverse operations you are given an array nums consisting of positive integers. you have to take each integer in the array, reverse its digits, and add it to the end of the array. you should apply this operation to the original integers in nums. return the number of distinct integers in the final array.
distribute repeating integers you are given an array of n integers, nums, where there are at most 50 unique values in the array. you are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. determine if it is possible to distribute nums such that: the ith customer gets exactly quantity[i] integers, the integers the ith customer gets are all equal, and every customer is satisfied. return true if it is possible to distribute nums according to the above conditions.
the k weakest rows in a matrix you are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). the soldiers are positioned in front of the civilians. that is, all the 1's will appear to the left of all the 0's in each row. a row i is weaker than a row j if one of the following is true: the number of soldiers in row i is less than the number of soldiers in row j. both rows have the same number of soldiers and i < j. return the indices of the k weakest rows in the matrix ordered from weakest to strongest.
lexicographical numbers given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order. you must write an algorithm that runs in o(n) time and uses o(1) extra space.
satisfiability of equality equations you are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names. return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.
add minimum number of rungs you are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. you are currently on the floor at height 0, and you want to reach the last rung. you are also given an integer dist. you can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. you are able to insert rungs at any positive integer height if a rung is not already there. return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.
minimum operations to reduce an integer to 0 you are given a positive integer n, you can do the following operation any number of times: add or subtract a power of 2 from n. return the minimum number of operations to make n equal to 0. a number x is power of 2 if x == 2i where i >= 0.
divide two integers given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator. the integer division should truncate toward zero, which means losing its fractional part. for example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2. return the quotient after dividing dividend by divisor. note: assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. for this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.
maximize number of nice divisors you are given a positive integer primefactors. you are asked to construct a positive integer n that satisfies the following conditions: the number of prime factors of n (not necessarily distinct) is at most primefactors. the number of nice divisors of n is maximized. note that a divisor of n is nice if it is divisible by every prime factor of n. for example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not. return the number of nice divisors of n. since that number can be too large, return it modulo 109 + 7. note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. the prime factors of a number n is a list of prime numbers such that their product equals n.
find array given subset sums you are given an integer n representing the length of an unknown array that you are trying to recover. you are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order). return the array ans of length n representing the unknown array. if multiple answers exist, return any of them. an array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. the sum of the elements in sub is one possible subset sum of arr. the sum of an empty array is considered to be 0. note: test cases are generated such that there will always be at least one correct answer.
minimum distance to type a word using two fingers you have a keyboard layout as shown above in the x-y plane, where each english uppercase letter is located at some coordinate. for example, the letter 'a' is located at coordinate (0, 0), the letter 'b' is located at coordinate (0, 1), the letter 'p' is located at coordinate (2, 3) and the letter 'z' is located at coordinate (4, 1). given the string word, return the minimum total distance to type such string using only two fingers. the distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. note that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.
stamping the grid you are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied). you are then given stamps of size stampheight x stampwidth. we want to fit the stamps such that they follow the given restrictions and requirements: cover all the empty cells. do not cover any of the occupied cells. we can put as many stamps as we want. stamps can overlap with each other. stamps are not allowed to be rotated. stamps must stay completely inside the grid. return true if it is possible to fit the stamps while following the given restrictions and requirements. otherwise, return false.
duplicate emails sql schema table: person +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | email | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table contains an email. the emails will not contain uppercase letters. write an sql query to report all the duplicate emails. note that it's guaranteed that the email field is not null. return the result table in any order. the query result format is in the following example.
maximum sum of 3 non-overlapping subarrays given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them. return the result as a list of indices representing the starting position of each interval (0-indexed). if there are multiple answers, return the lexicographically smallest one.
find n unique integers sum up to zero given an integer n, return any array containing n unique integers such that they add up to 0.
minimum fuel cost to report to the capital there is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. the capital city is city 0. you are given a 2d integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi. there is a meeting for the representatives of each city. the meeting is in the capital city. there is a car in each city. you are given an integer seats that indicates the number of seats in each car. a representative can use the car in their city to travel or change the car and ride with another representative. the cost of traveling between two cities is one liter of fuel. return the minimum number of liters of fuel to reach the capital city.
non-decreasing array given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element. we define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).
super ugly number a super ugly number is a positive integer whose prime factors are in the array primes. given an integer n and an array of integers primes, return the nth super ugly number. the nth super ugly number is guaranteed to fit in a 32-bit signed integer.
masking personal information you are given a personal information string s, representing either an email address or a phone number. return the masked personal information using the below rules. email address: an email address is: a name consisting of uppercase and lowercase english letters, followed by the '@' symbol, followed by the domain consisting of uppercase and lowercase english letters with a dot '.' somewhere in the middle (not the first or last character). to mask an email: the uppercase letters in the name and domain must be converted to lowercase letters. the middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks "*****". phone number: a phone number is formatted as follows: the phone number contains 10-13 digits. the last 10 digits make up the local number. the remaining 0-3 digits, in the beginning, make up the country code. separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way. to mask a phone number: remove all separation characters. the masked phone number should have the form: "***-***-xxxx" if the country code has 0 digits. "+*-***-***-xxxx" if the country code has 1 digit. "+**-***-***-xxxx" if the country code has 2 digits. "+***-***-***-xxxx" if the country code has 3 digits. "xxxx" is the last 4 digits of the local number.
design parking system design a parking system for a parking lot. the parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size. implement the parkingsystem class: parkingsystem(int big, int medium, int small) initializes object of the parkingsystem class. the number of slots for each parking space are given as part of the constructor. bool addcar(int cartype) checks whether there is a parking space of cartype for the car that wants to get into the parking lot. cartype can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. a car can only park in a parking space of its cartype. if there is no space available, return false, else park the car in that size space and return true.
find words that can be formed by characters you are given an array of strings words and a string chars. a string is good if it can be formed by characters from chars (each character can only be used once). return the sum of lengths of all good strings in words.
find the substring with maximum cost you are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars. the cost of the substring is the sum of the values of each character in the substring. the cost of an empty string is considered 0. the value of the character is defined in the following way: if the character is not in the string chars, then its value is its corresponding position (1-indexed) in the alphabet. for example, the value of 'a' is 1, the value of 'b' is 2, and so on. the value of 'z' is 26. otherwise, assuming i is the index where the character occurs in the string chars, then its value is vals[i]. return the maximum cost among all substrings of the string s.
make number of distinct characters equal you are given two 0-indexed strings word1 and word2. a move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j]. return true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. return false otherwise.
number of students unable to eat lunch the school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. all students stand in a queue. each student either prefers square or circular sandwiches. the number of sandwiches in the cafeteria is equal to the number of students. the sandwiches are placed in a stack. at each step: if the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue. otherwise, they will leave it and go to the queue's end. this continues until none of the queue students want to take the top sandwich and are thus unable to eat. you are given two integer arrays students and sandwiches where sandwiches[i] is the type of the ith sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the jth student in the initial queue (j = 0 is the front of the queue). return the number of students that are unable to eat.
k-th symbol in grammar we build a table of n rows (1-indexed). we start by writing 0 in the 1st row. now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10. for example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110. given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.
convert 1d array into 2d array you are given a 0-indexed 1-dimensional (1d) integer array original, and two integers, m and n. you are tasked with creating a 2-dimensional (2d) array with m rows and n columns using all the elements from original. the elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2d array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2d array, and so on. return an m x n 2d array constructed according to the above procedure, or an empty 2d array if it is impossible.
partition array into two arrays to minimize sum difference you are given an integer array nums of 2 * n integers. you need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. to partition nums, put each element of nums into one of the two arrays. return the minimum possible absolute difference.
word break ii given a string s and a dictionary of strings worddict, add spaces in s to construct a sentence where each word is a valid dictionary word. return all such possible sentences in any order. note that the same word in the dictionary may be reused multiple times in the segmentation.
minimum moves to make array complementary you are given an integer array nums of even length n and an integer limit. in one move, you can replace any integer from nums with another integer between 1 and limit, inclusive. the array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. for example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5. return the minimum number of moves required to make nums complementary.
minimum amount of time to fill cups you have a water dispenser that can dispense cold, warm, and hot water. every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water. you are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. return the minimum number of seconds needed to fill up all the cups.
time needed to inform all employees a company has n employees with a unique id for each employee from 0 to n - 1. the head of the company is the one with headid. each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headid] = -1. also, it is guaranteed that the subordination relationships have a tree structure. the head of the company wants to inform all the company employees of an urgent piece of news. he will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. the i-th employee needs informtime[i] minutes to inform all of his direct subordinates (i.e., after informtime[i] minutes, all his direct subordinates can start spreading the news). return the number of minutes needed to inform all the employees about the urgent news.
average value of even numbers that are divisible by three given an integer array nums of positive integers, return the average value of all even integers that are divisible by 3. note that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
linked list cycle given head, the head of a linked list, determine if the linked list has a cycle in it. there is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. internally, pos is used to denote the index of the node that tail's next pointer is connected to. note that pos is not passed as a parameter. return true if there is a cycle in the linked list. otherwise, return false.
minimum initial energy to finish tasks you are given an array tasks where tasks[i] = [actuali, minimumi]: actuali is the actual amount of energy you spend to finish the ith task. minimumi is the minimum amount of energy you require to begin the ith task. for example, if the task is [10, 12] and your current energy is 11, you cannot start this task. however, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it. you can finish the tasks in any order you like. return the minimum initial amount of energy you will need to finish all the tasks.
delivering boxes from storage to ports you have the task of delivering some boxes from storage to their ports using only one ship. however, this ship has a limit on the number of boxes and the total weight that it can carry. you are given an array boxes, where boxes[i] = [portsi, weighti], and three integers portscount, maxboxes, and maxweight. portsi is the port where you need to deliver the ith box and weightsi is the weight of the ith box. portscount is the number of ports. maxboxes and maxweight are the respective box and weight limits of the ship. the boxes need to be delivered in the order they are given. the ship will follow these steps: the ship will take some number of boxes from the boxes queue, not violating the maxboxes and maxweight constraints. for each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. if the ship is already at the correct port, no trip is needed, and the box can immediately be delivered. the ship then makes a return trip to storage to take more boxes from the queue. the ship must end at storage after all the boxes have been delivered. return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.
redundant connection in this problem, a tree is an undirected graph that is connected and has no cycles. you are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. the graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph. return an edge that can be removed so that the resulting graph is a tree of n nodes. if there are multiple answers, return the answer that occurs last in the input.
count ways to make array with product you are given a 2d integer array, queries. for each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. as the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7. return an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.
contains duplicate ii given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.
merge bsts to create single bst you are given n bst (binary search tree) root nodes for n separate bsts stored in an array trees (0-indexed). each bst in trees has at most 3 nodes, and no two roots have the same value. in one operation, you can: select two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j]. replace the leaf node in trees[i] with trees[j]. remove trees[j] from trees. return the root of the resulting bst if it is possible to form a valid bst after performing n - 1 operations, or null if it is impossible to create a valid bst. a bst (binary search tree) is a binary tree where each node satisfies the following property: every node in the node's left subtree has a value strictly less than the node's value. every node in the node's right subtree has a value strictly greater than the node's value. a leaf is a node that has no children.
repeated substring pattern given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
get maximum in generated array you are given an integer n. a 0-indexed integer array nums of length n + 1 is generated in the following way: nums[0] = 0 nums[1] = 1 nums[2 * i] = nums[i] when 2 <= 2 * i <= n nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n return the maximum integer in the array nums.
palindrome partitioning ii given a string s, partition s such that every substring of the partition is a palindrome . return the minimum cuts needed for a palindrome partitioning of s.
verifying an alien dictionary in an alien language, surprisingly, they also use english lowercase letters, but possibly in a different order. the order of the alphabet is some permutation of lowercase letters. given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.
grid illumination there is a 2d grid of size n x n where each cell of this grid has a lamp that is initially turned off. you are given a 2d array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. even if the same lamp is listed more than once, it is turned on. when a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal. you are also given another 2d array queries, where queries[j] = [rowj, colj]. for the jth query, determine whether grid[rowj][colj] is illuminated or not. after answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. a lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj]. return an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.
minimum operations to reduce x to zero you are given an integer array nums and an integer x. in one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. note that this modifies the array for future operations. return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.
frog jump ii you are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river. a frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. however, it can jump to any stone at most once. the length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps. more formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|. the cost of a path is the maximum length of a jump among all jumps in the path. return the minimum cost of a path for the frog.
maximum consecutive floors without special floors alice manages a company and has rented some floors of a building as office space. alice has decided some of these floors should be special floors, used for relaxation only. you are given two integers bottom and top, which denote that alice has rented all the floors from bottom to top (inclusive). you are also given the integer array special, where special[i] denotes a special floor that alice has designated for relaxation. return the maximum number of consecutive floors without a special floor.
number of subarrays with bounded maximum given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right]. the test cases are generated so that the answer will fit in a 32-bit integer.
check if string is transformable with substring sort operations given two strings s and t, transform string s into string t using the following operation any number of times: choose a non-empty substring in s and sort it in place so the characters are in ascending order. for example, applying the operation on the underlined substring in "14234" results in "12344". return true if it is possible to transform s into t. otherwise, return false. a substring is a contiguous sequence of characters within a string.
minimum moves to move a box to their target location a storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations. the game is represented by an m x n grid of characters grid where each element is a wall, floor, or box. your task is to move the box 'b' to the target position 't' under the following rules: the character 's' represents the player. the player can move up, down, left, right in grid if it is a floor (empty cell). the character '.' represents the floor which means a free cell to walk. the character '#' represents the wall which means an obstacle (impossible to walk there). there is only one box 'b' and one target cell 't' in the grid. the box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. this is a push. the player cannot walk through the box. return the minimum number of pushes to move the box to the target. if there is no way to reach the target, return -1.
xor queries of a subarray you are given an array arr of positive integers. you are also given the array queries where queries[i] = [lefti, righti]. for each query i compute the xor of elements from lefti to righti (that is, arr[lefti] xor arr[lefti + 1] xor ... xor arr[righti] ). return an array answer where answer[i] is the answer to the ith query.
construct string from binary tree given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it. omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.
shortest path with alternating colors you are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. each edge is red or blue in this graph, and there could be self-edges and parallel edges. you are given two arrays rededges and blueedges where: rededges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and blueedges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph. return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.
interleaving string given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2. an interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that: s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| <= 1 the interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... note: a + b is the concatenation of strings a and b.
all divisions with the highest score of a binary array you are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright: numsleft has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive). if i == 0, numsleft is empty, while numsright has all the elements of nums. if i == n, numsleft has all the elements of nums, while numsright is empty. the division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright. return all distinct indices that have the highest possible division score. you may return the answer in any order.
flatten binary tree to linked list given the root of a binary tree, flatten the tree into a "linked list": the "linked list" should use the same treenode class where the right child pointer points to the next node in the list and the left child pointer is always null. the "linked list" should be in the same order as a pre-order traversal of the binary tree.
largest combination with bitwise and greater than zero the bitwise and of an array nums is the bitwise and of all integers in nums. for example, for nums = [1, 5, 3], the bitwise and is equal to 1 & 5 & 3 = 1. also, for nums = [7], the bitwise and is 7. you are given an array of positive integers candidates. evaluate the bitwise and of every combination of numbers of candidates. each number in candidates may only be used once in each combination. return the size of the largest combination of candidates with a bitwise and greater than 0.
maximum number of groups entering a competition you are given a positive integer array grades which represents the grades of students in a university. you would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions: the sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last). the total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last). return the maximum number of groups that can be formed.
sum of left leaves given the root of a binary tree, return the sum of all left leaves. a leaf is a node with no children. a left leaf is a leaf that is the left child of another node.
minimum size subarray sum given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. if there is no such subarray, return 0 instead.
k-th smallest in lexicographical order given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].
cinema seat allocation a cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above. given the array reservedseats containing the numbers of seats already reserved, for example, reservedseats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved. return the maximum number of four-person groups you can assign on the cinema seats. a four-person group occupies four adjacent seats in one single row. seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.
convert the temperature you are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in celsius. you should convert celsius into kelvin and fahrenheit and return it as an array ans = [kelvin, fahrenheit]. return the array ans. answers within 10-5 of the actual answer will be accepted. note that: kelvin = celsius + 273.15 fahrenheit = celsius * 1.80 + 32.00
detect squares you are given a stream of points on the x-y plane. design an algorithm that: adds new points from the stream into a data structure. duplicate points are allowed and should be treated as different points. given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area. an axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis. implement the detectsquares class: detectsquares() initializes the object with an empty data structure. void add(int[] point) adds a new point point = [x, y] to the data structure. int count(int[] point) counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.
lowest common ancestor of deepest leaves given the root of a binary tree, return the lowest common ancestor of its deepest leaves. recall that: the node of a binary tree is a leaf if and only if it has no children the depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1. the lowest common ancestor of a set s of nodes, is the node a with the largest depth such that every node in s is in the subtree with root a.
subarray product less than k given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.
find the maximum number of marked indices you are given a 0-indexed integer array nums. initially, all of the indices are unmarked. you are allowed to make this operation any number of times: pick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j. return the maximum possible number of marked indices in nums using the above operation any number of times.
minimize hamming distance after swap operations you are given two integer arrays, source and target, both of length n. you are also given an array allowedswaps where each allowedswaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. note that you can swap elements at a specific pair of indices multiple times and in any order. the hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed). return the minimum hamming distance of source and target after performing any amount of swap operations on array source.
product sales analysis iii sql schema table: sales +-------------+-------+ | column name | type | +-------------+-------+ | sale_id | int | | product_id | int | | year | int | | quantity | int | | price | int | +-------------+-------+ (sale_id, year) is the primary key of this table. product_id is a foreign key to product table. each row of this table shows a sale on the product product_id in a certain year. note that the price is per unit. table: product +--------------+---------+ | column name | type | +--------------+---------+ | product_id | int | | product_name | varchar | +--------------+---------+ product_id is the primary key of this table. each row of this table indicates the product name of each product. write an sql query that selects the product id, year, quantity, and price for the first year of every product sold. return the resulting table in any order. the query result format is in the following example.
number of pairs satisfying inequality you are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. find the number of pairs (i, j) such that: 0 <= i < j <= n - 1 and nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff. return the number of pairs that satisfy the conditions.
form largest integer with digits that add up to target given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules: the cost of painting a digit (i + 1) is given by cost[i] (0-indexed). the total cost used must be equal to target. the integer does not have 0 digits. since the answer may be very large, return it as a string. if there is no way to paint any integer given the condition, return "0".
stream of characters design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words. for example, if words = ["abc", "xyz"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix "xyz" of the characters "axyz" matches "xyz" from words. implement the streamchecker class: streamchecker(string[] words) initializes the object with the strings array words. boolean query(char letter) accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words.
minimum cost to hire k workers there are n workers. you are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker. we want to hire exactly k workers to form a paid group. to hire a group of k workers, we must pay them according to the following rules: every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group. every worker in the paid group must be paid at least their minimum wage expectation. given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. answers within 10-5 of the actual answer will be accepted.
asteroid collision we are given an array asteroids of integers representing asteroids in a row. for each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). each asteroid moves at the same speed. find out the state of the asteroids after all collisions. if two asteroids meet, the smaller one will explode. if both are the same size, both will explode. two asteroids moving in the same direction will never meet.
running sum of 1d array given an array nums. we define a running sum of an array as runningsum[i] = sum(nums[0]…nums[i]). return the running sum of nums.
global and local inversions you are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1]. the number of global inversions is the number of the different pairs (i, j) where: 0 <= i < j < n nums[i] > nums[j] the number of local inversions is the number of indices i where: 0 <= i < n - 1 nums[i] > nums[i + 1] return true if the number of global inversions is equal to the number of local inversions.
decode the slanted ciphertext a string originaltext is encoded using a slanted transposition cipher to a string encodedtext with the help of a matrix having a fixed number of rows rows. originaltext is placed first in a top-left to bottom-right manner. the blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originaltext. the arrow indicates the order in which the cells are filled. all empty cells are filled with ' '. the number of columns is chosen such that the rightmost column will not be empty after filling in originaltext. encodedtext is then formed by appending all characters of the matrix in a row-wise fashion. the characters in the blue cells are appended first to encodedtext, then the red cells, and so on, and finally the yellow cells. the arrow indicates the order in which the cells are accessed. for example, if originaltext = "cipher" and rows = 3, then we encode it in the following manner: the blue arrows depict how originaltext is placed in the matrix, and the red arrows denote the order in which encodedtext is formed. in the above example, encodedtext = "ch ie pr". given the encoded string encodedtext and number of rows rows, return the original string originaltext. note: originaltext does not have any trailing spaces ' '. the test cases are generated such that there is only one possible originaltext.
xor operation in an array you are given an integer n and an integer start. define an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length. return the bitwise xor of all elements of nums.
average waiting time there is a restaurant with a single chef. you are given an array customers, where customers[i] = [arrivali, timei]: arrivali is the arrival time of the ith customer. the arrival times are sorted in non-decreasing order. timei is the time needed to prepare the order of the ith customer. when a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. the customer waits till the chef finishes preparing his order. the chef does not prepare food for more than one customer at a time. the chef prepares food for customers in the order they were given in the input. return the average waiting time of all customers. solutions within 10-5 from the actual answer are considered accepted.
alphabet board path on an alphabet board, we start at position (0, 0), corresponding to character board[0][0]. here, board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"], as shown in the diagram below. we may make the following moves: 'u' moves our position up one row, if the position exists on the board; 'd' moves our position down one row, if the position exists on the board; 'l' moves our position left one column, if the position exists on the board; 'r' moves our position right one column, if the position exists on the board; '!' adds the character board[r][c] at our current position (r, c) to the answer. (here, the only positions that exist on the board are positions with letters on them.) return a sequence of moves that makes our answer equal to target in the minimum number of moves. you may return any path that does so.
game play analysis i sql schema table: activity +--------------+---------+ | column name | type | +--------------+---------+ | player_id | int | | device_id | int | | event_date | date | | games_played | int | +--------------+---------+ (player_id, event_date) is the primary key of this table. this table shows the activity of players of some games. each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device. write an sql query to report the first login date for each player. return the result table in any order. the query result format is in the following example.
shortest subarray with sum at least k given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. if there is no such subarray, return -1. a subarray is a contiguous part of an array.
finding pairs with a certain sum you are given two integer arrays nums1 and nums2. you are tasked to implement a data structure that supports queries of two types: add a positive integer to an element of a given index in the array nums2. count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length). implement the findsumpairs class: findsumpairs(int[] nums1, int[] nums2) initializes the findsumpairs object with two integer arrays nums1 and nums2. void add(int index, int val) adds val to nums2[index], i.e., apply nums2[index] += val. int count(int tot) returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.
maximum score of a node sequence there is an undirected graph with n nodes, numbered from 0 to n - 1. you are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. a node sequence is valid if it meets the following conditions: there is an edge connecting every pair of adjacent nodes in the sequence. no node appears more than once in the sequence. the score of a node sequence is defined as the sum of the scores of the nodes in the sequence. return the maximum score of a valid node sequence with a length of 4. if no such sequence exists, return -1.
majority element given an array nums of size n, return the majority element. the majority element is the element that appears more than ⌊n / 2⌋ times. you may assume that the majority element always exists in the array.
constrained subsequence sum given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied. a subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.
reverse words in a string iii given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.
count good meals a good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two. you can pick any two different foods to make a good meal. given an array of integers deliciousness where deliciousness[i] is the deliciousness of the ith item of food, return the number of different good meals you can make from this list modulo 109 + 7. note that items with different indices are considered different even if they have the same deliciousness value.
minimum moves to reach target with rotations in an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). the grid has empty cells represented by zeros and blocked cells represented by ones. the snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1). in one move the snake can: move one cell to the right if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is. move down one cell if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is. rotate clockwise if it's in a horizontal position and the two cells under it are both empty. in that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c). rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. in that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1). return the minimum number of moves to reach the target. if there is no way to reach the target, return -1.
edit distance given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. you have the following three operations permitted on a word: insert a character delete a character replace a character
minimum common value given two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. if there is no common integer amongst nums1 and nums2, return -1. note that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.
number of restricted paths from first to last node there is an undirected weighted connected graph. you are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti. a path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1. the distance of a path is the sum of the weights on the edges of the path. let distancetolastnode(x) denote the shortest distance of a path between node n and node x. a restricted path is a path that also satisfies that distancetolastnode(zi) > distancetolastnode(zi+1) where 0 <= i <= k-1. return the number of restricted paths from node 1 to node n. since that number may be too large, return it modulo 109 + 7.
most popular video creator you are given two string arrays creators and ids, and an integer array views, all of length n. the ith video on a platform was created by creator[i], has an id of ids[i], and has views[i] views. the popularity of a creator is the sum of the number of views on all of the creator's videos. find the creator with the highest popularity and the id of their most viewed video. if multiple creators have the highest popularity, find all of them. if multiple videos have the highest view count for a creator, find the lexicographically smallest id. return a 2d array of strings answer where answer[i] = [creatori, idi] means that creatori has the highest popularity and idi is the id of their most popular video. the answer can be returned in any order.
longest palindrome given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters. letters are case sensitive, for example, "aa" is not considered a palindrome here.
immediate food delivery ii sql schema table: delivery +-----------------------------+---------+ | column name | type | +-----------------------------+---------+ | delivery_id | int | | customer_id | int | | order_date | date | | customer_pref_delivery_date | date | +-----------------------------+---------+ delivery_id is the primary key of this table. the table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it). if the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled. the first order of a customer is the order with the earliest order date that the customer made. it is guaranteed that a customer has precisely one first order. write an sql query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places. the query result format is in the following example.
number of ways to arrive at destination you are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. the inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections. you are given an integer n and a 2d integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. you want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time. return the number of ways you can arrive at your destination in the shortest amount of time. since the answer may be large, return it modulo 109 + 7.
best sightseeing pair you are given an integer array values where values[i] represents the value of the ith sightseeing spot. two sightseeing spots i and j have a distance j - i between them. the score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them. return the maximum score of a pair of sightseeing spots.
distribute candies to people we distribute some number of candies, to a row of n = num_people people in the following way: we then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person. then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person. this process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. the last person will receive all of our remaining candies (not necessarily one more than the previous gift). return an array (of length num_people and sum candies) that represents the final distribution of candies.
count pairs of similar strings you are given a 0-indexed string array words. two strings are similar if they consist of the same characters. for example, "abca" and "cba" are similar since both consist of characters 'a', 'b', and 'c'. however, "abacba" and "bcfd" are not similar since they do not consist of the same characters. return the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar.
most frequent even element given an integer array nums, return the most frequent even element. if there is a tie, return the smallest one. if there is no such element, return -1.
handling sum queries after update you are given two 0-indexed arrays nums1 and nums2 and a 2d array queries of queries. there are three types of queries: for a query of type 1, queries[i] = [1, l, r]. flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. both l and r are 0-indexed. for a query of type 2, queries[i] = [2, p, 0]. for every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p. for a query of type 3, queries[i] = [3, 0, 0]. find the sum of the elements in nums2. return an array containing all the answers to the third type queries.
integer replacement given a positive integer n, you can apply one of the following operations: if n is even, replace n with n / 2. if n is odd, replace n with either n + 1 or n - 1. return the minimum number of operations needed for n to become 1.
minimize malware spread you are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1. some nodes initial are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner. suppose m(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. we will remove exactly one node from initial. return the node that, if removed, would minimize m(initial). if multiple nodes could be removed to minimize m(initial), return such a node with the smallest index. note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.
minimum cost to make array equal you are given two 0-indexed arrays nums and cost consisting each of n positive integers. you can do the following operation any number of times: increase or decrease any element of the array nums by 1. the cost of doing one operation on the ith element is cost[i]. return the minimum total cost such that all the elements of the array nums become equal.
flood fill an image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image. you are also given three integers sr, sc, and color. you should perform a flood fill on the image starting from the pixel image[sr][sc]. to perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. replace the color of all of the aforementioned pixels with color. return the modified image after performing the flood fill.
basic calculator given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation. note: you are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().
check if numbers are ascending in a sentence a sentence is a list of tokens separated by a single space with no leading or trailing spaces. every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase english letters. for example, "a puppy has 2 eyes 4 legs" is a sentence with seven tokens: "2" and "4" are numbers and the other tokens such as "puppy" are words. given a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s). return true if so, or false otherwise.
merge intervals given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
maximum good people based on statements there are two types of persons: the good person: the person who always tells the truth. the bad person: the person who might tell the truth and might lie. you are given a 0-indexed 2d integer array statements of size n x n that represents the statements made by n people about each other. more specifically, statements[i][j] could be one of the following: 0 which represents a statement made by person i that person j is a bad person. 1 which represents a statement made by person i that person j is a good person. 2 represents that no statement is made by person i about person j. additionally, no person ever makes a statement about themselves. formally, we have that statements[i][i] = 2 for all 0 <= i < n. return the maximum number of people who can be good based on the statements made by the n people.
sort array by parity given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers. return any array that satisfies this condition.
text justification given an array of strings words and a width maxwidth, format the text such that each line has exactly maxwidth characters and is fully (left and right) justified. you should pack your words in a greedy approach; that is, pack as many words as you can in each line. pad extra spaces ' ' when necessary so that each line has exactly maxwidth characters. extra spaces between words should be distributed as evenly as possible. if the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. for the last line of text, it should be left-justified, and no extra space is inserted between words. note: a word is defined as a character sequence consisting of non-space characters only. each word's length is guaranteed to be greater than 0 and not exceed maxwidth. the input array words contains at least one word.
minimum time to type word using special typewriter there is a special typewriter with lowercase english letters 'a' to 'z' arranged in a circle with a pointer. a character can only be typed if the pointer is pointing to that character. the pointer is initially pointing to the character 'a'. each second, you may perform one of the following operations: move the pointer one character counterclockwise or clockwise. type the character the pointer is currently on. given a string word, return the minimum number of seconds to type out the characters in word.
video stitching you are given a series of video clips from a sporting event that lasted time seconds. these video clips can be overlapping with each other and have varying lengths. each video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi. we can cut these clips into segments freely. for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7]. return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. if the task is impossible, return -1.
shortest path to get all keys you are given an m x n grid grid where: '.' is an empty cell. '#' is a wall. '@' is the starting point. lowercase letters represent keys. uppercase letters represent locks. you start at the starting point and one move consists of walking one space in one of the four cardinal directions. you cannot walk outside the grid, or walk into a wall. if you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key. for some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the english alphabet in the grid. this means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the english alphabet. return the lowest number of moves to acquire all keys. if it is impossible, return -1.
second highest salary sql schema table: employee +-------------+------+ | column name | type | +-------------+------+ | id | int | | salary | int | +-------------+------+ id is the primary key column for this table. each row of this table contains information about the salary of an employee. write an sql query to report the second highest salary from the employee table. if there is no second highest salary, the query should report null. the query result format is in the following example.
cycle length queries in a tree you are given an integer n. there is a complete binary tree with 2n - 1 nodes. the root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where: the left node has the value 2 * val, and the right node has the value 2 * val + 1. you are also given a 2d integer array queries of length m, where queries[i] = [ai, bi]. for each query, solve the following problem: add an edge between the nodes with values ai and bi. find the length of the cycle in the graph. remove the added edge between nodes with values ai and bi. note that: a cycle is a path that starts and ends at the same node, and each edge in the path is visited only once. the length of a cycle is the number of edges visited in the cycle. there could be multiple edges between two nodes in the tree after adding the edge of the query. return an array answer of length m where answer[i] is the answer to the ith query.
design a text editor design a text editor with a cursor that can do the following: add text to where the cursor is. delete text from where the cursor is (simulating the backspace key). move the cursor either left or right. when deleting text, only characters to the left of the cursor will be deleted. the cursor will also remain within the actual text and cannot be moved beyond it. more formally, we have that 0 <= cursor.position <= currenttext.length always holds. implement the texteditor class: texteditor() initializes the object with empty text. void addtext(string text) appends text to where the cursor is. the cursor ends to the right of text. int deletetext(int k) deletes k characters to the left of the cursor. returns the number of characters actually deleted. string cursorleft(int k) moves the cursor to the left k times. returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor. string cursorright(int k) moves the cursor to the right k times. returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.
find the kth largest integer in the array you are given an array of strings nums and an integer k. each string in nums represents an integer without leading zeros. return the string that represents the kth largest integer in nums. note: duplicate numbers should be counted distinctly. for example, if nums is ["1","2","2"], "2" is the first largest integer, "2" is the second-largest integer, and "1" is the third-largest integer.
find kth bit in nth binary string given two positive integers n and k, the binary string sn is formed as follows: s1 = "0" si = si - 1 + "1" + reverse(invert(si - 1)) for i > 1 where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0). for example, the first four strings in the above sequence are: s1 = "0" s2 = "011" s3 = "0111001" s4 = "011100110110001" return the kth bit in sn. it is guaranteed that k is valid for the given n.
design movie rental system you have a movie renting company consisting of n shops. you want to implement a renting system that supports searching for, booking, and returning movies. the system should also support generating a report of the currently rented movies. each movie is given as a 2d integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. each shop carries at most one copy of a movie moviei. the system should support the following functions: search: finds the cheapest 5 shops that have an unrented copy of a given movie. the shops should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopi should appear first. if there are less than 5 matching shops, then all of them should be returned. if no shop has an unrented copy, then an empty list should be returned. rent: rents an unrented copy of a given movie from a given shop. drop: drops off a previously rented copy of a given movie at a given shop. report: returns the cheapest 5 rented movies (possibly of the same movie id) as a 2d list res where res[j] = [shopj, moviej] describes that the jth cheapest rented movie moviej was rented from the shop shopj. the movies in res should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopj should appear first, and if there is still tie, the one with the smaller moviej should appear first. if there are fewer than 5 rented movies, then all of them should be returned. if no movies are currently being rented, then an empty list should be returned. implement the movierentingsystem class: movierentingsystem(int n, int[][] entries) initializes the movierentingsystem object with n shops and the movies in entries. list<integer> search(int movie) returns a list of shops that have an unrented copy of the given movie as described above. void rent(int shop, int movie) rents the given movie from the given shop. void drop(int shop, int movie) drops off a previously rented movie at the given shop. list<list<integer>> report() returns a list of cheapest rented movies as described above. note: the test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.
flatten nested list iterator you are given a nested list of integers nestedlist. each element is either an integer or a list whose elements may also be integers or other lists. implement an iterator to flatten it. implement the nestediterator class: nestediterator(list<nestedinteger> nestedlist) initializes the iterator with the nested list nestedlist. int next() returns the next integer in the nested list. boolean hasnext() returns true if there are still some integers in the nested list and false otherwise. your code will be tested with the following pseudocode: initialize iterator with nestedlist res = [] while iterator.hasnext() append iterator.next() to the end of res return res if res matches the expected flattened list, then your code will be judged as correct.
toeplitz matrix given an m x n matrix, return true if the matrix is toeplitz. otherwise, return false. a matrix is toeplitz if every diagonal from top-left to bottom-right has the same elements.
queries quality and percentage sql schema table: queries +-------------+---------+ | column name | type | +-------------+---------+ | query_name | varchar | | result | varchar | | position | int | | rating | int | +-------------+---------+ there is no primary key for this table, it may have duplicate rows. this table contains information collected from some queries on a database. the position column has a value from 1 to 500. the rating column has a value from 1 to 5. query with rating less than 3 is a poor query. we define query quality as: the average of the ratio between query rating and its position. we also define poor query percentage as: the percentage of all queries with rating less than 3. write an sql query to find each query_name, the quality and poor_query_percentage. both quality and poor_query_percentage should be rounded to 2 decimal places. return the result table in any order. the query result format is in the following example.
replace words in english, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. for example, when the root "an" is followed by the successor word "other", we can form a new word "another". given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. if a successor can be replaced by more than one root, replace it with the root that has the shortest length. return the sentence after the replacement.
lexicographically smallest string after applying operations you are given a string s of even length consisting of digits from 0 to 9, and two integers a and b. you can apply either of the following two operations any number of times and in any order on s: add a to all odd indices of s (0-indexed). digits post 9 are cycled back to 0. for example, if s = "3456" and a = 5, s becomes "3951". rotate s to the right by b positions. for example, if s = "3456" and b = 1, s becomes "6345". return the lexicographically smallest string you can obtain by applying the above operations any number of times on s. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "0158" is lexicographically smaller than "0190" because the first position they differ is at the third letter, and '5' comes before '9'.
available captures for rook on an 8 x 8 chessboard, there is exactly one white rook 'r' and some number of white bishops 'b', black pawns 'p', and empty squares '.'. when the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. a rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. the number of available captures for the white rook is the number of pawns that the rook is attacking. return the number of available captures for the white rook.
subarray with elements greater than varying threshold you are given an integer array nums and an integer threshold. find any subarray of nums of length k such that every element in the subarray is greater than threshold / k. return the size of any such subarray. if there is no such subarray, return -1. a subarray is a contiguous non-empty sequence of elements within an array.
minimum cuts to divide a circle a valid cut in a circle can be: a cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or a cut that is represented by a straight line that touches one point on the edge of the circle and its center. some valid and invalid cuts are shown in the figures below. given the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.
odd string difference you are given an array of equal-length strings words. assume that the length of each string is n. each string words[i] can be converted into a difference integer array difference[i] of length n - 1 where difference[i][j] = words[i][j+1] - words[i][j] where 0 <= j <= n - 2. note that the difference between two letters is the difference between their positions in the alphabet i.e. the position of 'a' is 0, 'b' is 1, and 'z' is 25. for example, for the string "acb", the difference integer array is [2 - 0, 1 - 2] = [2, -1]. all the strings in words have the same difference integer array, except one. you should find that string. return the string in words that has different difference integer array.
camelcase matching given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise. a query word queries[i] matches pattern if you can insert lowercase english letters pattern so that it equals the query. you may insert each character at any position and you may not insert any characters.
reverse odd levels of binary tree given the root of a perfect binary tree, reverse the node values at each odd level of the tree. for example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2]. return the root of the reversed tree. a binary tree is perfect if all parent nodes have two children and all leaves are on the same level. the level of a node is the number of edges along the path between it and the root node.
non-overlapping intervals given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
count salary categories sql schema table: accounts +-------------+------+ | column name | type | +-------------+------+ | account_id | int | | income | int | +-------------+------+ account_id is the primary key for this table. each row contains information about the monthly income for one bank account. write an sql query to report the number of bank accounts of each salary category. the salary categories are: "low salary": all the salaries strictly less than $20000. "average salary": all the salaries in the inclusive range [$20000, $50000]. "high salary": all the salaries strictly greater than $50000. the result table must contain all three categories. if there are no accounts in a category, then report 0. return the result table in any order. the query result format is in the following example.
implement queue using stacks implement a first in first out (fifo) queue using only two stacks. the implemented queue should support all the functions of a normal queue (push, peek, pop, and empty). implement the myqueue class: void push(int x) pushes element x to the back of the queue. int pop() removes the element from the front of the queue and returns it. int peek() returns the element at the front of the queue. boolean empty() returns true if the queue is empty, false otherwise. notes: you must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid. depending on your language, the stack may not be supported natively. you may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
total hamming distance the hamming distance between two integers is the number of positions at which the corresponding bits are different. given an integer array nums, return the sum of hamming distances between all the pairs of the integers in nums.
maximum subsequence score you are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. you must choose a subsequence of indices from nums1 of length k. for chosen indices i0, i1, ..., ik - 1, your score is defined as: the sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2. it can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]). return the maximum possible score. a subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.
find two non-overlapping sub-arrays each with target sum you are given an array of integers arr and an integer target. you have to find two non-overlapping sub-arrays of arr each with a sum equal target. there can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum. return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.
check if one string swap can make strings equal you are given two strings s1 and s2 of equal length. a string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. otherwise, return false.
minimum deletions to make array beautiful you are given a 0-indexed integer array nums. the array nums is beautiful if: nums.length is even. nums[i] != nums[i + 1] for all i % 2 == 0. note that an empty array is considered beautiful. you can delete any number of elements from nums. when you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged. return the minimum number of elements to delete from nums to make it beautiful.
rle iterator we can use run-length encoding (i.e., rle) to encode a sequence of integers. in a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence. for example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid rle of arr. given a run-length encoded array, design an iterator that iterates through it. implement the rleiterator class: rleiterator(int[] encoded) initializes the object with the encoded array encoded. int next(int n) exhausts the next n elements and returns the last element exhausted in this way. if there is no element left to exhaust, return -1 instead.
russian doll envelopes you are given a 2d array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope. one envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height. return the maximum number of envelopes you can russian doll (i.e., put one inside the other). note: you cannot rotate an envelope.
minimum time to collect all apples in a tree given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. you spend 1 second to walk over one edge of the tree. return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex. the edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. additionally, there is a boolean array hasapple, where hasapple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.
longest harmonious subsequence we define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1. given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences. a subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.
kth smallest product of two sorted arrays given two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the kth (1-based) smallest product of nums1[i] * nums2[j] where 0 <= i < nums1.length and 0 <= j < nums2.length.
count nodes equal to average of subtree given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree. note: the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer. a subtree of root is a tree consisting of root and all of its descendants.
determine if two events have conflict you are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where: event1 = [starttime1, endtime1] and event2 = [starttime2, endtime2]. event times are valid 24 hours format in the form of hh:mm. a conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events). return true if there is a conflict between two events. otherwise, return false.
count elements with strictly smaller and greater elements given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.
spiral matrix ii given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.
string compression given an array of characters chars, compress it using the following algorithm: begin with an empty string s. for each group of consecutive repeating characters in chars: if the group's length is 1, append the character to s. otherwise, append the character followed by the group's length. the compressed string s should not be returned separately, but instead, be stored in the input character array chars. note that group lengths that are 10 or longer will be split into multiple characters in chars. after you are done modifying the input array, return the new length of the array. you must write an algorithm that uses only constant extra space.
4sum ii given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that: 0 <= i, j, k, l < n nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
champagne tower we stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row. each glass holds one cup of champagne. then, some champagne is poured into the first glass at the top. when the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. when those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (a glass at the bottom row has its excess champagne fall on the floor.) for example, after one cup of champagne is poured, the top most glass is full. after two cups of champagne are poured, the two glasses on the second row are half full. after three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. after four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)
number of wonderful substrings a wonderful string is a string where at most one letter appears an odd number of times. for example, "ccjjc" and "abab" are wonderful, but "ab" is not. given a string word that consists of the first ten lowercase english letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. if the same substring appears multiple times in word, then count each occurrence separately. a substring is a contiguous sequence of characters in a string.
keyboard row given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of american keyboard like the image below. in the american keyboard: the first row consists of the characters "qwertyuiop", the second row consists of the characters "asdfghjkl", and the third row consists of the characters "zxcvbnm".
plates between candles there is a long table with a line of plates and candles arranged on top of it. you are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle. you are also given a 0-indexed 2d integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). for each query, you need to find the number of plates between candles that are in the substring. a plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring. for example, s = "||**||**|*", and a query [3, 8] denotes the substring "*||**|". the number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right. return an integer array answer where answer[i] is the answer to the ith query.
minimum cost to merge stones there are n piles of stones arranged in a row. the ith pile has stones[i] stones. a move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles. return the minimum cost to merge all piles of stones into one pile. if it is impossible, return -1.
magnetic force between two balls in the universe earth c-137, rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. rick has n empty baskets, the ith basket is at position[i], morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum. rick stated that magnetic force between two different balls at positions x and y is |x - y|. given the integer array position and the integer m. return the required force.
final value of variable after performing operations there is a programming language with only four operations and one variable x: ++x and x++ increments the value of the variable x by 1. --x and x-- decrements the value of the variable x by 1. initially, the value of x is 0. given an array of strings operations containing a list of operations, return the final value of x after performing all the operations.
find the smallest divisor given a threshold given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. find the smallest divisor such that the result mentioned above is less than or equal to threshold. each result of the division is rounded to the nearest integer greater than or equal to that element. (for example: 7/3 = 3 and 10/2 = 5). the test cases are generated so that there will be an answer.
count number of possible root nodes alice has an undirected tree with n nodes labeled from 0 to n - 1. the tree is represented as a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. alice wants bob to find the root of the tree. she allows bob to make several guesses about her tree. in one guess, he does the following: chooses two distinct integers u and v such that there exists an edge [u, v] in the tree. he tells alice that u is the parent of v in the tree. bob's guesses are represented by a 2d integer array guesses where guesses[j] = [uj, vj] indicates bob guessed uj to be the parent of vj. alice being lazy, does not reply to each of bob's guesses, but just says that at least k of his guesses are true. given the 2d integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of alice's tree. if there is no such tree, return 0.
count good triplets in an array you are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1]. a good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. in other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z. return the total number of good triplets.
minimum time to finish the race you are given a 0-indexed 2d integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds. for example, if fi = 3 and ri = 2, then the tire would finish its 1st lap in 3 seconds, its 2nd lap in 3 * 2 = 6 seconds, its 3rd lap in 3 * 22 = 12 seconds, etc. you are also given an integer changetime and an integer numlaps. the race consists of numlaps laps and you may start the race with any tire. you have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changetime seconds. return the minimum time to finish the race.
numbers with same consecutive differences given two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. you may return the answer in any order. note that the integers should not have leading zeros. integers as 02 and 043 are not allowed.
maximum score of a good subarray you are given an array of integers nums (0-indexed) and an integer k. the score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). a good subarray is a subarray where i <= k <= j. return the maximum possible score of a good subarray.
three divisors given an integer n, return true if n has exactly three positive divisors. otherwise, return false. an integer m is a divisor of n if there exists an integer k such that n = k * m.
count primes given an integer n, return the number of prime numbers that are strictly less than n.
first completely painted row or column you are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n]. go through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i]. return the smallest index i at which either a row or a column will be completely painted in mat.
k divisible elements subarrays given an integer array nums and two integers k and p, return the number of distinct subarrays which have at most k elements divisible by p. two arrays nums1 and nums2 are said to be distinct if: they are of different lengths, or there exists at least one index i where nums1[i] != nums2[i]. a subarray is defined as a non-empty contiguous sequence of elements in an array.
intersection of two arrays ii given two integer arrays nums1 and nums2, return an array of their intersection. each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.
bricks falling when hit you are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. a brick is stable if: it is directly connected to the top of the grid, or at least one other brick in its four adjacent cells is stable. you are also given an array hits, which is a sequence of erasures we want to apply. each time we want to erase the brick at the location hits[i] = (rowi, coli). the brick on that location (if it exists) will disappear. some other bricks may no longer be stable because of that erasure and will fall. once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks). return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied. note that an erasure may refer to a location with no brick, and if it does, no bricks drop.
rectangle area ii you are given a 2d array of axis-aligned rectangles. each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner. calculate the total area covered by all rectangles in the plane. any area covered by two or more rectangles should only be counted once. return the total area. since the answer may be too large, return it modulo 109 + 7.
jump game v given an array of integers arr and an integer d. in one step you can jump from index i to index: i + x where: i + x < arr.length and 0 < x <= d. i - x where: i - x >= 0 and 0 < x <= d. in addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (more formally min(i, j) < k < max(i, j)). you can choose any index of the array and start jumping. return the maximum number of indices you can visit. notice that you can not jump outside of the array at any time.
least number of unique integers after k removals given an array of integers arr and an integer k. find the least number of unique integers after removing exactly k elements.
reformat date given a date string in the form day month year, where: day is in the set {"1st", "2nd", "3rd", "4th", ..., "30th", "31st"}. month is in the set {"jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"}. year is in the range [1900, 2100]. convert the date string to the format yyyy-mm-dd, where: yyyy denotes the 4 digit year. mm denotes the 2 digit month. dd denotes the 2 digit day.
serialize and deserialize bst serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. design an algorithm to serialize and deserialize a binary search tree. there is no restriction on how your serialization/deserialization algorithm should work. you need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure. the encoded string should be as compact as possible.
move pieces to obtain a string you are given two strings start and target, both of length n. each string consists only of the characters 'l', 'r', and '_' where: the characters 'l' and 'r' represent pieces, where a piece 'l' can move to the left only if there is a blank space directly to its left, and a piece 'r' can move to the right only if there is a blank space directly to its right. the character '_' represents a blank space that can be occupied by any of the 'l' or 'r' pieces. return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. otherwise, return false.
find the winner of an array game given an integer array arr of distinct integers and an integer k. a game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). in each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. the game ends when an integer wins k consecutive rounds. return the integer which will win the game. it is guaranteed that there will be a winner of the game.
nested array generator given a multi-dimensional array of integers, return a generator object which yields integers in the same order as inorder traversal. a multi-dimensional array is a recursive data structure that contains both integers and other multi-dimensional arrays. inorder traversal iterates over each array from left to right, yielding any integers it encounters or applying inorder traversal to any arrays it encounters.
perfect rectangle given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. the bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi). return true if all the rectangles together form an exact cover of a rectangular region.
candy there are n children standing in a line. each child is assigned a rating value given in the integer array ratings. you are giving candies to these children subjected to the following requirements: each child must have at least one candy. children with a higher rating get more candies than their neighbors. return the minimum number of candies you need to have to distribute the candies to the children.
difference between maximum and minimum price sum there exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. each node has an associated price. you are given an integer array price, where price[i] is the price of the ith node. the price sum of a given path is the sum of the prices of all nodes lying on that path. the tree can be rooted at any node root of your choice. the incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root. return the maximum possible cost amongst all possible root choices.
uncommon words from two sentences a sentence is a string of single-space separated words where each word consists only of lowercase letters. a word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence. given two sentences s1 and s2, return a list of all the uncommon words. you may return the answer in any order.
customers who bought all products sql schema table: customer +-------------+---------+ | column name | type | +-------------+---------+ | customer_id | int | | product_key | int | +-------------+---------+ there is no primary key for this table. it may contain duplicates. customer_id is not null. product_key is a foreign key to product table. table: product +-------------+---------+ | column name | type | +-------------+---------+ | product_key | int | +-------------+---------+ product_key is the primary key column for this table. write an sql query to report the customer ids from the customer table that bought all the products in the product table. return the result table in any order. the query result format is in the following example.
minimum difference in sums after removal of elements you are given a 0-indexed integer array nums consisting of 3 * n elements. you are allowed to remove any subsequence of elements of size exactly n from nums. the remaining 2 * n elements will be divided into two equal parts: the first n elements belonging to the first part and their sum is sumfirst. the next n elements belonging to the second part and their sum is sumsecond. the difference in sums of the two parts is denoted as sumfirst - sumsecond. for example, if sumfirst = 3 and sumsecond = 2, their difference is 1. similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1. return the minimum difference possible between the sums of the two parts after the removal of n elements.
number of operations to make network connected there are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. any computer can reach any other computer directly or indirectly through the network. you are given an initial computer network connections. you can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. return the minimum number of times you need to do this in order to make all the computers connected. if it is not possible, return -1.
sum of even numbers after queries you are given an integer array nums and an array queries where queries[i] = [vali, indexi]. for each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums. return an integer array answer where answer[i] is the answer to the ith query.
check if a parentheses string can be valid a parentheses string is a non-empty string consisting only of '(' and ')'. it is valid if any of the following conditions is true: it is (). it can be written as ab (a concatenated with b), where a and b are valid parentheses strings. it can be written as (a), where a is a valid parentheses string. you are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. for each index i of locked, if locked[i] is '1', you cannot change s[i]. but if locked[i] is '0', you can change s[i] to either '(' or ')'. return true if you can make s a valid parentheses string. otherwise, return false.
minimum number of operations to reinitialize a permutation you are given an even integer n. you initially have a permutation perm of size n where perm[i] == i (0-indexed). in one operation, you will create a new array arr, and for each i: if i % 2 == 0, then arr[i] = perm[i / 2]. if i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2]. you will then assign arr to perm. return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.
expression add operators given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value. note that operands in the returned expressions should not contain leading zeros.
get the maximum score you are given two sorted arrays of distinct integers nums1 and nums2. a valid path is defined as follows: choose array nums1 or nums2 to traverse (from index-0). traverse the current array from left to right. if you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (only one repeated value is considered in the valid path). the score is defined as the sum of uniques values in a valid path. return the maximum score you can obtain of all possible valid paths. since the answer may be too large, return it modulo 109 + 7.
minimum swaps to group all 1's together ii a swap is defined as taking two distinct positions in an array and swapping the values in them. a circular array is defined as an array where we consider the first element and the last element to be adjacent. given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.
statistics from a large sample you are given a large sample of integers in the range [0, 255]. since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample. calculate the following statistics: minimum: the minimum element in the sample. maximum: the maximum element in the sample. mean: the average of the sample, calculated as the total sum of all elements divided by the total number of elements. median: if the sample has an odd number of elements, then the median is the middle element once the sample is sorted. if the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted. mode: the number that appears the most in the sample. it is guaranteed to be unique. return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. answers within 10-5 of the actual answer will be accepted.
stone game alice and bob play a game with piles of stones. there are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. the objective of the game is to end with the most stones. the total number of stones across all the piles is odd, so there are no ties. alice and bob take turns, with alice starting first. each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. this continues until there are no more piles left, at which point the person with the most stones wins. assuming alice and bob play optimally, return true if alice wins the game, or false if bob wins.
shortest path visiting all nodes you have an undirected, connected graph of n nodes labeled from 0 to n - 1. you are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge. return the length of the shortest path that visits every node. you may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.
promise pool given an array of asyncronous functions functions and a pool limit n, return an asyncronous function promisepool. it should return a promise that resolves when all the input functions resolve. pool limit is defined as the maximum number promises that can be pending at once. promisepool should begin execution of as many functions as possible and continue executing new functions when old promises resolve. promisepool should execute functions[i] then functions[i + 1] then functions[i + 2], etc. when the last promise resolves, promisepool should also resolve. for example, if n = 1, promisepool will execute one function at a time in series. however, if n = 2, it first executes two functions. when either of the two functions resolve, a 3rd function should be executed (if available), and so on until there are no functions left to execute. you can assume all functions never reject. it is acceptable for promisepool to return a promise that resolves any value.
flip equivalent binary trees for a binary tree t, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees. a binary tree x is flip equivalent to a binary tree y if and only if we can make x equal to y after some number of flip operations. given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.
maximum sum circular subarray given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums. a circular array means the end of the array connects to the beginning of the array. formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n]. a subarray may only include each element of the fixed buffer nums at most once. formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.
the employee that worked on the longest task there are n employees, each with a unique id from 0 to n - 1. you are given a 2d integer array logs where logs[i] = [idi, leavetimei] where: idi is the id of the employee that worked on the ith task, and leavetimei is the time at which the employee finished the ith task. all the values leavetimei are unique. note that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0. return the id of the employee that worked the task with the longest time. if there is a tie between two or more employees, return the smallest id among them.
count number of nice subarrays given an array of integers nums and an integer k. a continuous subarray is called nice if there are k odd numbers on it. return the number of nice sub-arrays.
find elements in a contaminated binary tree given a binary tree with the following rules: root.val == 0 if treenode.val == x and treenode.left != null, then treenode.left.val == 2 * x + 1 if treenode.val == x and treenode.right != null, then treenode.right.val == 2 * x + 2 now the binary tree is contaminated, which means all treenode.val have been changed to -1. implement the findelements class: findelements(treenode* root) initializes the object with a contaminated binary tree and recovers it. bool find(int target) returns true if the target value exists in the recovered binary tree.
linked list components you are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values. return the number of connected components in nums where two values are connected if they appear consecutively in the linked list.
longest word in dictionary through deleting given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. if there is more than one possible result, return the longest word with the smallest lexicographical order. if there is no possible result, return the empty string.
battleships in a board given an m x n matrix board where each cell is a battleship 'x' or empty '.', return the number of the battleships on board. battleships can only be placed horizontally or vertically on board. in other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. at least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).
similar string groups two strings, x and y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string x. for example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts". together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}. notice that "tars" and "arts" are in the same group even though they are not similar. formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group. we are given a list strs of strings where every string in strs is an anagram of every other string in strs. how many groups are there?
intersection of multiple arrays given a 2d integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.
sum of number and its reverse given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.
split array into consecutive subsequences you are given an integer array nums that is sorted in non-decreasing order. determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true: each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer). all subsequences have a length of 3 or more. return true if you can split nums according to the above conditions, or false otherwise. a subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).
shortest cycle in a graph there is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. the edges in the graph are represented by a given 2d integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself. return the length of the shortest cycle in the graph. if no cycle exists, return -1. a cycle is a path that starts and ends at the same node, and each edge in the path is used only once.
max points on a line given an array of points where points[i] = [xi, yi] represents a point on the x-y plane, return the maximum number of points that lie on the same straight line.
print binary tree given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. the formatted layout matrix should be constructed using the following rules: the height of the tree is height and the number of rows m should be equal to height + 1. the number of columns n should be equal to 2height+1 - 1. place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]). for each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1]. continue this process until all the nodes in the tree have been placed. any empty cells should contain the empty string "". return the constructed matrix res.
count vowels permutation given an integer n, your task is to count how many strings of length n can be formed under the following rules: each character is a lower case vowel ('a', 'e', 'i', 'o', 'u') each vowel 'a' may only be followed by an 'e'. each vowel 'e' may only be followed by an 'a' or an 'i'. each vowel 'i' may not be followed by another 'i'. each vowel 'o' may only be followed by an 'i' or a 'u'. each vowel 'u' may only be followed by an 'a'. since the answer may be too large, return it modulo 10^9 + 7.
count substrings that differ by one character given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. in other words, find the number of substrings in s that differ from some substring in t by exactly one character. for example, the underlined substrings in "computer" and "computation" only differ by the 'e'/'a', so this is a valid way. return the number of substrings that satisfy the condition above. a substring is a contiguous sequence of characters within a string.
wiggle subsequence a wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. the first difference (if one exists) may be either positive or negative. a sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences. for example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative. in contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. the first is not because its first two differences are positive, and the second is not because its last difference is zero. a subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order. given an integer array nums, return the length of the longest wiggle subsequence of nums.
minimum time to complete all tasks there is a computer that can run an unlimited number of tasks at the same time. you are given a 2d integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi]. you may turn on the computer only when it needs to run a task. you can also turn it off if it is idle. return the minimum time during which the computer should be turned on to complete all tasks.
row with maximum ones given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row. in case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected. return an array containing the index of the row, and the number of ones in it.
prison cells after n days there are 8 prison cells in a row and each cell is either occupied or vacant. each day, whether the cell is occupied or vacant changes according to the following rules: if a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. otherwise, it becomes vacant. note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. you are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n. return the state of the prison after n days (i.e., n such changes described above).
defuse the bomb you have a bomb to defuse, and your time is running out! your informer will provide you with a circular array code of length of n and a key k. to decrypt the code, you must replace every number. all the numbers are replaced simultaneously. if k > 0, replace the ith number with the sum of the next k numbers. if k < 0, replace the ith number with the sum of the previous k numbers. if k == 0, replace the ith number with 0. as code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1]. given the circular array code and an integer key k, return the decrypted code to defuse the bomb!
maximum sum of two non-overlapping subarrays given an integer array nums and two integers firstlen and secondlen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstlen and secondlen. the array with length firstlen could occur before or after the array with length secondlen, but they have to be non-overlapping. a subarray is a contiguous part of an array.
maximum value of k coins from piles there are n piles of coins on a table. each pile consists of a positive number of coins of assorted denominations. in one move, you can choose any coin on top of any pile, remove it, and add it to your wallet. given a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.
maximum earnings from taxi there are n points on a road you are driving your taxi on. the n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. you cannot change the direction of the taxi. the passengers are represented by a 0-indexed 2d integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip. for each passenger i you pick up, you earn endi - starti + tipi dollars. you may only drive at most one passenger at a time. given n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally. note: you may drop off a passenger and pick up a different passenger at the same point.
strong password checker ii a password is said to be strong if it satisfies all the following criteria: it has at least 8 characters. it contains at least one lowercase letter. it contains at least one uppercase letter. it contains at least one digit. it contains at least one special character. the special characters are the characters in the following string: "!@#$%^&*()-+". it does not contain 2 of the same character in adjacent positions (i.e., "aab" violates this condition, but "aba" does not). given a string password, return true if it is a strong password. otherwise, return false.
count common words with one occurrence given two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.
meeting rooms iii you are given an integer n. there are n rooms numbered from 0 to n - 1. you are given a 2d integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). all the values of starti are unique. meetings are allocated to rooms in the following manner: each meeting will take place in the unused room with the lowest number. if there are no available rooms, the meeting will be delayed until a room becomes free. the delayed meeting should have the same duration as the original meeting. when a room becomes unused, meetings that have an earlier original start time should be given the room. return the number of the room that held the most meetings. if there are multiple rooms, return the room with the lowest number. a half-closed interval [a, b) is the interval between a and b including a and not including b.
smallest string with swaps you are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string. you can swap the characters at any pair of indices in the given pairs any number of times. return the lexicographically smallest string that s can be changed to after using the swaps.
tiling a rectangle with the fewest squares given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.
implement stack using queues implement a last-in-first-out (lifo) stack using only two queues. the implemented stack should support all the functions of a normal stack (push, top, pop, and empty). implement the mystack class: void push(int x) pushes element x to the top of the stack. int pop() removes the element on the top of the stack and returns it. int top() returns the element on the top of the stack. boolean empty() returns true if the stack is empty, false otherwise. notes: you must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid. depending on your language, the queue may not be supported natively. you may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
maximum running time of n computers you have n computers. you are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. you are interested in running all n computers simultaneously using the given batteries. initially, you can insert at most one battery into each computer. after that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. the inserted battery can be a totally new battery or a battery from another computer. you may assume that the removing and inserting processes take no time. note that the batteries cannot be recharged. return the maximum number of minutes you can run all the n computers simultaneously.
process restricted friend requests you are given an integer n indicating the number of people in a network. each person is labeled from 0 to n - 1. you are also given a 0-indexed 2d integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people. initially, no one is friends with each other. you are given a list of friend requests as a 0-indexed 2d integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj. a friend request is successful if uj and vj can be friends. each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests. return a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not. note: if uj and vj are already direct friends, the request is still successful.
sum of distances in tree there is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. you are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.
positions of large groups in a string s of lowercase letters, these letters form consecutive groups of the same character. for example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy". a group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. in the above example, "xxxx" has the interval [3,6]. a group is considered large if it has 3 or more characters. return the intervals of every large group sorted in increasing order by start index.
set intersection size at least two you are given a 2d integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively. a containing set is an array nums where each interval from intervals has at least two integers in nums. for example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets. return the minimum possible size of a containing set.
k radius subarray averages you are given a 0-indexed array nums of n integers, and an integer k. the k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). if there are less than k elements before or after the index i, then the k-radius average is -1. build and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i. the average of x elements is the sum of the x elements divided by x, using integer division. the integer division truncates toward zero, which means losing its fractional part. for example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.
linked list in binary tree given a binary tree root and a linked list with head as the first node. return true if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return false. in this context downward path means a path that starts at some node and goes downwards.
simplify path given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a unix-style file system, convert it to the simplified canonical path. in a unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. for this problem, any other format of periods such as '...' are treated as file/directory names. the canonical path should have the following format: the path starts with a single slash '/'. any two directories are separated by a single slash '/'. the path does not end with a trailing '/'. the path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..') return the simplified canonical path.
find unique binary string given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. if there are multiple answers, you may return any of them.
sliding window maximum you are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. you can only see the k numbers in the window. each time the sliding window moves right by one position. return the max sliding window.
minimum swaps to make sequences increasing you are given two integer arrays of the same length nums1 and nums2. in one operation, you are allowed to swap nums1[i] with nums2[i]. for example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8]. return the minimum number of needed operations to make nums1 and nums2 strictly increasing. the test cases are generated so that the given input always makes it possible. an array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].
valid perfect square given a positive integer num, return true if num is a perfect square or false otherwise. a perfect square is an integer that is the square of an integer. in other words, it is the product of some integer with itself. you must not use any built-in library function, such as sqrt.
fix names in a table sql schema table: users +----------------+---------+ | column name | type | +----------------+---------+ | user_id | int | | name | varchar | +----------------+---------+ user_id is the primary key for this table. this table contains the id and the name of the user. the name consists of only lowercase and uppercase characters. write an sql query to fix the names so that only the first character is uppercase and the rest are lowercase. return the result table ordered by user_id. the query result format is in the following example.
binary number with alternating bits given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.
minimum domino rotations for equal row in a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (a domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) we may rotate the ith domino, so that tops[i] and bottoms[i] swap values. return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same. if it cannot be done, return -1.
how many numbers are smaller than the current number given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. that is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i]. return the answer in an array.
vowels of all substrings given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word. a substring is a contiguous (non-empty) sequence of characters within a string. note: due to the large constraints, the answer may not fit in a signed 32-bit integer. please be careful during the calculations.
maximum bags with full capacity of rocks you have n bags numbered from 0 to n - 1. you are given two 0-indexed integer arrays capacity and rocks. the ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. you are also given an integer additionalrocks, the number of additional rocks you can place in any of the bags. return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.
circular sentence a sentence is a list of words that are separated by a single space with no leading or trailing spaces. for example, "hello world", "hello", "hello world hello world" are all sentences. words consist of only uppercase and lowercase english letters. uppercase and lowercase english letters are considered different. a sentence is circular if: the last character of a word is equal to the first character of the next word. the last character of the last word is equal to the first character of the first word. for example, "leetcode exercises sound delightful", "eetcode", "leetcode eats soul" are all circular sentences. however, "leetcode is cool", "happy leetcode", "leetcode" and "i like leetcode" are not circular sentences. given a string sentence, return true if it is circular. otherwise, return false.
dinner plate stacks you have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity. implement the dinnerplates class: dinnerplates(int capacity) initializes the object with the maximum capacity of the stacks capacity. void push(int val) pushes the given integer val into the leftmost stack with a size less than capacity. int pop() returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty. int popatstack(int index) returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.
poor pigs there are buckets buckets of liquid, where exactly one of the buckets is poisonous. to figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. unfortunately, you only have minutestotest minutes to determine which bucket is poisonous. you can feed the pigs according to these steps: choose some live pigs to feed. for each pig, choose which buckets to feed it. the pig will consume all the chosen buckets simultaneously and will take no time. each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs. wait for minutestodie minutes. you may not feed any other pigs during this time. after minutestodie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive. repeat this process until you run out of time. given buckets, minutestodie, and minutestotest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.
count palindromic subsequences given a string of digits s, return the number of palindromic subsequences of s having length 5. since the answer may be very large, return it modulo 109 + 7. note: a string is palindromic if it reads the same forward and backward. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
find the string with lcp we define the lcp matrix of any 0-indexed string word of n lowercase english letters as an n x n grid such that: lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1]. given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. if there is no such string, return an empty string. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "aabd" is lexicographically smaller than "aaca" because the first position they differ is at the third letter, and 'b' comes before 'c'.
decompress run-length encoded list we are given a list nums of integers representing a list compressed with run-length encoding. consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0). for each such pair, there are freq elements with value val concatenated in a sublist. concatenate all the sublists from left to right to generate the decompressed list. return the decompressed list.
time needed to rearrange a binary string you are given a binary string s. in one second, all occurrences of "01" are simultaneously replaced with "10". this process repeats until no occurrences of "01" exist. return the number of seconds needed to complete this process.
maximum number of points from grid queries you are given an m x n integer matrix grid and an array queries of size k. find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process: if queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right. otherwise, you do not get any points, and you end this process. after the process, answer[i] is the maximum number of points you can get. note that for each query you are allowed to visit the same cell multiple times. return the resulting array answer.
minimum score triangulation of polygon you have a convex n-sided polygon where each vertex has an integer value. you are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order). you will triangulate the polygon into n - 2 triangles. for each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation. return the smallest possible total score that you can achieve with some triangulation of the polygon.
remove duplicates from sorted array ii given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. the relative order of the elements should be kept the same. since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. more formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. it does not matter what you leave beyond the first k elements. return k after placing the final result in the first k slots of nums. do not allocate extra space for another array. you must do this by modifying the input array in-place with o(1) extra memory. custom judge: the judge will test your solution with the following code: int[] nums = [...]; // input array int[] expectednums = [...]; // the expected answer with correct length int k = removeduplicates(nums); // calls your implementation assert k == expectednums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectednums[i]; } if all assertions pass, then your solution will be accepted.
kth smallest element in a bst given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
permutations ii given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
array with elements not equal to average of neighbors you are given a 0-indexed array nums of distinct integers. you want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors. more formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i]. return any rearrangement of nums that meets the requirements.
best team with no conflicts you are the manager of a basketball team. for the upcoming tournament, you want to choose the team with the highest overall score. the score of the team is the sum of scores of all the players in the team. however, the basketball team is not allowed to have conflicts. a conflict exists if a younger player has a strictly higher score than an older player. a conflict does not occur between players of the same age. given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.
minimum absolute sum difference you are given two positive integer arrays nums1 and nums2, both of length n. the absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed). you can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference. return the minimum absolute sum difference after replacing at most one element in the array nums1. since the answer may be large, return it modulo 109 + 7. |x| is defined as: x if x >= 0, or -x if x < 0.
design a number container system design a number container system that can do the following: insert or replace a number at the given index in the system. return the smallest index for the given number in the system. implement the numbercontainers class: numbercontainers() initializes the number container system. void change(int index, int number) fills the container at index with the number. if there is already a number at that index, replace it. int find(int number) returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.
minimum average difference you are given a 0-indexed integer array nums of length n. the average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. both averages should be rounded down to the nearest integer. return the index with the minimum average difference. if there are multiple such indices, return the smallest one. note: the absolute difference of two numbers is the absolute value of their difference. the average of n elements is the sum of the n elements divided (integer division) by n. the average of 0 elements is considered to be 0.
partition string into substrings with values at most k you are given a string s consisting of digits from 1 to 9 and an integer k. a partition of a string s is called good if: each digit of s is part of exactly one substring. the value of each substring is less than or equal to k. return the minimum number of substrings in a good partition of s. if no good partition of s exists, return -1. note that: the value of a string is its result when interpreted as an integer. for example, the value of "123" is 123 and the value of "1" is 1. a substring is a contiguous sequence of characters within a string.
jump game vi you are given a 0-indexed integer array nums and an integer k. you are initially standing at index 0. in one move, you can jump at most k steps forward without going outside the boundaries of the array. that is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive. you want to reach the last index of the array (index n - 1). your score is the sum of all nums[j] for each index j you visited in the array. return the maximum score you can get.
contains duplicate given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
encode and decode tinyurl note: this is a companion problem to the system design problem: design tinyurl. tinyurl is a url shortening service where you enter a url such as https://leetcode.com/problems/design-tinyurl and it returns a short url such as http://tinyurl.com/4e9iak. design a class to encode a url and decode a tiny url. there is no restriction on how your encode/decode algorithm should work. you just need to ensure that a url can be encoded to a tiny url and the tiny url can be decoded to the original url. implement the solution class: solution() initializes the object of the system. string encode(string longurl) returns a tiny url for the given longurl. string decode(string shorturl) returns the original long url for the given shorturl. it is guaranteed that the given shorturl was encoded by the same object.
number of segments in a string given a string s, return the number of segments in the string. a segment is defined to be a contiguous sequence of non-space characters.
finding 3-digit even numbers you are given an integer array digits, where each element is a digit. the array may contain duplicates. you need to find all the unique integers that follow the given requirements: the integer consists of the concatenation of three elements from digits in any arbitrary order. the integer does not have leading zeros. the integer is even. for example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements. return a sorted array of the unique integers.
minimum total distance traveled there are some robots and factories on the x-axis. you are given an integer array robot where robot[i] is the position of the ith robot. you are also given a 2d integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots. the positions of each robot are unique. the positions of each factory are also unique. note that a robot can be in the same position as a factory initially. all the robots are initially broken; they keep moving in one direction. the direction could be the negative or the positive direction of the x-axis. when a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving. at any moment, you can set the initial direction of moving for some robot. your target is to minimize the total distance traveled by all the robots. return the minimum total distance traveled by all the robots. the test cases are generated such that all the robots can be repaired. note that all robots move at the same speed. if two robots move in the same direction, they will never collide. if two robots move in opposite directions and they meet at some point, they do not collide. they cross each other. if a robot passes by a factory that reached its limits, it crosses it as if it does not exist. if the robot moved from a position x to a position y, the distance it moved is |y - x|.
cyclically rotating a grid you are given an m x n integer matrix grid, where m and n are both even integers, and an integer k. the matrix is composed of several layers, which is shown in the below image, where each color is its own layer: a cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. to cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. an example rotation is shown below: return the matrix after applying k cyclic rotations to it.
exclusive time of functions on a single-threaded cpu, we execute a program containing n functions. each function has a unique id between 0 and n-1. function calls are stored in a call stack: when a function call starts, its id is pushed onto the stack, and when a function call ends, its id is popped off the stack. the function whose id is at the top of the stack is the current function being executed. each time a function starts or ends, we write a log with the id, whether it started or ended, and the timestamp. you are given a list logs, where logs[i] represents the ith log message formatted as a string "{function_id}:{"start" | "end"}:{timestamp}". for example, "0:start:3" means a function call with function id 0 started at the beginning of timestamp 3, and "1:end:2" means a function call with function id 1 ended at the end of timestamp 2. note that a function can be called multiple times, possibly recursively. a function's exclusive time is the sum of execution times for all function calls in the program. for example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3. return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with id i.
add strings given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string. you must solve the problem without using any built-in library for handling large integers (such as biginteger). you must also not convert the inputs to integers directly.
remove invalid parentheses given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. return a list of unique strings that are valid with the minimum number of removals. you may return the answer in any order.
maximum number of weeks for which you can work there are n projects numbered from 0 to n - 1. you are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has. you can work on the projects following these two rules: every week, you will finish exactly one milestone of one project. you must work every week. you cannot work on two milestones from the same project for two consecutive weeks. once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. note that you may not be able to finish every project's milestones due to these constraints. return the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.
smallest good base given an integer n represented as a string, return the smallest good base of n. we call k >= 2 a good base of n, if all digits of n base k are 1's.
longest word in dictionary given an array of strings words representing an english dictionary, return the longest word in words that can be built one character at a time by other words in words. if there is more than one possible answer, return the longest word with the smallest lexicographical order. if there is no answer, return the empty string. note that the word should be built from left to right with each additional character being added to the end of a previous word.
execute cancellable function with delay given a function fn, an array or arguments args, and a timeout t in milliseconds, return a cancel function cancelfn. after a delay of t, fn should be called with args passed as parameters unless cancelfn was called first. in that case, fn should never be called.
longest increasing subsequence given an integer array nums, return the length of the longest strictly increasing subsequence .
count the number of good subarrays given an integer array nums and an integer k, return the number of good subarrays of nums. a subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j]. a subarray is a contiguous non-empty sequence of elements within an array.
make sum divisible by p given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. it is not allowed to remove the whole array. return the length of the smallest subarray that you need to remove, or -1 if it's impossible. a subarray is defined as a contiguous block of elements in the array.
maximum matching of players with trainers you are given a 0-indexed integer array players, where players[i] represents the ability of the ith player. you are also given a 0-indexed integer array trainers, where trainers[j] represents the training capacity of the jth trainer. the ith player can match with the jth trainer if the player's ability is less than or equal to the trainer's training capacity. additionally, the ith player can be matched with at most one trainer, and the jth trainer can be matched with at most one player. return the maximum number of matchings between players and trainers that satisfy these conditions.
sum of subarray minimums given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. since the answer may be large, return the answer modulo 109 + 7.
remove all adjacent duplicates in string ii you are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together. we repeatedly make k duplicate removals on s until we no longer can. return the final string after all such duplicate removals have been made. it is guaranteed that the answer is unique.
rotate array given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
number of ways to wear different hats to each other there are n people and 40 types of hats labeled from 1 to 40. given a 2d integer array hats, where hats[i] is a list of all hats preferred by the ith person. return the number of ways that the n people wear different hats to each other. since the answer may be too large, return it modulo 109 + 7.
fraction to recurring decimal given two integers representing the numerator and denominator of a fraction, return the fraction in string format. if the fractional part is repeating, enclose the repeating part in parentheses. if multiple answers are possible, return any of them. it is guaranteed that the length of the answer string is less than 104 for all the given inputs.
same tree given the roots of two binary trees p and q, write a function to check if they are the same or not. two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
sum multiples given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7. return an integer denoting the sum of all numbers in the given range satisfying the constraint.
longest string chain you are given an array of words where each word consists of lowercase english letters. worda is a predecessor of wordb if and only if we can insert exactly one letter anywhere in worda without changing the order of the other characters to make it equal to wordb. for example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad". a word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. a single word is trivially a word chain with k == 1. return the length of the longest possible word chain with words chosen from the given list of words.
delete leaves with a given value given a binary tree root and an integer target, delete all the leaf nodes with value target. note that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot).
longest arithmetic subsequence of given difference given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference. a subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.
cousins in binary tree given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise. two nodes of a binary tree are cousins if they have the same depth with different parents. note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.
most frequent number following key in an array you are given a 0-indexed integer array nums. you are also given an integer key, which is present in nums. for every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. in other words, count the number of indices i such that: 0 <= i <= nums.length - 2, nums[i] == key and, nums[i + 1] == target. return the target with the maximum count. the test cases will be generated such that the target with maximum count is unique.
reach a number you are standing at position 0 on an infinite number line. there is a destination at position target. you can make some number of moves nummoves so that: on each move, you can either go left or right. during the ith move (starting from i == 1 to i == nummoves), you take i steps in the chosen direction. given the integer target, return the minimum number of moves required (i.e., the minimum nummoves) to reach the destination.
students and examinations sql schema table: students +---------------+---------+ | column name | type | +---------------+---------+ | student_id | int | | student_name | varchar | +---------------+---------+ student_id is the primary key for this table. each row of this table contains the id and the name of one student in the school. table: subjects +--------------+---------+ | column name | type | +--------------+---------+ | subject_name | varchar | +--------------+---------+ subject_name is the primary key for this table. each row of this table contains the name of one subject in the school. table: examinations +--------------+---------+ | column name | type | +--------------+---------+ | student_id | int | | subject_name | varchar | +--------------+---------+ there is no primary key for this table. it may contain duplicates. each student from the students table takes every course from the subjects table. each row of this table indicates that a student with id student_id attended the exam of subject_name. write an sql query to find the number of times each student attended each exam. return the result table ordered by student_id and subject_name. the query result format is in the following example.
partition equal subset sum given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.
maximum level sum of a binary tree given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on. return the smallest level x such that the sum of all the values of nodes at level x is maximal.
total appeal of a string the appeal of a string is the number of distinct characters found in the string. for example, the appeal of "abbca" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'. given a string s, return the total appeal of all of its substrings. a substring is a contiguous sequence of characters within a string.
minesweeper let's play the minesweeper game (wikipedia, online game)! you are given an m x n char matrix board representing the game board where: 'm' represents an unrevealed mine, 'e' represents an unrevealed empty square, 'b' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals), digit ('1' to '8') represents how many mines are adjacent to this revealed square, and 'x' represents a revealed mine. you are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('m' or 'e'). return the board after revealing this position according to the following rules: if a mine 'm' is revealed, then the game is over. you should change it to 'x'. if an empty square 'e' with no adjacent mines is revealed, then change it to a revealed blank 'b' and all of its adjacent unrevealed squares should be revealed recursively. if an empty square 'e' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines. return the board when no more squares will be revealed.
minimum number of operations to make arrays similar you are given two positive integer arrays nums and target, of the same length. in one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and: set nums[i] = nums[i] + 2 and set nums[j] = nums[j] - 2. two arrays are considered to be similar if the frequency of each element is the same. return the minimum number of operations required to make nums similar to target. the test cases are generated such that nums can always be similar to target.
distant barcodes in a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i]. rearrange the barcodes so that no two adjacent barcodes are equal. you may return any answer, and it is guaranteed an answer exists.
maximum number of achievable transfer requests we have n buildings numbered from 0 to n - 1. each building has a number of employees. it's transfer season, and some employees want to change the building they reside in. you are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi. all buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. this means the number of employees leaving is equal to the number of employees moving in. for example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2. return the maximum number of achievable requests.
product price at a given date sql schema table: products +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | new_price | int | | change_date | date | +---------------+---------+ (product_id, change_date) is the primary key of this table. each row of this table indicates that the price of some product was changed to a new price at some date. write an sql query to find the prices of all products on 2019-08-16. assume the price of all products before any change is 10. return the result table in any order. the query result format is in the following example.
sum of beauty of all substrings the beauty of a string is the difference in frequencies between the most frequent and least frequent characters. for example, the beauty of "abaacc" is 3 - 1 = 2. given a string s, return the sum of beauty of all of its substrings.
kids with the greatest number of candies there are n kids with candies. you are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extracandies, denoting the number of extra candies that you have. return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extracandies, they will have the greatest number of candies among all the kids, or false otherwise. note that multiple kids can have the greatest number of candies.
four divisors given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. if there is no such integer in the array, return 0.
magic squares in grid a 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum. given a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there? (each subgrid is contiguous).
maximum area of a piece of cake after horizontal and vertical cuts you are given a rectangular cake of size h x w and two arrays of integers horizontalcuts and verticalcuts where: horizontalcuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and verticalcuts[j] is the distance from the left of the rectangular cake to the jth vertical cut. return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalcuts and verticalcuts. since the answer can be a large number, return this modulo 109 + 7.
largest perimeter triangle given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. if it is impossible to form any triangle of a non-zero area, return 0.
count number of teams there are n soldiers standing in a line. each soldier is assigned a unique rating value. you have to form a team of 3 soldiers amongst them under the following rules: choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]). a team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n). return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).
minimum score of a path between two cities you are given a positive integer n representing n cities numbered from 1 to n. you are also given a 2d array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. the cities graph is not necessarily connected. the score of a path between two cities is defined as the minimum distance of a road in this path. return the minimum possible score of a path between cities 1 and n. note: a path is a sequence of roads between two cities. it is allowed for a path to contain the same road multiple times, and you can visit cities 1 and n multiple times along the path. the test cases are generated such that there is at least one path between 1 and n.
nim game you are playing the following nim game with your friend: initially, there is a heap of stones on the table. you and your friend will alternate taking turns, and you go first. on each turn, the person whose turn it is will remove 1 to 3 stones from the heap. the one who removes the last stone is the winner. given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.
remove nth node from end of list given the head of a linked list, remove the nth node from the end of the list and return its head.
delete and earn you are given an integer array nums. you want to maximize the number of points you get by performing the following operation any number of times: pick any nums[i] and delete it to earn nums[i] points. afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1. return the maximum number of points you can earn by applying the above operation some number of times.
insert delete getrandom o(1) implement the randomizedset class: randomizedset() initializes the randomizedset object. bool insert(int val) inserts an item val into the set if not present. returns true if the item was not present, false otherwise. bool remove(int val) removes an item val from the set if present. returns true if the item was present, false otherwise. int getrandom() returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). each element must have the same probability of being returned. you must implement the functions of the class such that each function works in average o(1) time complexity.
modify graph edge weights you are given an undirected weighted connected graph containing n nodes labeled from 0 to n - 1, and an integer array edges where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi. some edges have a weight of -1 (wi = -1), while others have a positive weight (wi > 0). your task is to modify all edges with a weight of -1 by assigning them positive integer values in the range [1, 2 * 109] so that the shortest distance between the nodes source and destination becomes equal to an integer target. if there are multiple modifications that make the shortest distance between source and destination equal to target, any of them will be considered correct. return an array containing all edges (even unmodified ones) in any order if it is possible to make the shortest distance from source to destination equal to target, or an empty array if it's impossible. note: you are not allowed to modify the weights of edges with initial positive weights.
number of orders in the backlog you are given a 2d integer array orders, where each orders[i] = [pricei, amounti, ordertypei] denotes that amounti orders have been placed of type ordertypei at the price pricei. the ordertypei is: 0 if it is a batch of buy orders, or 1 if it is a batch of sell orders. note that orders[i] represents a batch of amounti independent orders with the same price and order type. all orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i. there is a backlog that consists of orders that have not been executed. the backlog is initially empty. when an order is placed, the following happens: if the order is a buy order, you look at the sell order with the smallest price in the backlog. if that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. else, the buy order is added to the backlog. vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. if that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. else, the sell order is added to the backlog. return the total amount of orders in the backlog after placing all the orders from the input. since this number can be large, return it modulo 109 + 7.
lexicographically smallest equivalent string you are given two strings of the same length s1 and s2 and a string basestr. we say s1[i] and s2[i] are equivalent characters. for example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'. equivalent characters follow the usual rules of any equivalence relation: reflexivity: 'a' == 'a'. symmetry: 'a' == 'b' implies 'b' == 'a'. transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'. for example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of basestr = "eed", and "aab" is the lexicographically smallest equivalent string of basestr. return the lexicographically smallest equivalent string of basestr by using the equivalency information from s1 and s2.
find the k-beauty of a number the k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions: it has a length of k. it is a divisor of num. given integers num and k, return the k-beauty of num. note: leading zeros are allowed. 0 is not a divisor of any value. a substring is a contiguous sequence of characters in a string.
stone game vi alice and bob take turns playing a game, with alice starting first. there are n stones in a pile. on each player's turn, they can remove a stone from the pile and receive points based on the stone's value. alice and bob may value the stones differently. you are given two integer arrays of length n, alicevalues and bobvalues. each alicevalues[i] and bobvalues[i] represents how alice and bob, respectively, value the ith stone. the winner is the person with the most points after all the stones are chosen. if both players have the same amount of points, the game results in a draw. both players will play optimally. both players know the other's values. determine the result of the game, and: if alice wins, return 1. if bob wins, return -1. if the game results in a draw, return 0.
minimum swaps to make strings equal you are given two strings s1 and s2 of equal length consisting of letters "x" and "y" only. your task is to make these two strings equal to each other. you can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j]. return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.
number of valid words for each puzzle with respect to a given puzzle string, a word is valid if both the following conditions are satisfied: word contains the first letter of puzzle. for each letter in word, that letter is in puzzle. for example, if the puzzle is "abcdefg", then valid words are "faced", "cabbage", and "baggage", while invalid words are "beefed" (does not include 'a') and "based" (includes 's' which is not in the puzzle). return an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].
minimum insertions to balance a parentheses string given a parentheses string s containing only the characters '(' and ')'. a parentheses string is balanced if: any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'. left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'. in other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis. for example, "())", "())(())))" and "(())())))" are balanced, ")()", "()))" and "(()))" are not balanced. you can insert the characters '(' and ')' at any position of the string to balance it if needed. return the minimum number of insertions needed to make s balanced.
beautiful array an array nums of length n is beautiful if: nums is a permutation of the integers in the range [1, n]. for every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j]. given the integer n, return any beautiful array nums of length n. there will be at least one valid answer for the given n.
minimum score after removals on a tree there is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. you are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. you are also given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. remove two distinct edges of the tree to form three connected components. for a pair of removed edges, the following steps are defined: get the xor of all the values of the nodes for each of the three components respectively. the difference between the largest xor value and the smallest xor value is the score of the pair. for example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. the three xor values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. the largest xor value is 8 and the smallest xor value is 3. the score is then 8 - 3 = 5. return the minimum score of any possible pair of edge removals on the given tree.
words within two edits of dictionary you are given two string arrays, queries and dictionary. all words in each array comprise of lowercase english letters and have the same length. in one edit you can take a word from queries, and change any letter in it to any other letter. find all words from queries that, after a maximum of two edits, equal some word from dictionary. return a list of all words from queries, that match with some word from dictionary after a maximum of two edits. return the words in the same order they appear in queries.
arranging coins you have n coins and you want to build a staircase with these coins. the staircase consists of k rows where the ith row has exactly i coins. the last row of the staircase may be incomplete. given the integer n, return the number of complete rows of the staircase you will build.
minimum time to make rope colorful alice has n balloons arranged on a rope. you are given a 0-indexed string colors where colors[i] is the color of the ith balloon. alice wants the rope to be colorful. she does not want two consecutive balloons to be of the same color, so she asks bob for help. bob can remove some balloons from the rope to make it colorful. you are given a 0-indexed integer array neededtime where neededtime[i] is the time (in seconds) that bob needs to remove the ith balloon from the rope. return the minimum time bob needs to make the rope colorful.
construct quad tree given a n * n matrix grid of 0's and 1's only. we want to represent grid with a quad-tree. return the root of the quad-tree representing grid. a quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes: val: true if the node represents a grid of 1's or false if the node represents a grid of 0's. notice that you can assign the val to true or false when isleaf is false, and both are accepted in the answer. isleaf: true if the node is a leaf node on the tree or false if the node has four children. class node { public boolean val; public boolean isleaf; public node topleft; public node topright; public node bottomleft; public node bottomright; } we can construct a quad-tree from a two-dimensional area using the following steps: if the current grid has the same value (i.e all 1's or all 0's) set isleaf true and set val to the value of the grid and set the four children to null and stop. if the current grid has different values, set isleaf to false and set val to any value and divide the current grid into four sub-grids as shown in the photo. recurse for each of the children with the proper sub-grid. if you want to know more about the quad-tree, you can refer to the wiki. quad-tree format: you don't need to read this section for solving the problem. this is only if you want to understand the output format here. the output represents the serialized format of a quad-tree using level order traversal, where null signifies a path terminator where no node exists below. it is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list [isleaf, val]. if the value of isleaf or val is true we represent it as 1 in the list [isleaf, val] and if the value of isleaf or val is false we represent it as 0.
can i win in the "100 game" two players take turns adding, to a running total, any integer from 1 to 10. the player who first causes the running total to reach or exceed 100 wins. what if we change the game so that players cannot re-use integers? for example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100. given two integers maxchoosableinteger and desiredtotal, return true if the first player to move can force a win, otherwise, return false. assume both players play optimally.
calculate money in leetcode bank hercy wants to save money for his first car. he puts money in the leetcode bank every day. he starts by putting in $1 on monday, the first day. every day from tuesday to sunday, he will put in $1 more than the day before. on every subsequent monday, he will put in $1 more than the previous monday. given n, return the total amount of money he will have in the leetcode bank at the end of the nth day.
can make arithmetic progression from sequence a sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same. given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. otherwise, return false.
minimum operations to make the array alternating you are given a 0-indexed array nums consisting of n positive integers. the array nums is called alternating if: nums[i - 2] == nums[i], where 2 <= i <= n - 1. nums[i - 1] != nums[i], where 1 <= i <= n - 1. in one operation, you can choose an index i and change nums[i] into any positive integer. return the minimum number of operations required to make the array alternating.
min cost to connect all points you are given an array points representing integer coordinates of some points on a 2d-plane, where points[i] = [xi, yi]. the cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val. return the minimum cost to make all points connected. all points are connected if there is exactly one simple path between any two points.
print words vertically given a string s. return all the words vertically in the same order in which they appear in s. words are returned as a list of strings, complete with spaces when is necessary. (trailing spaces are not allowed). each word would be put on only one column and that in one column there will be only one word.
capitalize the title you are given a string title consisting of one or more words separated by a single space, where each word consists of english letters. capitalize the string by changing the capitalization of each word such that: if the length of the word is 1 or 2 letters, change all letters to lowercase. otherwise, change the first letter to uppercase and the remaining letters to lowercase. return the capitalized title.
h-index given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index. according to the definition of h-index on wikipedia: the h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.
avoid flood in the city your country has an infinite number of lakes. initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. if it rains over a lake that is full of water, there will be a flood. your goal is to avoid floods in any lake. given an integer array rains where: rains[i] > 0 means there will be rains over the rains[i] lake. rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it. return an array ans where: ans.length == rains.length ans[i] == -1 if rains[i] > 0. ans[i] is the lake you choose to dry in the ith day if rains[i] == 0. if there are multiple valid answers return any of them. if it is impossible to avoid flood return an empty array. notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.
check if a string can break another string given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. in other words s2 can break s1 or vice-versa. a string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.
minimum reverse operations you are given an integer n and an integer p in the range [0, n - 1]. representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1. you are also given an integer array banned containing some positions from the array. for the ith position in banned, arr[banned[i]] = 0, and banned[i] != p. you can perform multiple operations on arr. in an operation, you can choose a subarray with size k and reverse the subarray. however, the 1 in arr should never go to any of the positions in banned. in other words, after each operation arr[banned[i]] remains 0. return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible. a subarray is a contiguous non-empty sequence of elements within an array. the values of ans[i] are independent for all i's. the reverse of an array is an array containing the values in reverse order.
minimum number of people to teach on a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language. you are given an integer n, an array languages, and an array friendships where: there are n languages numbered 1 through n, languages[i] is the set of languages the ith user knows, and friendships[i] = [ui, vi] denotes a friendship between the users ui and vi. you can choose one language and teach it to some users so that all friends can communicate with each other. return the minimum number of users you need to teach. note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.
create maximum number you are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. you are also given an integer k. create the maximum number of length k <= m + n from digits of the two numbers. the relative order of the digits from the same array must be preserved. return an array of the k digits representing the answer.
merge two binary trees you are given two binary trees root1 and root2. imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. you need to merge the two trees into a new binary tree. the merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. otherwise, the not null node will be used as the node of the new tree. return the merged tree. note: the merging process must start from the root nodes of both trees.
find the closest palindrome given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. if there is a tie, return the smaller one. the closest is defined as the absolute difference minimized between two integers.
minimum score by changing two elements you are given a 0-indexed integer array nums. the low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length. the high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length. the score of nums is the sum of the high and low scores of nums. to minimize the score of nums, we can change the value of at most two elements of nums. return the minimum possible score after changing the value of at most two elements of nums. note that |x| denotes the absolute value of x.
consecutive numbers sum given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.
gray code an n-bit gray code sequence is a sequence of 2n integers where: every integer is in the inclusive range [0, 2n - 1], the first integer is 0, an integer appears no more than once in the sequence, the binary representation of every pair of adjacent integers differs by exactly one bit, and the binary representation of the first and last integers differs by exactly one bit. given an integer n, return any valid n-bit gray code sequence.
critical connections in a network there are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. any server can reach other servers directly or indirectly through the network. a critical connection is a connection that, if removed, will make some servers unable to reach some other server. return all critical connections in the network in any order.
unique binary search trees given an integer n, return the number of structurally unique bst's (binary search trees) which has exactly n nodes of unique values from 1 to n.
minimum white tiles after covering with carpets you are given a 0-indexed binary string floor, which represents the colors of tiles on a floor: floor[i] = '0' denotes that the ith tile of the floor is colored black. on the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white. you are also given numcarpets and carpetlen. you have numcarpets black carpets, each of length carpetlen tiles. cover the tiles with the given carpets such that the number of white tiles still visible is minimum. carpets may overlap one another. return the minimum number of white tiles still visible.
jump game ii you are given a 0-indexed array of integers nums of length n. you are initially positioned at nums[0]. each element nums[i] represents the maximum length of a forward jump from index i. in other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 <= j <= nums[i] and i + j < n return the minimum number of jumps to reach nums[n - 1]. the test cases are generated such that you can reach nums[n - 1].
path crossing given a string path, where path[i] = 'n', 's', 'e' or 'w', each representing moving one unit north, south, east, or west, respectively. you start at the origin (0, 0) on a 2d plane and walk on the path specified by path. return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. return false otherwise.
reverse subarray to maximize array value you are given an integer array nums. the value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1. you are allowed to select any subarray of the given array and reverse it. you can perform this operation only once. find maximum possible value of the final array.
longest binary subsequence less than or equal to k you are given a binary string s and a positive integer k. return the length of the longest subsequence of s that makes up a binary number less than or equal to k. note: the subsequence can contain leading zeroes. the empty string is considered to be equal to 0. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
find common characters given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). you may return the answer in any order.
maximum height by stacking cuboids given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). choose a subset of cuboids and place them on each other. you can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. you can rearrange any cuboid's dimensions by rotating it to put it on another cuboid. return the maximum height of the stacked cuboids.
check distances between same letters you are given a 0-indexed string s consisting of only lowercase english letters, where each letter in s appears exactly twice. you are also given a 0-indexed integer array distance of length 26. each letter in the alphabet is numbered from 0 to 25 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25). in a well-spaced string, the number of letters between the two occurrences of the ith letter is distance[i]. if the ith letter does not appear in s, then distance[i] can be ignored. return true if s is a well-spaced string, otherwise return false.
backspace string compare given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. note that after backspacing an empty text, the text will continue empty.
make two arrays equal by reversing subarrays you are given two integer arrays of equal length target and arr. in one step, you can select any non-empty subarray of arr and reverse it. you are allowed to make any number of steps. return true if you can make arr equal to target or false otherwise.
maximum employees to be invited to a meeting a company is organizing a meeting and has a list of n employees, waiting to be invited. they have arranged for a large circular table, capable of seating any number of employees. the employees are numbered from 0 to n - 1. each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. the favorite person of an employee is not themself. given a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.
pascal's triangle ii given an integer rowindex, return the rowindexth (0-indexed) row of the pascal's triangle. in pascal's triangle, each number is the sum of the two numbers directly above it as shown:
time based key-value store design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp. implement the timemap class: timemap() initializes the object of the data structure. void set(string key, string value, int timestamp) stores the key key with the value value at the given time timestamp. string get(string key, int timestamp) returns a value such that set was called previously, with timestamp_prev <= timestamp. if there are multiple such values, it returns the value associated with the largest timestamp_prev. if there are no values, it returns "".
the number of weak characters in the game you are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. you are given a 2d integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game. a character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. more formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei. return the number of weak characters.
kth largest sum in a binary tree you are given the root of a binary tree and a positive integer k. the level sum in the tree is the sum of the values of the nodes that are on the same level. return the kth largest level sum in the tree (not necessarily distinct). if there are fewer than k levels in the tree, return -1. note that two nodes are on the same level if they have the same distance from the root.
count sorted vowel strings given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted. a string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.
powerful integers given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound. an integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0. you may return the answer in any order. in your answer, each value should occur at most once.
out of boundary paths there is an m x n grid with a ball. the ball is initially at the position [startrow, startcolumn]. you are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). you can apply at most maxmove moves to the ball. given the five integers m, n, maxmove, startrow, startcolumn, return the number of paths to move the ball out of the grid boundary. since the answer can be very large, return it modulo 109 + 7.
power of three given an integer n, return true if it is a power of three. otherwise, return false. an integer n is a power of three, if there exists an integer x such that n == 3x.
walking robot simulation ii a width x height grid is on an xy-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). the grid is aligned with the four cardinal directions ("north", "east", "south", and "west"). a robot is initially at cell (0, 0) facing direction "east". the robot can be instructed to move for a specific number of steps. for each step, it does the following. attempts to move forward one cell in the direction it is facing. if the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step. after the robot finishes moving the number of steps required, it stops and awaits the next instruction. implement the robot class: robot(int width, int height) initializes the width x height grid with the robot at (0, 0) facing "east". void step(int num) instructs the robot to move forward num steps. int[] getpos() returns the current cell the robot is at, as an array of length 2, [x, y]. string getdir() returns the current direction of the robot, "north", "east", "south", or "west".
height checker a school is trying to take an annual photo of all the students. the students are asked to stand in a single file line in non-decreasing order by height. let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line. you are given an integer array heights representing the current order that the students are standing in. each heights[i] is the height of the ith student in line (0-indexed). return the number of indices where heights[i] != expected[i].
non-decreasing subsequences given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. you may return the answer in any order.
maximum points in an archery competition alice and bob are opponents in an archery competition. the competition has set the following rules: alice first shoots numarrows arrows and then bob shoots numarrows arrows. the points are then calculated as follows: the target has integer scoring sections ranging from 0 to 11 inclusive. for each section of the target with score k (in between 0 to 11), say alice and bob have shot ak and bk arrows on that section respectively. if ak >= bk, then alice takes k points. if ak < bk, then bob takes k points. however, if ak == bk == 0, then nobody takes k points. for example, if alice and bob both shot 2 arrows on the section with score 11, then alice takes 11 points. on the other hand, if alice shot 0 arrows on the section with score 11 and bob shot 2 arrows on that same section, then bob takes 11 points. you are given the integer numarrows and an integer array alicearrows of size 12, which represents the number of arrows alice shot on each scoring section from 0 to 11. now, bob wants to maximize the total number of points he can obtain. return the array bobarrows which represents the number of arrows bob shot on each scoring section from 0 to 11. the sum of the values in bobarrows should equal numarrows. if there are multiple ways for bob to earn the maximum total points, return any one of them.
minimum cost for tickets you have planned some train traveling one year in advance. the days of the year in which you will travel are given as an integer array days. each day is an integer from 1 to 365. train tickets are sold in three different ways: a 1-day pass is sold for costs[0] dollars, a 7-day pass is sold for costs[1] dollars, and a 30-day pass is sold for costs[2] dollars. the passes allow that many days of consecutive travel. for example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8. return the minimum number of dollars you need to travel every day in the given list of days.
maximum population year you are given a 2d integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person. the population of some year x is the number of people alive during that year. the ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. note that the person is not counted in the year that they die. return the earliest year with the maximum population.
rearrange array to maximize prefix score you are given a 0-indexed integer array nums. you can rearrange the elements of nums to any order (including the given order). let prefix be the array containing the prefix sums of nums after rearranging it. in other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. the score of nums is the number of positive integers in the array prefix. return the maximum score you can achieve.
top k frequent words given an array of strings words and an integer k, return the k most frequent strings. return the answer sorted by the frequency from highest to lowest. sort the words with the same frequency by their lexicographical order.
substrings of size three with distinct characters a string is good if there are no repeated characters. given a string s, return the number of good substrings of length three in s. note that if there are multiple occurrences of the same substring, every occurrence should be counted. a substring is a contiguous sequence of characters in a string.
number of even and odd bits you are given a positive integer n. let even denote the number of even indices in the binary representation of n (0-indexed) with value 1. let odd denote the number of odd indices in the binary representation of n (0-indexed) with value 1. return an integer array answer where answer = [even, odd].
merge in between linked lists you are given two linked lists: list1 and list2 of sizes n and m respectively. remove list1's nodes from the ath node to the bth node, and put list2 in their place. the blue edges and nodes in the following figure indicate the result: build the result list and return its head.
next greater element i the next greater element of some element x in an array is the first greater element that is to the right of x in the same array. you are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2. for each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. if there is no next greater element, then the answer for this query is -1. return an array ans of length nums1.length such that ans[i] is the next greater element as described above.
count different palindromic subsequences given a string s, return the number of different non-empty palindromic subsequences in s. since the answer may be very large, return it modulo 109 + 7. a subsequence of a string is obtained by deleting zero or more characters from the string. a sequence is palindromic if it is equal to the sequence reversed. two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.
print in order suppose we have a class: public class foo { public void first() { print("first"); } public void second() { print("second"); } public void third() { print("third"); } } the same instance of foo will be passed to three different threads. thread a will call first(), thread b will call second(), and thread c will call third(). design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second(). note: we do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. the input format you see is mainly to ensure our tests' comprehensiveness.
projection area of 3d shapes you are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes. each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j). we view the projection of these cubes onto the xy, yz, and zx planes. a projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. we are viewing the "shadow" when looking at the cubes from the top, the front, and the side. return the total area of all three projections.
minimum number of swaps to make the string balanced you are given a 0-indexed string s of even length n. the string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'. a string is called balanced if and only if: it is the empty string, or it can be written as ab, where both a and b are balanced strings, or it can be written as [c], where c is a balanced string. you may swap the brackets at any two indices any number of times. return the minimum number of swaps to make s balanced.
vertical order traversal of a binary tree given the root of a binary tree, calculate the vertical order traversal of the binary tree. for each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. the root of the tree is at (0, 0). the vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. there may be multiple nodes in the same row and same column. in such a case, sort these nodes by their values. return the vertical order traversal of the binary tree.
minimum subsequence in non-increasing order given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. if there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. a subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. note that the solution with the given constraints is guaranteed to be unique. also return the answer sorted in non-increasing order.
sum of digits of string after convert you are given a string s consisting of lowercase english letters, and an integer k. first, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). then, transform the integer by replacing it with the sum of its digits. repeat the transform operation k times in total. for example, if s = "zbax" and k = 2, then the resulting integer would be 8 by the following operations: convert: "zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124 transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17 transform #2: 17 ➝ 1 + 7 ➝ 8 return the resulting integer after performing the operations described above.
valid phone numbers given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers. you may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit) you may also assume each line in the text file must not contain leading or trailing white spaces. example: assume that file.txt has the following content: 987-123-4567 123 456 7890 (123) 456-7890 your script should output the following valid phone numbers: 987-123-4567 (123) 456-7890
reshape the matrix in matlab, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data. you are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix. the reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were. if the reshape operation with given parameters is possible and legal, output the new reshaped matrix; otherwise, output the original matrix.
happy number write an algorithm to determine if a number n is happy. a happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits. repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. those numbers for which this process ends in 1 are happy. return true if n is a happy number, and false if not.
game of life according to wikipedia's article: "the game of life, also known simply as life, is a cellular automaton devised by the british mathematician john horton conway in 1970." the board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above wikipedia article): any live cell with fewer than two live neighbors dies as if caused by under-population. any live cell with two or three live neighbors lives on to the next generation. any live cell with more than three live neighbors dies, as if by over-population. any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. the next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. given the current state of the m x n grid board, return the next state.
snail traversal write code that enhances all arrays such that you can call the snail(rowscount, colscount) method that transforms the 1d array into a 2d array organised in the pattern known as snail traversal order. invalid input values should output an empty array. if rowscount * colscount !== nums.length, the input is considered invalid. snail traversal order starts at the top left cell with the first value of the current array. it then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. this pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. for example, when given the input array [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] with rowscount = 5 and colscount = 4, the desired output matrix is shown below. note that iterating the matrix following the arrows corresponds to the order of numbers in the original array.
second largest digit in a string given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist. an alphanumeric string is a string consisting of lowercase english letters and digits.
maximum difference between node and ancestor given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b. a node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.
replace non-coprime numbers in array you are given an array of integers nums. perform the following steps: find any two adjacent numbers in nums that are non-coprime. if no such numbers are found, stop the process. otherwise, delete the two numbers and replace them with their lcm (least common multiple). repeat this process as long as you keep finding two adjacent non-coprime numbers. return the final modified array. it can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result. the test cases are generated such that the values in the final array are less than or equal to 108. two values x and y are non-coprime if gcd(x, y) > 1 where gcd(x, y) is the greatest common divisor of x and y.
longest well-performing interval we are given hours, a list of the number of hours worked per day for a given employee. a day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8. a well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days. return the length of the longest well-performing interval.
unique paths iii you are given an m x n integer array grid where grid[i][j] could be: 1 representing the starting square. there is exactly one starting square. 2 representing the ending square. there is exactly one ending square. 0 representing empty squares we can walk over. -1 representing obstacles that we cannot walk over. return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.
squares of a sorted array given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
count good numbers a digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7). for example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. however, "3245" is not good because 3 is at an even index but is not even. given an integer n, return the total number of good digit strings of length n. since the answer may be large, return it modulo 109 + 7. a digit string is a string consisting of digits 0 through 9 that may contain leading zeros.
largest substring between two equal characters given a string s, return the length of the longest substring between two equal characters, excluding the two characters. if there is no such substring return -1. a substring is a contiguous sequence of characters within a string.
actors and directors who cooperated at least three times sql schema table: actordirector +-------------+---------+ | column name | type | +-------------+---------+ | actor_id | int | | director_id | int | | timestamp | int | +-------------+---------+ timestamp is the primary key column for this table. write a sql query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times. return the result table in any order. the query result format is in the following example.
shortest path in a grid with obstacles elimination you are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). you can move up, down, left, or right from and to an empty cell in one step. return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. if it is not possible to find such walk return -1.
count complete tree nodes given the root of a complete binary tree, return the number of the nodes in the tree. according to wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. it can have between 1 and 2h nodes inclusive at the last level h. design an algorithm that runs in less than o(n) time complexity.
delete greatest value in each row you are given an m x n matrix grid consisting of positive integers. perform the following operation until grid becomes empty: delete the element with the greatest value from each row. if multiple such elements exist, delete any of them. add the maximum of deleted elements to the answer. note that the number of columns decreases by one after each operation. return the answer after performing the operations described above.
number of strings that appear as substrings in word given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word. a substring is a contiguous sequence of characters within a string.
parallel courses ii you are given an integer n, which indicates that there are n courses labeled from 1 to n. you are also given an array relations where relations[i] = [prevcoursei, nextcoursei], representing a prerequisite relationship between course prevcoursei and course nextcoursei: course prevcoursei has to be taken before course nextcoursei. also, you are given the integer k. in one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking. return the minimum number of semesters needed to take all courses. the testcases will be generated such that it is possible to take every course.
make array strictly increasing given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing. in one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j]. if there is no way to make arr1 strictly increasing, return -1.
palindrome linked list given the head of a singly linked list, return true if it is a palindrome or false otherwise.
longest substring without repeating characters given a string s, find the length of the longest substring without repeating characters.
day of the year given a string date representing a gregorian calendar date formatted as yyyy-mm-dd, return the day number of the year.
intersection of two linked lists given the heads of two singly linked-lists heada and headb, return the node at which the two lists intersect. if the two linked lists have no intersection at all, return null. for example, the following two linked lists begin to intersect at node c1: the test cases are generated such that there are no cycles anywhere in the entire linked structure. note that the linked lists must retain their original structure after the function returns. custom judge: the inputs to the judge are given as follows (your program is not given these inputs): intersectval - the value of the node where the intersection occurs. this is 0 if there is no intersected node. lista - the first linked list. listb - the second linked list. skipa - the number of nodes to skip ahead in lista (starting from the head) to get to the intersected node. skipb - the number of nodes to skip ahead in listb (starting from the head) to get to the intersected node. the judge will then create the linked structure based on these inputs and pass the two heads, heada and headb to your program. if you correctly return the intersected node, then your solution will be accepted.
guess number higher or lower we are playing the guess game. the game is as follows: i pick a number from 1 to n. you have to guess which number i picked. every time you guess wrong, i will tell you whether the number i picked is higher or lower than your guess. you call a pre-defined api int guess(int num), which returns three possible results: -1: your guess is higher than the number i picked (i.e. num > pick). 1: your guess is lower than the number i picked (i.e. num < pick). 0: your guess is equal to the number i picked (i.e. num == pick). return the number that i picked.
differences between two objects write a function that accepts two deeply nested objects or arrays obj1 and obj2 and returns a new object representing their differences. the function should compare the properties of the two objects and identify any changes. the returned object should only contains keys where the value is different from obj1 to obj2. for each changed key, the value should be represented as an array [obj1 value, obj2 value]. keys that exist in one object but not in the other should not be included in the returned object. when comparing two arrays, the indices of the arrays are considered to be their keys. the end result should be a deeply nested object where each leaf value is a difference array. you may assume that both objects are the output of json.parse.
minimum weighted subgraph with the required paths you are given an integer n denoting the number of nodes of a weighted directed graph. the nodes are numbered from 0 to n - 1. you are also given a 2d integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti. lastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph. return the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. in case such a subgraph does not exist, return -1. a subgraph is a graph whose vertices and edges are subsets of the original graph. the weight of a subgraph is the sum of weights of its constituent edges.
find lucky integer in an array given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value. return the largest lucky integer in the array. if there is no lucky integer return -1.
minimum index sum of two lists given two arrays of strings list1 and list2, find the common strings with the least index sum. a common string is a string that appeared in both list1 and list2. a common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings. return all the common strings with the least index sum. return the answer in any order.
peak index in a mountain array an array arr a mountain if the following properties hold: arr.length >= 3 there exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]. you must solve it in o(log(arr.length)) time complexity.
remove all adjacent duplicates in string you are given a string s consisting of lowercase english letters. a duplicate removal consists of choosing two adjacent and equal letters and removing them. we repeatedly make duplicate removals on s until we no longer can. return the final string after all such duplicate removals have been made. it can be proven that the answer is unique.
keep multiplying found values by two you are given an array of integers nums. you are also given an integer original which is the first number that needs to be searched for in nums. you then do the following steps: if original is found in nums, multiply it by two (i.e., set original = 2 * original). otherwise, stop the process. repeat this process with the new number as long as you keep finding the number. return the final value of original.
max sum of a pair with equal sum of digits you are given a 0-indexed array nums consisting of positive integers. you can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j]. return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.
minimum speed to arrive on time you are given a floating-point number hour, representing the amount of time you have to reach the office. to commute to the office, you must take n trains in sequential order. you are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride. each train can only depart at an integer hour, so you may need to wait in between each train ride. for example, if the 1st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2nd train ride at the 2 hour mark. return the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time. tests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.
count number of homogenous substrings given a string s, return the number of homogenous substrings of s. since the answer may be too large, return it modulo 109 + 7. a string is homogenous if all the characters of the string are the same. a substring is a contiguous sequence of characters within a string.
first day where you have been in all the rooms there are n rooms you need to visit, labeled from 0 to n - 1. each day is labeled, starting from 0. you will go in and visit one room a day. initially on day 0, you visit room 0. the order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextvisit of length n: assuming that on a day, you visit room i, if you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextvisit[i] where 0 <= nextvisit[i] <= i; if you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n. return the label of the first day where you have been in all the rooms. it can be shown that such a day exists. since the answer may be very large, return it modulo 109 + 7.
largest palindromic number you are given a string num consisting of digits only. return the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. it should not contain leading zeroes. notes: you do not need to use all the digits of num, but you must use at least one digit. the digits can be reordered.
minimum replacements to sort the array you are given a 0-indexed integer array nums. in one operation you can replace any element of the array with any two elements that sum to it. for example, consider nums = [5,6,7]. in one operation, we can replace nums[1] with 2 and 4 and convert nums to [5,2,4,7]. return the minimum number of operations to make an array that is sorted in non-decreasing order.
monthly transactions i sql schema table: transactions +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | country | varchar | | state | enum | | amount | int | | trans_date | date | +---------------+---------+ id is the primary key of this table. the table has information about incoming transactions. the state column is an enum of type ["approved", "declined"]. write an sql query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount. return the result table in any order. the query result format is in the following example.
binary tree level order traversal ii given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
counter ii write a function createcounter. it should accept an initial integer init. it should return an object with three functions. the three functions are: increment() increases the current value by 1 and then returns it. decrement() reduces the current value by 1 and then returns it. reset() sets the current value to init and then returns it.
generate parentheses given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
unique binary search trees ii given an integer n, return all the structurally unique bst's (binary search trees), which has exactly n nodes of unique values from 1 to n. return the answer in any order.
remove comments given a c++ program, remove comments from it. the program source is an array of strings source where source[i] is the ith line of the source code. this represents the result of splitting the original source code string by the newline character '\n'. in c++, there are two types of comments, line comments, and block comments. the string "//" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored. the string "/*" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of "*/" should be ignored. (here, occurrences happen in reading order: line by line from left to right.) to be clear, the string "/*/" does not yet end the block comment, as the ending would be overlapping the beginning. the first effective comment takes precedence over others. for example, if the string "//" occurs in a block comment, it is ignored. similarly, if the string "/*" occurs in a line or block comment, it is also ignored. if a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty. there will be no control characters, single quote, or double quote characters. for example, source = "string s = "/* not a comment. */";" will not be a test case. also, nothing else such as defines or macros will interfere with the comments. it is guaranteed that every open block comment will eventually be closed, so "/*" outside of a line or block comment always starts a new comment. finally, implicit newline characters can be deleted by block comments. please see the examples below for details. after removing the comments from the source code, return the source code in the same format.
decoded string at index you are given an encoded string s. to decode the string to a tape, the encoded string is read one character at a time and the following steps are taken: if the character read is a letter, that letter is written onto the tape. if the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total. given an integer k, return the kth letter (1-indexed) in the decoded string.
break a palindrome given a palindromic string of lowercase english letters palindrome, replace exactly one character with any lowercase english letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. return the resulting string. if there is no way to replace a character to make it not a palindrome, return an empty string. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. for example, "abcc" is lexicographically smaller than "abcd" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.
count submatrices with all ones given an m x n binary matrix mat, return the number of submatrices that have all ones.
buy two chocolates you are given an integer array prices representing the prices of various chocolates in a store. you are also given a single integer money, which represents your initial amount of money. you must buy exactly two chocolates in such a way that you still have some non-negative leftover money. you would like to minimize the sum of the prices of the two chocolates you buy. return the amount of money you will have leftover after buying the two chocolates. if there is no way for you to buy two chocolates without ending up in debt, return money. note that the leftover must be non-negative.
swap for longest repeated character substring you are given a string text. you can swap two of the characters in the text. return the length of the longest substring with repeated characters.
calculate delayed arrival time you are given a positive integer arrivaltime denoting the arrival time of a train in hours, and another positive integer delayedtime denoting the amount of delay in hours. return the time when the train will arrive at the station. note that the time in this problem is in 24-hours format.
monotonic array an array is monotonic if it is either monotone increasing or monotone decreasing. an array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. an array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j]. given an integer array nums, return true if the given array is monotonic, or false otherwise.
implement trie (prefix tree) a trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. there are various applications of this data structure, such as autocomplete and spellchecker. implement the trie class: trie() initializes the trie object. void insert(string word) inserts the string word into the trie. boolean search(string word) returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startswith(string prefix) returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
root equals sum of children you are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child. return true if the value of the root is equal to the sum of the values of its two children, or false otherwise.
isomorphic strings given two strings s and t, determine if they are isomorphic. two strings s and t are isomorphic if the characters in s can be replaced to get t. all occurrences of a character must be replaced with another character while preserving the order of characters. no two characters may map to the same character, but a character may map to itself.
lexicographically smallest palindrome you are given a string s consisting of lowercase english letters, and you are allowed to perform operations on it. in one operation, you can replace a character in s with another lowercase english letter. your task is to make s a palindrome with the minimum number of operations possible. if there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. return the resulting palindrome string.
delete duplicate folders in system due to a bug, there are many duplicate folders in a file system. you are given a 2d array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system. for example, ["one", "two", "three"] represents the path "/one/two/three". two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. the folders do not need to be at the root level to be identical. if two or more folders are identical, then mark the folders as well as all their subfolders. for example, folders "/a" and "/b" in the file structure below are identical. they (as well as their subfolders) should all be marked: /a /a/x /a/x/y /a/z /b /b/x /b/x/y /b/z however, if the file structure also included the path "/b/w", then the folders "/a" and "/b" would not be identical. note that "/a/x" and "/b/x" would still be considered identical even with the added folder. once all the identical folders and their subfolders have been marked, the file system will delete all of them. the file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted. return the 2d array ans containing the paths of the remaining folders after deleting all the marked folders. the paths may be returned in any order.
combine two tables sql schema table: person +-------------+---------+ | column name | type | +-------------+---------+ | personid | int | | lastname | varchar | | firstname | varchar | +-------------+---------+ personid is the primary key column for this table. this table contains information about the id of some persons and their first and last names. table: address +-------------+---------+ | column name | type | +-------------+---------+ | addressid | int | | personid | int | | city | varchar | | state | varchar | +-------------+---------+ addressid is the primary key column for this table. each row of this table contains information about the city and state of one person with id = personid. write an sql query to report the first name, last name, city, and state of each person in the person table. if the address of a personid is not present in the address table, report null instead. return the result table in any order. the query result format is in the following example.
my calendar iii a k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.) you are given some events [starttime, endtime), after each given event, return an integer k representing the maximum k-booking between all the previous events. implement the mycalendarthree class: mycalendarthree() initializes the object. int book(int starttime, int endtime) returns an integer k representing the largest integer such that there exists a k-booking in the calendar.
count the number of beautiful subarrays you are given a 0-indexed integer array nums. in one operation, you can: choose two different indices i and j such that 0 <= i, j < nums.length. choose a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1. subtract 2k from nums[i] and nums[j]. a subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times. return the number of beautiful subarrays in the array nums. a subarray is a contiguous non-empty sequence of elements within an array.
power of two given an integer n, return true if it is a power of two. otherwise, return false. an integer n is a power of two, if there exists an integer x such that n == 2x.
fizz buzz multithreaded you have the four functions: printfizz that prints the word "fizz" to the console, printbuzz that prints the word "buzz" to the console, printfizzbuzz that prints the word "fizzbuzz" to the console, and printnumber that prints a given integer to the console. you are given an instance of the class fizzbuzz that has four functions: fizz, buzz, fizzbuzz and number. the same instance of fizzbuzz will be passed to four different threads: thread a: calls fizz() that should output the word "fizz". thread b: calls buzz() that should output the word "buzz". thread c: calls fizzbuzz() that should output the word "fizzbuzz". thread d: calls number() that should only output the integers. modify the given class to output the series [1, 2, "fizz", 4, "buzz", ...] where the ith token (1-indexed) of the series is: "fizzbuzz" if i is divisible by 3 and 5, "fizz" if i is divisible by 3 and not 5, "buzz" if i is divisible by 5 and not 3, or i if i is not divisible by 3 or 5. implement the fizzbuzz class: fizzbuzz(int n) initializes the object with the number n that represents the length of the sequence that should be printed. void fizz(printfizz) calls printfizz to output "fizz". void buzz(printbuzz) calls printbuzz to output "buzz". void fizzbuzz(printfizzbuzz) calls printfizzbuzz to output "fizzbuzz". void number(printnumber) calls printnumber to output the numbers.
spiral matrix iii you start at the cell (rstart, cstart) of an rows x cols grid facing east. the northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column. you will walk in a clockwise spiral shape to visit every position in this grid. whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). eventually, we reach all rows * cols spaces of the grid. return an array of coordinates representing the positions of the grid in the order you visited them.
minimum number of vertices to reach all nodes given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi. find the smallest set of vertices from which all nodes in the graph are reachable. it's guaranteed that a unique solution exists. notice that you can return the vertices in any order.
sum of all subset xor totals the xor total of an array is defined as the bitwise xor of all its elements, or 0 if the array is empty. for example, the xor total of the array [2,5,6] is 2 xor 5 xor 6 = 1. given an array nums, return the sum of all xor totals for every subset of nums. note: subsets with the same elements should be counted multiple times. an array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.
trapping rain water given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
rabbits in forest there is a forest with an unknown number of rabbits. we asked n rabbits "how many rabbits have the same color as you?" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit. given the array answers, return the minimum number of rabbits that could be in the forest.
sum of subarray ranges you are given an integer array nums. the range of a subarray of nums is the difference between the largest and smallest element in the subarray. return the sum of all subarray ranges of nums. a subarray is a contiguous non-empty sequence of elements within an array.
count triplets that can form two arrays of equal xor given an array of integers arr. we want to select three indices i, j and k where (0 <= i < j <= k < arr.length). let's define a and b as follows: a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k] note that ^ denotes the bitwise-xor operation. return the number of triplets (i, j and k) where a == b.
sum of scores of built strings you are building a string s of length n one character at a time, prepending each new character to the front of the string. the strings are labeled from 1 to n, where the string with length i is labeled si. for example, for s = "abaca", s1 == "a", s2 == "ca", s3 == "aca", etc. the score of si is the length of the longest common prefix between si and sn (note that s == sn). given the final string s, return the sum of the score of every si.
convert to base -2 given an integer n, return a binary string representing its representation in base -2. note that the returned string should not have leading zeros unless the string is "0".
daily leads and partners sql schema table: dailysales +-------------+---------+ | column name | type | +-------------+---------+ | date_id | date | | make_name | varchar | | lead_id | int | | partner_id | int | +-------------+---------+ this table does not have a primary key. this table contains the date and the name of the product sold and the ids of the lead and partner it was sold to. the name consists of only lowercase english letters. write an sql query that will, for each date_id and make_name, return the number of distinct lead_id's and distinct partner_id's. return the result table in any order. the query result format is in the following example.
recover a tree from preorder traversal we run a preorder depth-first search (dfs) on the root of a binary tree. at each node in this traversal, we output d dashes (where d is the depth of this node), then we output the value of this node. if the depth of a node is d, the depth of its immediate child is d + 1. the depth of the root node is 0. if a node has only one child, that child is guaranteed to be the left child. given the output traversal of this traversal, recover the tree and return its root.
find the middle index in array given a 0-indexed integer array nums, find the leftmost middleindex (i.e., the smallest amongst all the possible ones). a middleindex is an index where nums[0] + nums[1] + ... + nums[middleindex-1] == nums[middleindex+1] + nums[middleindex+2] + ... + nums[nums.length-1]. if middleindex == 0, the left side sum is considered to be 0. similarly, if middleindex == nums.length - 1, the right side sum is considered to be 0. return the leftmost middleindex that satisfies the condition, or -1 if there is no such index.
smallest k-length subsequence with occurrences of a letter you are given a string s, an integer k, a letter letter, and an integer repetition. return the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. the test cases are generated so that the letter appears in s at least repetition times. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. a string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.
closest divisors given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2. return the two integers in any order.
number of great partitions you are given an array nums consisting of positive integers and an integer k. partition the array into two ordered groups such that each element is in exactly one group. a partition is called great if the sum of elements of each group is greater than or equal to k. return the number of distinct great partitions. since the answer may be too large, return it modulo 109 + 7. two partitions are considered distinct if some element nums[i] is in different groups in the two partitions.
my calendar i you are implementing a program to use as your calendar. we can add a new event if adding the event will not cause a double booking. a double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.). the event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end. implement the mycalendar class: mycalendar() initializes the calendar object. boolean book(int start, int end) returns true if the event can be added to the calendar successfully without causing a double booking. otherwise, return false and do not add the event to the calendar.
shortest bridge you are given an n x n binary matrix grid where 1 represents land and 0 represents water. an island is a 4-directionally connected group of 1's not connected to any other 1's. there are exactly two islands in grid. you may change 0's to 1's to connect the two islands to form one island. return the smallest number of 0's you must flip to connect the two islands.
target sum you are given an integer array nums and an integer target. you want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers. for example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1". return the number of different expressions that you can build, which evaluates to target.
counting words with a given prefix you are given an array of strings words and a string pref. return the number of strings in words that contain pref as a prefix. a prefix of a string s is any leading contiguous substring of s.
divisor game alice and bob take turns playing a game, with alice starting first. initially, there is a number n on the chalkboard. on each player's turn, that player makes a move consisting of: choosing any x with 0 < x < n and n % x == 0. replacing the number n on the chalkboard with n - x. also, if a player cannot make a move, they lose the game. return true if and only if alice wins the game, assuming both players play optimally.
sum of floored pairs given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. since the answer may be too large, return it modulo 109 + 7. the floor() function returns the integer part of the division.
maximum xor for each query you are given a sorted array nums of n non-negative integers and an integer maximumbit. you want to perform the following query n times: find a non-negative integer k < 2maximumbit such that nums[0] xor nums[1] xor ... xor nums[nums.length-1] xor k is maximized. k is the answer to the ith query. remove the last element from the current array nums. return an array answer, where answer[i] is the answer to the ith query.
find k-th smallest pair distance the distance of a pair of integers a and b is defined as the absolute difference between a and b. given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.
k highest ranked items within a price range you are given a 0-indexed 2d integer array grid of size m x n that represents a map of the items in a shop. the integers in the grid represent the following: 0 represents a wall that you cannot pass through. 1 represents an empty cell that you can freely move to and from. all other positive integers represent the price of an item in that cell. you may also freely move to and from these item cells. it takes 1 step to travel between adjacent grid cells. you are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). you are further given an integer k. you are interested in the positions of the k highest-ranked items whose prices are within the given price range. the rank is determined by the first of these criteria that is different: distance, defined as the length of the shortest path from the start (shorter distance has a higher rank). price (lower price has a higher rank, but it must be in the price range). the row number (smaller row number has a higher rank). the column number (smaller column number has a higher rank). return the k highest-ranked items within the price range sorted by their rank (highest to lowest). if there are fewer than k reachable items within the price range, return all of them.
valid tic-tac-toe state given a tic-tac-toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. the board is a 3 x 3 array that consists of characters ' ', 'x', and 'o'. the ' ' character represents an empty square. here are the rules of tic-tac-toe: players take turns placing characters into empty squares ' '. the first player always places 'x' characters, while the second player always places 'o' characters. 'x' and 'o' characters are always placed into empty squares, never filled ones. the game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. the game also ends if all squares are non-empty. no more moves can be played if the game is over.
find the minimum and maximum number of nodes between critical points a critical point in a linked list is defined as either a local maxima or a local minima. a node is a local maxima if the current node has a value strictly greater than the previous node and the next node. a node is a local minima if the current node has a value strictly smaller than the previous node and the next node. note that a node can only be a local maxima/minima if there exists both a previous node and a next node. given a linked list head, return an array of length 2 containing [mindistance, maxdistance] where mindistance is the minimum distance between any two distinct critical points and maxdistance is the maximum distance between any two distinct critical points. if there are fewer than two critical points, return [-1, -1].
remove duplicates from sorted list given the head of a sorted linked list, delete all duplicates such that each element appears only once. return the linked list sorted as well.
simplified fractions given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. you can return the answer in any order.
maximum number of words found in sentences a sentence is a list of words that are separated by a single space with no leading or trailing spaces. you are given an array of strings sentences, where each sentences[i] represents a single sentence. return the maximum number of words that appear in a single sentence.
shortest completing word given a string licenseplate and an array of strings words, find the shortest completing word in words. a completing word is a word that contains all the letters in licenseplate. ignore numbers and spaces in licenseplate, and treat letters as case insensitive. if a letter appears more than once in licenseplate, then it must appear in the word the same number of times or more. for example, if licenseplate = "abc 12c", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. possible completing words are "abccdef", "caaacab", and "cbca". return the shortest completing word in words. it is guaranteed an answer exists. if there are multiple shortest completing words, return the first one that occurs in words.
shortest subarray to be removed to make array sorted given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing. return the length of the shortest subarray to remove. a subarray is a contiguous subsequence of the array.
balance a binary search tree given the root of a binary search tree, return a balanced binary search tree with the same node values. if there is more than one answer, return any of them. a binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.
solve the equation solve a given equation and return the value of 'x' in the form of a string "x=#value". the equation contains only '+', '-' operation, the variable 'x' and its coefficient. you should return "no solution" if there is no solution for the equation, or "infinite solutions" if there are infinite solutions for the equation. if there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.
unique morse code words international morse code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: 'a' maps to ".-", 'b' maps to "-...", 'c' maps to "-.-.", and so on. for convenience, the full table for the 26 letters of the english alphabet is given below: [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."] given an array of strings words where each word can be written as a concatenation of the morse code of each letter. for example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". we will call such a concatenation the transformation of a word. return the number of different transformations among all words we have.
convert integer to the sum of two no-zero integers no-zero integer is a positive integer that does not contain any 0 in its decimal representation. given an integer n, return a list of two integers [a, b] where: a and b are no-zero integers. a + b = n the test cases are generated so that there is at least one valid solution. if there are many valid solutions, you can return any of them.
find the maximum divisibility score you are given two 0-indexed integer arrays nums and divisors. the divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i]. return the integer divisors[i] with the maximum divisibility score. if there is more than one integer with the maximum score, return the minimum of them.
minimize the total price of the trips there exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. each node has an associated price. you are given an integer array price, where price[i] is the price of the ith node. the price sum of a given path is the sum of the prices of all nodes lying on that path. additionally, you are given a 2d integer array trips, where trips[i] = [starti, endi] indicates that you start the ith trip from the node starti and travel to the node endi by any path you like. before performing your first trip, you can choose some non-adjacent nodes and halve the prices. return the minimum total price sum to perform all the given trips.
minimum garden perimeter to collect enough apples in a garden represented as an infinite 2d grid, there is an apple tree planted at every integer coordinate. the apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it. you will buy an axis-aligned square plot of land that is centered at (0, 0). given an integer neededapples, return the minimum perimeter of a plot such that at least neededapples apples are inside or on the perimeter of that plot. the value of |x| is defined as: x if x >= 0 -x if x < 0
maximum number of fish in a grid you are given a 0-indexed 2d matrix grid of size m x n, where (r, c) represents: a land cell if grid[r][c] = 0, or a water cell containing grid[r][c] fish, if grid[r][c] > 0. a fisher can start at any water cell (r, c) and can do the following operations any number of times: catch all the fish at cell (r, c), or move to any adjacent water cell. return the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists. an adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.
advantage shuffle you are given two integer arrays nums1 and nums2 both of the same length. the advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i]. return any permutation of nums1 that maximizes its advantage with respect to nums2.
rotating the box you are given an m x n matrix of characters box representing a side-view of a box. each cell of the box is one of the following: a stone '#' a stationary obstacle '*' empty '.' the box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions. it is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box. return an n x m matrix representing the box after the rotation described above.
teemo attacking our hero teemo is attacking an enemy ashe with poison attacks! when teemo attacks ashe, ashe gets poisoned for a exactly duration seconds. more formally, an attack at second t will mean ashe is poisoned during the inclusive time interval [t, t + duration - 1]. if teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack. you are given a non-decreasing integer array timeseries, where timeseries[i] denotes that teemo attacks ashe at second timeseries[i], and an integer duration. return the total number of seconds that ashe is poisoned.
maximum nesting depth of two valid parentheses strings a string is a valid parentheses string (denoted vps) if and only if it consists of "(" and ")" characters only, and: it is the empty string, or it can be written as ab (a concatenated with b), where a and b are vps's, or it can be written as (a), where a is a vps. we can similarly define the nesting depth depth(s) of any vps s as follows: depth("") = 0 depth(a + b) = max(depth(a), depth(b)), where a and b are vps's depth("(" + a + ")") = 1 + depth(a), where a is a vps. for example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's. given a vps seq, split it into two disjoint subsequences a and b, such that a and b are vps's (and a.length + b.length = seq.length). now choose any such a and b such that max(depth(a), depth(b)) is the minimum possible value. return an answer array (of length seq.length) that encodes such a choice of a and b: answer[i] = 0 if seq[i] is part of a, else answer[i] = 1. note that even though multiple answers may exist, you may return any of them.
kth distinct string in an array a distinct string is a string that is present only once in an array. given an array of strings arr, and an integer k, return the kth distinct string present in arr. if there are fewer than k distinct strings, return an empty string "". note that the strings are considered in the order in which they appear in the array.
minimum operations to make the array increasing you are given an integer array nums (0-indexed). in one operation, you can choose an element of the array and increment it by 1. for example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3]. return the minimum number of operations needed to make nums strictly increasing. an array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. an array of length 1 is trivially strictly increasing.
design a stack with increment operation design a stack that supports increment operations on its elements. implement the customstack class: customstack(int maxsize) initializes the object with maxsize which is the maximum number of elements in the stack. void push(int x) adds x to the top of the stack if the stack has not reached the maxsize. int pop() pops and returns the top of the stack or -1 if the stack is empty. void inc(int k, int val) increments the bottom k elements of the stack by val. if there are less than k elements in the stack, increment all the elements in the stack.
binary gap given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. if there are no two adjacent 1's, return 0. two 1's are adjacent if there are only 0's separating them (possibly no 0's). the distance between two 1's is the absolute difference between their bit positions. for example, the two 1's in "1001" have a distance of 3.
add digits given an integer num, repeatedly add all its digits until the result has only one digit, and return it.
largest component size by common factor you are given an integer array of unique positive integers nums. consider the following graph: there are nums.length nodes, labeled nums[0] to nums[nums.length - 1], there is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1. return the size of the largest connected component in the graph.
max area of island you are given an m x n binary matrix grid. an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) you may assume all four edges of the grid are surrounded by water. the area of an island is the number of cells with a value 1 in the island. return the maximum area of an island in grid. if there is no island, return 0.
longest subsequence with limited sum you are given an integer array nums of length n, and an integer array queries of length m. return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i]. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
binary trees with factors given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1. we make a binary tree using these integers, and each number may be used for any number of times. each non-leaf node's value should be equal to the product of the values of its children. return the number of binary trees we can make. the answer may be too large so return the answer modulo 109 + 7.
the score of students solving math expression you are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). this expression was given to n elementary school students. the students were instructed to get the answer of the expression by following this order of operations: compute multiplication, reading from left to right; then, compute addition, reading from left to right. you are given an integer array answers of length n, which are the submitted answers of the students in no particular order. you are asked to grade the answers, by following these rules: if an answer equals the correct answer of the expression, this student will be rewarded 5 points; otherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points; otherwise, this student will be rewarded 0 points. return the sum of the points of the students.
triples with bitwise and equal to zero given an integer array nums, return the number of and triples. an and triple is a triple of indices (i, j, k) such that: 0 <= i < nums.length 0 <= j < nums.length 0 <= k < nums.length nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-and operator.
number of ways to earn points there is a test that has n types of questions. you are given an integer target and a 0-indexed 2d integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points. return the number of ways you can earn exactly target points in the exam. since the answer may be too large, return it modulo 109 + 7. note that questions of the same type are indistinguishable. for example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.
minimum skips to arrive at meeting on time you are given an integer hoursbefore, the number of hours you have to travel to your meeting. to arrive at your meeting, you have to travel through n roads. the road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. in addition, you are given an integer speed, which is the speed (in km/h) you will travel at. after you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. note that you do not have to rest after traveling the last road because you are already at the meeting. for example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. if traveling a road takes exactly 2 hours, you do not need to wait. however, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. note that this means you may finish traveling future roads at different hour marks. for example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately. return the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.
moving stones until consecutive ii there are some stones in different positions on the x-axis. you are given an integer array stones, the positions of the stones. call a stone an endpoint stone if it has the smallest or largest position. in one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone. in particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone. the game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play.
find xor-beauty of array you are given a 0-indexed integer array nums. the effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]). the xor-beauty of the array is the xoring of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n. return the xor-beauty of nums. note that: val1 | val2 is bitwise or of val1 and val2. val1 & val2 is bitwise and of val1 and val2.
search insert position given a sorted array of distinct integers and a target value, return the index if the target is found. if not, return the index where it would be if it were inserted in order. you must write an algorithm with o(log n) runtime complexity.
largest number after digit swaps by parity you are given a positive integer num. you may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits). return the largest possible value of num after any number of swaps.
two sum given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. you may assume that each input would have exactly one solution, and you may not use the same element twice. you can return the answer in any order.
minimum lines to represent a line chart you are given a 2d integer array stockprices where stockprices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. a line chart is created from the array by plotting the points on an xy plane with the x-axis representing the day and the y-axis representing the price and connecting adjacent points. one such example is shown below: return the minimum number of lines needed to represent the line chart.
adding two negabinary numbers given two numbers arr1 and arr2 in base -2, return the result of adding them together. each number is given in array format: as an array of 0s and 1s, from most significant bit to least significant bit. for example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3. a number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1. return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.
minimum time difference given a list of 24-hour clock time points in "hh:mm" format, return the minimum minutes difference between any two time-points in the list.
triangle given a triangle array, return the minimum path sum from top to bottom. for each step, you may move to an adjacent number of the row below. more formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.
greatest common divisor of strings for two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times). given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
random flip matrix there is an m x n binary grid matrix with all the values set 0 initially. design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. all the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned. optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity. implement the solution class: solution(int m, int n) initializes the object with the size of the binary matrix m and n. int[] flip() returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1. void reset() resets all the values of the matrix to be 0.
maximize palindrome length from subsequences you are given two strings, word1 and word2. you want to construct a string in the following manner: choose some non-empty subsequence subsequence1 from word1. choose some non-empty subsequence subsequence2 from word2. concatenate the subsequences: subsequence1 + subsequence2, to make the string. return the length of the longest palindrome that can be constructed in the described manner. if no palindromes can be constructed, return 0. a subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters. a palindrome is a string that reads the same forward as well as backward.
shift 2d grid given a 2d grid of size m x n and an integer k. you need to shift the grid k times. in one shift operation: element at grid[i][j] moves to grid[i][j + 1]. element at grid[i][n - 1] moves to grid[i + 1][0]. element at grid[m - 1][n - 1] moves to grid[0][0]. return the 2d grid after applying shift operation k times.
top k frequent elements given an integer array nums and an integer k, return the k most frequent elements. you may return the answer in any order.
people whose list of favorite companies is not a subset of another list given the array favoritecompanies where favoritecompanies[i] is the list of favorites companies for the ith person (indexed from 0). return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. you must return the indices in increasing order.
count number of rectangles containing each point you are given a 2d integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. you are also given a 2d integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj). the ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi). return an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point. the ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.
number of closed islands given a 2d grid consists of 0s (land) and 1s (water). an island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s. return the number of closed islands.
crawler log folder the leetcode file system keeps a log each time some user performs a change folder operation. the operations are described below: "../" : move to the parent folder of the current folder. (if you are already in the main folder, remain in the same folder). "./" : remain in the same folder. "x/" : move to the child folder named x (this folder is guaranteed to always exist). you are given a list of strings logs where logs[i] is the operation performed by the user at the ith step. the file system starts in the main folder, then the operations in logs are performed. return the minimum number of operations needed to go back to the main folder after the change folder operations.
design authentication manager there is an authentication system that works with authentication tokens. for each session, the user will receive a new authentication token that will expire timetolive seconds after the currenttime. if the token is renewed, the expiry time will be extended to expire timetolive seconds after the (potentially different) currenttime. implement the authenticationmanager class: authenticationmanager(int timetolive) constructs the authenticationmanager and sets the timetolive. generate(string tokenid, int currenttime) generates a new token with the given tokenid at the given currenttime in seconds. renew(string tokenid, int currenttime) renews the unexpired token with the given tokenid at the given currenttime in seconds. if there are no unexpired tokens with the given tokenid, the request is ignored, and nothing happens. countunexpiredtokens(int currenttime) returns the number of unexpired tokens at the given currenttime. note that if a token expires at time t, and another action happens on time t (renew or countunexpiredtokens), the expiration takes place before the other actions.
classes more than 5 students sql schema table: courses +-------------+---------+ | column name | type | +-------------+---------+ | student | varchar | | class | varchar | +-------------+---------+ (student, class) is the primary key column for this table. each row of this table indicates the name of a student and the class in which they are enrolled. write an sql query to report all the classes that have at least five students. return the result table in any order. the query result format is in the following example.
find all lonely numbers in the array you are given an integer array nums. a number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array. return all lonely numbers in nums. you may return the answer in any order.
slowest key a newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time. you are given a string keyspressed of length n, where keyspressed[i] was the ith key pressed in the testing sequence, and a sorted list releasetimes, where releasetimes[i] was the time the ith key was released. both arrays are 0-indexed. the 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released. the tester wants to know the key of the keypress that had the longest duration. the ith keypress had a duration of releasetimes[i] - releasetimes[i - 1], and the 0th keypress had a duration of releasetimes[0]. note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration. return the key of the keypress that had the longest duration. if there are multiple such keypresses, return the lexicographically largest key of the keypresses.
reformat the string you are given an alphanumeric string s. (alphanumeric string is a string consisting of lowercase english letters and digits). you have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. that is, no two adjacent characters have the same type. return the reformatted string or return an empty string if it is impossible to reformat the string.
intersection of two arrays given two integer arrays nums1 and nums2, return an array of their intersection. each element in the result must be unique and you may return the result in any order.
check if there is a valid path in a grid you are given an m x n grid. each cell of grid represents a street. the street of grid[i][j] can be: 1 which means a street connecting the left cell and the right cell. 2 which means a street connecting the upper cell and the lower cell. 3 which means a street connecting the left cell and the lower cell. 4 which means a street connecting the right cell and the lower cell. 5 which means a street connecting the left cell and the upper cell. 6 which means a street connecting the right cell and the upper cell. you will initially start at the street of the upper-left cell (0, 0). a valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). the path should only follow the streets. notice that you are not allowed to change any street. return true if there is a valid path in the grid or false otherwise.
maximum count of positive integer and negative integer given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers. in other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg. note that 0 is neither positive nor negative.
smallest sufficient team in a project, you have a list of required skills req_skills, and a list of people. the ith person people[i] contains a list of skills that the person has. consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. we can represent these teams by the index of each person. for example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3]. return any sufficient team of the smallest possible size, represented by the index of each person. you may return the answer in any order. it is guaranteed an answer exists.
substring compression data structures dp matrices
make a palindrome binary search brute force data structures greedy math
not a nim problem brute force games math number theory
colored portals binary search brute force data structures graphs greedy implementation shortest paths
splitting items games greedy sortings
game with doors brute force greedy
closest point implementation math
counting 101 greedy
lattice optimizing bitmasks brute force hashing meet-in-the-middle
court blue (hard version) brute force dp math number theory
court blue (easy version) brute force dfs and similar dp math number theory
cosmic rays brute force data structures dp
dfs checker (hard version) binary search data structures dfs and similar graphs hashing trees
dfs checker (easy version) brute force data structures dfs and similar graphs hashing trees
black circles brute force geometry greedy math
removals game constructive algorithms games
distanced coloring constructive algorithms implementation math
deterministic heap (hard version) combinatorics dp trees
deterministic heap (easy version) combinatorics dp math trees
longest max min subsequence brute force constructive algorithms data structures greedy implementation two pointers
guess the tree binary search brute force dfs and similar divide and conquer dsu greedy interactive trees
generate permutation constructive algorithms greedy implementation
make all equal greedy implementation
ksyusha and the loaded set binary search brute force data structures implementation
call during the journey binary search brute force graphs greedy shortest paths
color rows and columns dp greedy implementation math
photoshoot for gorillas combinatorics data structures greedy math
right left wrong greedy implementation two pointers
numeric string template data structures strings
seating in a bus two pointers
primary task implementation math strings
ruler (hard version) binary search interactive ternary search
ruler (easy version) binary search interactive
expected median combinatorics math
triple operations dp implementation math
slavic's exam greedy implementation strings
showering greedy implementation
card game brute force constructive algorithms implementation
a+b again? implementation math
eliminating balls with merging (hard version) binary search brute force data structures divide and conquer greedy implementation
eliminating balls with merging (easy version) binary search brute force data structures divide and conquer greedy
determine winning islands in race data structures dp graphs greedy shortest paths
perform operations to maximize score binary search brute force constructive algorithms greedy implementation
minimize equal sum subarrays constructive algorithms math number theory
find k distinct points with fixed center constructive algorithms implementation math
chips on a line brute force combinatorics dp greedy math
level up binary search brute force data structures divide and conquer implementation
maximize the root binary search dfs and similar dp greedy trees
even positions constructive algorithms data structures greedy
make three regions constructive algorithms two pointers
strong password brute force implementation strings
penacony brute force data structures graphs greedy hashing
bomb binary search greedy math
decode combinatorics data structures implementation math
fun binary search brute force combinatorics math number theory
sort dp greedy sortings strings
scale greedy implementation
legs binary search math ternary search
let me teach you a lesson (hard version) data structures dp matrices two pointers
let me teach you a lesson (easy version) 2-sat data structures dp matrices two pointers
cases bitmasks brute force dp strings
squaring brute force constructive algorithms greedy implementation math number theory
bouquet (hard version) binary search data structures greedy math sortings two pointers
bouquet (easy version) binary search brute force greedy sortings two pointers
diagonals brute force greedy implementation math
fortnite combinatorics constructive algorithms games greedy hashing interactive math number theory strings
minecraft bitmasks brute force dp graphs math
stardew valley constructive algorithms dfs and similar graphs trees
wooden game bitmasks greedy math trees
funny game constructive algorithms dsu graphs greedy math number theory trees
hungry games binary search dp two pointers
fun game bitmasks constructive algorithms greedy math
diverse game constructive algorithms greedy implementation
dyn-scripted robot (hard version) chinese remainder theorem math number theory
dyn-scripted robot (easy version) brute force chinese remainder theorem constructive algorithms math number theory
xor-grid problem bitmasks constructive algorithms dp implementation
med-imize binary search dp greedy
light switches implementation math
parity and sum constructive algorithms greedy
question marks greedy implementation
ultra-meow combinatorics dp math
valuable cards brute force dp greedy number theory two pointers
novice's mistake brute force constructive algorithms implementation math strings
test of love dp greedy implementation
gorilla and permutation constructive algorithms math
angry monk greedy math sortings
only pluses brute force constructive algorithms greedy math sortings
grid game constructive algorithms games graph matchings greedy interactive
prime split game bitmasks dp fft games math number theory
grid reset constructive algorithms greedy implementation
triangle formation brute force greedy implementation math sortings
coloring game constructive algorithms dfs and similar games graphs greedy interactive
prime xor coloring bitmasks constructive algorithms graphs greedy math number theory
absolute zero constructive algorithms greedy math
and reconstruction bitmasks constructive algorithms greedy
maximize the last element greedy implementation
polygonal segments brute force data structures divide and conquer dp greedy two pointers
catch the mole(hard version) binary search data structures dfs and similar divide and conquer interactive trees
catch the mole(easy version) binary search data structures dfs and similar interactive trees
grid puzzle bitmasks brute force dp greedy implementation
mad mad sum brute force greedy math
array craft constructive algorithms greedy
submission bait brute force games greedy sortings
simultaneous coloring dfs and similar divide and conquer graphs
distance to different combinatorics dp math
smithing skill brute force data structures dp greedy math sortings two pointers
two movies greedy math
substring and subsequence brute force greedy strings
catch the coin implementation
heartbeat combinatorics dp fft math
range minimum sum binary search brute force data structures divide and conquer implementation
the omnipotent monster killer brute force dfs and similar dp trees
increasing sequence with fixed or bitmasks constructive algorithms greedy
make majority greedy implementation
split the multiset brute force greedy implementation math
fumo temple interactive
spinning round (hard version) divide and conquer dp trees
spinning round (easy version) divide and conquer dp trees
interesting problem (hard version) dp
interesting problem (easy version) dp
wonderful tree! brute force data structures dfs and similar dsu greedy trees
world is mine dp games
basil's garden dp greedy
k-sort greedy
upload more ram greedy math
permutation problem (hard version) brute force data structures hashing math number theory
permutation problem (simple version) binary search brute force combinatorics data structures math number theory
non-academic problem dfs and similar graphs trees
beautiful array greedy math number theory sortings
mathematical problem brute force dp greedy implementation math two pointers
update queries data structures greedy sortings
matrix stabilization brute force data structures greedy sortings
x axis brute force geometry math sortings
maximize the largest component (hard version) data structures dfs and similar dp dsu implementation
maximize the largest component (easy version) brute force data structures dfs and similar dsu graphs implementation
d-function combinatorics math number theory
final boss binary search data structures
secret box brute force combinatorics math
manhattan circle implementation math
good prefixes greedy
maximum multiple sum brute force math number theory
creating words implementation strings
tower capturing combinatorics dp geometry
magic trick ii constructive algorithms implementation sortings
reconstruction brute force dp math
shuffle dp greedy trees
''a'' string problem brute force hashing implementation math string suffix structures strings
magnitude (hard version) combinatorics dp greedy math
magnitude (easy version) dp greedy math
large addition implementation math
strange splitting constructive algorithms
your loss bitmasks brute force dp trees
array-value binary search bitmasks data structures greedy two pointers
i love balls combinatorics math probabilities
swap dilemma constructive algorithms data structures divide and conquer greedy math sortings
have your cake and eat it too binary search brute force greedy implementation
corner twist constructive algorithms greedy implementation math
array divisibility constructive algorithms math
sorting problem again binary search data structures sortings
number of k-good subarrays bitmasks brute force combinatorics divide and conquer dp math meet-in-the-middle
beauty of the mountains brute force data structures implementation math number theory
boring day binary search data structures dp greedy two pointers
collatz conjecture brute force implementation math number theory
soccer greedy implementation math sortings
turtle and paths on a tree data structures dp trees
turtle and intersected segments data structures dsu graphs greedy
turtle and multiplication constructive algorithms dfs and similar graphs number theory
turtle and an incomplete sequence bitmasks brute force constructive algorithms greedy implementation math
turtle and an infinite sequence bitmasks math
turtle and piggy are playing a game brute force greedy math
yasya and the mysterious tree bitmasks data structures dfs and similar graphs greedy strings trees
field division (hard version) math sortings
field division (easy version) data structures math sortings
permutation of rows and columns constructive algorithms data structures greedy hashing implementation math matrices sortings
gcd-sequence greedy implementation math number theory
sofia and the lost operations constructive algorithms greedy
choosing cubes sortings sortings
problem generator math
kostyanych's theorem brute force constructive algorithms graphs interactive
manhattan triangle binary search constructive algorithms data structures geometry implementation two pointers
fixing a binary string bitmasks brute force constructive algorithms dp greedy hashing strings
earning on bets binary search combinatorics constructive algorithms number theory
xor sequences bitmasks greedy
guess the maximum brute force greedy implementation
large graph data structures dfs and similar dsu graphs number theory two pointers
computing machine brute force data structures dp greedy implementation
elections data structures greedy implementation math
manhattan permutations constructive algorithms data structures greedy implementation math
new bakery binary search greedy math ternary search
alice and books constructive algorithms greedy sortings
tensor constructive algorithms graphs interactive
xorificator bitmasks brute force greedy hashing
nikita and lcm brute force data structures dp greedy math number theory sortings
binary colouring bitmasks constructive algorithms greedy math
little nikita math
remove bridges data structures dfs and similar dp greedy sortings trees
splittable permutations combinatorics data structures dfs and similar greedy math trees
invertible bracket sequences binary search combinatorics data structures divide and conquer implementation two pointers
job interview binary search dp greedy implementation two pointers
increase/decrease/copy greedy implementation
verify password implementation sortings strings
mind bloom dp
378qaq and core greedy strings
zimpha fan club fft greedy math strings
set bitmasks brute force combinatorics dfs and similar divide and conquer dp math
chain queries binary search data structures dfs and similar implementation trees
paint the tree brute force dfs and similar dp greedy shortest paths trees
chamo and mocha's array binary search brute force greedy
378qaq and mocha's array brute force greedy math sortings
bazoka and mocha's array brute force greedy implementation sortings
money buys less happiness now data structures greedy sortings
cutting game binary search brute force data structures implementation sortings two pointers
money buys happiness dp
ingenuity-2 constructive algorithms greedy implementation
beautiful triple pairs combinatorics data structures
symmetric encoding implementation sortings strings
phone desktop greedy math
maximum gcd sum queries bitmasks brute force dp implementation number theory
cat, fox and swaps graphs math sortings
cat, fox and maximum array split brute force interactive math
cat, fox and double maximum constructive algorithms greedy implementation math sortings
cat, fox and the lonely array binary search bitmasks data structures greedy math two pointers
chess for three brute force dp implementation math
coin games games
contest proposal brute force greedy two pointers
±1 2-sat dfs and similar graphs
xour data structures dsu sortings
circle perimeter binary search brute force dfs and similar geometry implementation math
find the car binary search math sortings
binary cut dp greedy implementation sortings strings
clock and strings implementation
different string implementation strings
my first sorting problem implementation sortings
min-fund prison (hard) bitmasks dfs and similar dp graphs trees
min-fund prison (medium) brute force dfs and similar dp graphs trees
min-fund prison (easy) dfs and similar trees
playing quidditch (hard) implementation
playing quidditch (medium) implementation
playing quidditch (easy) implementation
trails (hard) dp matrices
trails (medium) dp matrices
trails (easy) dp
arithmancy (hard) interactive
arithmancy (medium) constructive algorithms interactive probabilities strings
arithmancy (easy) brute force constructive algorithms interactive strings
game on tree (hard) dfs and similar dp games trees
game on tree (medium) dfs and similar dp games trees
game on tree (easy) games
exact neighbours (hard) constructive algorithms
exact neighbours (medium) constructive algorithms
exact neighbours (easy) constructive algorithms
balanced unshuffle (hard) constructive algorithms trees
balanced unshuffle (medium) brute force constructive algorithms trees
balanced shuffle (easy) implementation sortings
card pairing dp greedy hashing implementation
unique array binary search data structures divide and conquer dp greedy
shop game data structures greedy math sortings
minimizing the sum dp implementation
shifts and sorting constructive algorithms greedy
two friends constructive algorithms implementation math
division + lcp (hard version) binary search brute force data structures dp hashing math string suffix structures strings
division + lcp (easy version) binary search data structures dp hashing string suffix structures strings
equal xor segments binary search data structures
cells arrangement constructive algorithms
permutation game brute force dfs and similar games graphs greedy math
assembly via remainders constructive algorithms number theory
prefiquence greedy two pointers
maximize? brute force math number theory
next and prev brute force data structures implementation
again counting arrays (hard version) combinatorics dp math
again counting arrays (easy version) combinatorics dp fft math
long way to be non-decreasing binary search dfs and similar graphs implementation shortest paths two pointers
fenwick tree bitmasks brute force combinatorics data structures dp math trees
reverse card (hard version) brute force math number theory
reverse card (easy version) brute force math number theory
permutation counting binary search greedy implementation math sortings
rectangle filling constructive algorithms implementation
card exchange constructive algorithms games greedy
conference data structures flows
connected cubes constructive algorithms games
missing subarray sum constructive algorithms
folding strip constructive algorithms greedy strings
missing subsequence sum bitmasks constructive algorithms greedy number theory
everything nim games greedy math sortings
necromancer *special
equal trees *special graphs meet-in-the-middle
composite spells *special dp
observation towers *special
narrow paths *special combinatorics
yet another permutation constructive *special constructive algorithms
staircase *special
firewood *special
clock in the pool *special math
1-3-5 *special dp
frequency mismatch (hard version) binary search data structures dfs and similar hashing probabilities trees
frequency mismatch (easy version) binary search data structures divide and conquer hashing probabilities trees
carousel of combinations brute force combinatorics dp math number theory
a bit of an inequality bitmasks brute force dp math
how does the rook move? combinatorics dp math
a bit of a construction bitmasks constructive algorithms greedy implementation
stickogon constructive algorithms greedy
nene and the passing game constructive algorithms data structures dsu graphs sortings
nene vs. monsters (hard version) brute force greedy implementation math
nene vs. monsters (easy version) brute force implementation math
nene and the mex operator bitmasks brute force constructive algorithms divide and conquer dp greedy implementation math
nene's magical matrix constructive algorithms greedy math
nene and the card game games greedy
nene's game binary search brute force data structures games greedy
the most reckless defense bitmasks brute force constructive algorithms dp flows graph matchings shortest paths
gcd on a grid brute force dfs and similar dp implementation math number theory
unfair game dp games greedy math schedules
long inversions brute force greedy implementation sortings
inaccurate subsequence search data structures two pointers
inhabitant of the deep sea greedy implementation math
progressive square constructive algorithms data structures implementation sortings
yogurt sale math
unique strings combinatorics dp math
chain reaction binary search data structures dsu greedy implementation math number theory
colored balls combinatorics dp math sortings
long multiplication greedy math number theory
make it ugly implementation math
painting the ribbon constructive algorithms greedy math
accuracy-preserving summation algorithm *special
help, what does it mean to be "based" brute force constructive algorithms expression parsing implementation sortings
dark matter bitmasks geometry
palindrome implementation strings
mathematician takeover binary search dfs and similar math
grid brute force
sweep line combinatorics games math
are you a procrastinator? implementation
they have fooled brute force schedules
is it stated? strings
are you a robot, again? strings
growing trees binary search constructive algorithms flows graphs greedy
thanos snap binary search dp games greedy trees
clacking balls combinatorics math probabilities
inversion composition constructive algorithms data structures greedy
no palindromes brute force constructive algorithms divide and conquer greedy hashing implementation math strings
buying jewels constructive algorithms greedy math
ticket hoarding greedy math sortings
battle cows binary search data structures greedy
dual trigger constructive algorithms greedy math
shuffling songs bitmasks dfs and similar dp graphs hashing implementation strings
0, 1, 2, tree! bitmasks brute force greedy implementation trees
nearly shortest repeating substring brute force implementation number theory strings
product of binary decimals brute force dp implementation number theory
clock conversion implementation math
upscaling implementation
stair, peak, or neither? implementation
make triangle constructive algorithms math
amanda the amoeba graphs implementation trees two pointers
disks dfs and similar geometry graph matchings graphs
division avoidance greedy math
scooter graphs greedy
dating greedy sortings trees
damage per second brute force math
funny or scary? constructive algorithms
annual ants' gathering dfs and similar dp greedy trees
charming meals binary search brute force greedy sortings
grove brute force dfs and similar dp geometry probabilities
mst with matching bitmasks brute force dsu graph matchings trees
rare coins combinatorics math probabilities
clique partition brute force constructive algorithms graphs greedy implementation
tandem repeats? brute force strings two pointers
arrow path brute force constructive algorithms dfs and similar dp graphs shortest paths
array fix brute force dp greedy implementation
special characters brute force constructive algorithms
nobody is needed 2-sat data structures dfs and similar dp
girl permutation combinatorics dp math number theory
birthday gift bitmasks brute force constructive algorithms greedy implementation
tree cutting binary search dp greedy implementation trees
maximum sum dp greedy math
median of an array greedy implementation sortings
gcd is greater brute force data structures math number theory
cook and porridge binary search constructive algorithms data structures implementation
kirill and mushrooms data structures sortings
binary search binary search constructive algorithms greedy
seraphim the owl dp greedy
left and right houses brute force
fireworks math number theory
setting up camp greedy math
equal xor bitmasks constructive algorithms
destroying bridges graphs greedy math
minimum hamming distance dp
mex game 2 (hard version) binary search greedy two pointers
mex game 2 (easy version) binary search brute force greedy
counting is fun (hard version) combinatorics dp
counting is fun (easy version) brute force combinatorics dp math
tree compass constructive algorithms dfs and similar greedy trees
non-palindromic substring hashing implementation math strings
mex game 1 games greedy
farmer john's favorite intern data structures dp flows trees
bessie and cards combinatorics dp math
farmer john's favorite function brute force data structures implementation math
farm game combinatorics games
learning to paint binary search data structures dfs and similar dp greedy implementation sortings
bessie's birthday cake (hard version) geometry greedy math
bessie's birthday cake (easy version) geometry greedy math
bessie and mex constructive algorithms math
farmer john's challenge constructive algorithms math
rudolf and subway constructive algorithms dfs and similar graphs shortest paths
rudolf and imbalance binary search greedy sortings two pointers
rudolf and k bridges binary search data structures dp two pointers
rudolf and the ball game dfs and similar dp implementation
rudolf and the ugly string dp greedy strings
rudolf and 121 brute force dp greedy math
rudolf and the ticket brute force math
almost certainly *special constructive algorithms data structures sortings
burenka and pether *special data structures dfs and similar divide and conquer dsu graphs sortings trees
three arrays *special constructive algorithms implementation sortings
parallel universes *special constructive algorithms dfs and similar dsu graphs
big persimmon *special dp games
more gifts *special dfs and similar two pointers
evidence board *special constructive algorithms dfs and similar graphs trees
draw polygon lines *special constructive algorithms dp geometry interactive
zig-zag
xor operations
tree quiz
there and back again
symmetric boundary
pho restaurant
personality test
forming groups
duplicates
bánh bò
bit counting sequence
attraction score
antiparticle antiphysics
binary path dp greedy implementation
shuffle party implementation math
grand finale: circles binary search geometry
yet yet another permutation problem divide and conquer fft math
bitwise paradox binary search bitmasks data structures greedy two pointers
pokémon arena data structures graphs greedy implementation shortest paths sortings
pinball binary search data structures implementation math two pointers
bitwise operation wizard bitmasks constructive algorithms greedy interactive math
andrey's tree binary search constructive algorithms data structures dfs and similar dsu greedy implementation trees
distance learning courses in mac bitmasks brute force data structures greedy math
exam in mac binary search combinatorics implementation math
messenger in mac binary search brute force constructive algorithms data structures dp greedy sortings
informatics in mac constructive algorithms
entertainment in mac constructive algorithms strings
weird lcm operations brute force constructive algorithms number theory
xor break --- game version bitmasks games greedy interactive
xor break --- solo version bitmasks constructive algorithms greedy
find a mine binary search constructive algorithms geometry greedy interactive math
yet another coin problem brute force dp greedy math
too min too max greedy math
turtle magic: royal turtle shell pattern bitmasks brute force combinatorics constructive algorithms dfs and similar math
turtle mission: robot and the earthquake dfs and similar dp graphs shortest paths
turtle vs. rabbit race: optimal trainings binary search implementation math ternary search
turtle tenacity: continual mods constructive algorithms greedy math number theory sortings
turtle fingers: count the values of k brute force implementation math number theory
turtle math: fast three task implementation math number theory
turtle puzzle: rearrange and negate greedy math sortings
moving platforms graphs math number theory shortest paths
feed cats data structures dp sortings
final countdown implementation math number theory
card game greedy implementation
lr-remainders brute force data structures implementation math two pointers
chaya calendar number theory
thorns and coins dp greedy implementation
one-dimensional puzzle combinatorics math number theory
chat screenshots combinatorics dfs and similar graphs
anna and the valentine's day gift games greedy math sortings
divisible pairs combinatorics math number theory
make equal again brute force greedy math
make equal greedy
recovering a small string brute force strings
counting is fun combinatorics
interactive mex tree constructive algorithms dfs and similar interactive trees
prefix max set counting data structures dp trees
maximize the difference bitmasks brute force dfs and similar
2..3...4.... wonderful! wonderful! combinatorics dp math
sum over all substrings (hard version) bitmasks divide and conquer dp dsu greedy implementation strings
sum over all substrings (easy version) brute force dp greedy strings
lexicographically largest binary search constructive algorithms data structures greedy sortings
permutation printing brute force constructive algorithms math
maximise the score greedy sortings
sasha and the wedding binary search tree brute force combinatorics data structures dfs and similar math trees
sasha and the happy tree cutting bitmasks brute force dfs and similar dp graphs greedy math trees
sasha and a walk in the city combinatorics dp math trees
sasha and the casino binary search brute force constructive algorithms games greedy math
sasha and the drawing constructive algorithms greedy math
sasha and the beautiful array constructive algorithms greedy math sortings
digital patterns combinatorics data structures implementation math
modular sequence brute force constructive algorithms dp graphs greedy math number theory
lonely mountain dungeons brute force data structures greedy math ternary search
physical education lesson brute force math number theory
equalize binary search greedy sortings two pointers
rectangle cutting geometry math
paint charges data structures dp greedy math
microcycle data structures dfs and similar dsu graphs greedy implementation sortings trees
klever permutation constructive algorithms math two pointers
find the different ones! binary search brute force data structures dp dsu greedy two pointers
choose the different ones! brute force greedy math
following the string constructive algorithms greedy strings
make it white greedy strings
vlad and trouble at mit dfs and similar dp flows graphs greedy implementation trees
vlad and avoiding x bitmasks brute force dfs and similar dp implementation
vlad and an odd ordering binary search bitmasks data structures dp implementation math number theory
vlad and division bitmasks greedy
vlad and a sum of sum of digits dp implementation
vlad and shapes geometry implementation
vlad and the best of five implementation
good trip combinatorics dp math probabilities
a balanced problemset? brute force greedy math number theory
we got everything covered! constructive algorithms greedy strings
anti-proxy attendance constructive algorithms dp interactive ternary search
paper cutting again combinatorics probabilities
balanced subsequences combinatorics dp math
fractal origami geometry math matrices
space harbour data structures implementation math sortings
did we get everything covered? constructive algorithms dp greedy shortest paths strings
shrink-reverse binary search brute force greedy hashing implementation string suffix structures strings
count paths data structures dfs and similar dp dsu graphs trees
slimes binary search constructive algorithms data structures greedy two pointers
find b constructive algorithms greedy
monsters attack! dp greedy implementation
moving chips greedy implementation
replace on segment dp graph matchings
increasing subsequences bitmasks constructive algorithms divide and conquer greedy math
berserk monsters brute force data structures dsu implementation math
closest cities greedy implementation math
forming triangles combinatorics constructive algorithms math sortings
tricky template constructive algorithms implementation strings
mischievous shooter brute force data structures divide and conquer dp implementation
sum of progression brute force data structures dp implementation math
eat the chip brute force games greedy math
very different array data structures greedy sortings two pointers
sending messages greedy math
arranging cats greedy implementation
square greedy math
smooth sailing (hard version) binary search data structures dsu geometry graphs trees
smooth sailing (easy version) binary search brute force data structures dfs and similar dsu graphs shortest paths
counting binary strings combinatorics dp math
array repetition binary search brute force dsu implementation math
partitioning the array brute force math number theory
summation game games greedy math sortings
satisfying constraints brute force greedy math
tree diameter interactive trees
tree lgm constructive algorithms divide and conquer games trees
wine factory (hard version) data structures dp flows greedy matrices
wine factory (easy version) data structures greedy
counting prefixes combinatorics constructive algorithms dp implementation math
01 tree constructive algorithms data structures dsu greedy sortings trees
grouping increases data structures dp greedy
plus-minus split greedy
wallet exchange games math
permutation of given constructive algorithms math
caterpillar on a tree dfs and similar graphs greedy implementation sortings trees
ace5 and task order constructive algorithms divide and conquer implementation interactive probabilities sortings
blocking elements binary search data structures dp implementation two pointers
xor-distance bitmasks greedy implementation math
minimize inversions constructive algorithms data structures greedy implementation sortings
brick wall constructive algorithms greedy implementation math
construct tree bitmasks constructive algorithms dp trees
construct matrix constructive algorithms math
yet another inversions problem combinatorics data structures dp implementation math number theory
watering an array brute force greedy implementation math
erase first or second letter brute force combinatorics data structures dp strings
least product constructive algorithms math
matrix rank (hard version) combinatorics dp math matrices string suffix structures
matrix rank (easy version) brute force combinatorics dp math matrices
optimizations from chelsu divide and conquer dp number theory trees
group division constructive algorithms dfs and similar graphs greedy
happy life in university data structures dfs and similar greedy trees
mathematical problem brute force constructive algorithms geometry math
training before the olympiad constructive algorithms games greedy implementation math
two divisors constructive algorithms math number theory
2023 constructive algorithms implementation math number theory
bicycles graphs greedy implementation shortest paths sortings
greetings data structures divide and conquer sortings
romantic glasses data structures greedy math
unnatural language processing greedy implementation strings
can i square? binary search implementation
not quite latin square bitmasks brute force implementation
odd one out bitmasks implementation
light bulbs (hard version) combinatorics data structures dfs and similar dp graphs hashing
light bulbs (easy version) brute force combinatorics dfs and similar dp dsu graphs math trees
programming competition dfs and similar dp graph matchings greedy trees
game with marbles (hard version) games greedy sortings
game with marbles (easy version) brute force games greedy sortings
three activities brute force dp greedy implementation sortings
quests greedy math
preparing for the contest constructive algorithms math
problemsolving log implementation strings
palindromic problem binary search data structures hashing string suffix structures strings
matrix problem flows graphs
array collapse data structures divide and conquer dp trees
game with multiset binary search bitmasks brute force greedy
swap and delete strings
rating increase implementation
lol lovers strings
kim's quest bitmasks combinatorics dp
joy of pokémon observation
innovative washing machine geometry math two pointers
hypercatapult commute graphs
great city saint petersburg data structures
fugitive frenzy math probabilities
evaluate it and back again constructive algorithms implementation math
divisibility test math
cactus transformation constructive algorithms
blueprint for seating combinatorics divide and conquer math
accumulator apex data structures implementation sortings
two colors *special
inverse problem *special combinatorics dp
sum of digits of sums *special binary search data structures
pool records *special greedy
build railway stations *special greedy trees
maximum sum subarrays *special dp
remove and add *special greedy
poisonous swamp *special *special implementation implementation
security guard *special greedy
username *special implementation
short permutation problem combinatorics dp fft math
parallel swaps sort constructive algorithms data structures
pumping lemma hashing strings
small permutation problem (hard version) combinatorics dp math
small permutation problem (easy version) brute force combinatorics dp math
multiple lamps bitmasks brute force constructive algorithms math number theory
split plus k greedy math number theory
heavy intervals constructive algorithms data structures dsu greedy math sortings
make almost equal with mod bitmasks constructive algorithms math number theory
distinct buttons implementation math
lights brute force constructive algorithms dfs and similar graphs greedy implementation
shift and reverse greedy sortings
good triples brute force combinatorics number theory
jumping through segments binary search constructive algorithms
removal of unattractive pairs constructive algorithms greedy math strings
yetnotherrokenkeoard data structures implementation strings
rook implementation
triangle construction greedy math
palindromic parentheses constructive algorithms
deck-building game divide and conquer math
count bfs graph combinatorics dp
contingency plan 2 graph matchings
twin friends combinatorics dp
grid game 2 games number theory
maximize the value data structures sortings
merge not sort constructive algorithms dp
spaceship exploration binary search geometry
cursed game interactive
button pressing bitmasks constructive algorithms hashing
easy as abc brute force
field should not be empty brute force data structures divide and conquer
one-x combinatorics dfs and similar dp math trees
cyclic mex data structures implementation math two pointers
largest subsequence greedy strings
begginer's zelda greedy trees
constructive problems constructive algorithms math
beautiful tree data structures dfs and similar graphs implementation trees
tree queries data structures dfs and similar graphs implementation trees
set to max (hard version) constructive algorithms data structures divide and conquer greedy implementation sortings
set to max (easy version) brute force constructive algorithms greedy
array game binary search brute force data structures sortings two pointers
collecting game binary search dp greedy sortings two pointers
forked! brute force implementation
babysitting 2-sat binary search data structures graphs trees
geo game greedy interactive math
maximum and queries (hard version) bitmasks divide and conquer dp greedy
maximum and queries (easy version) binary search bitmasks brute force greedy
theofanis' nightmare constructive algorithms greedy
storage room bitmasks brute force constructive algorithms greedy
halloumi boxes brute force greedy sortings
trees and xor queries again data structures dfs and similar divide and conquer graphs implementation math trees
collapsing strings data structures strings trees
robot queries binary search data structures dp implementation
insert and equalize brute force constructive algorithms greedy math number theory
getting points binary search brute force greedy
binary imbalance constructive algorithms
landscaping binary search geometry two pointers
compressed tree dfs and similar dp graphs greedy sortings trees
yet another monster fight binary search dp greedy implementation math
add, divide and floor constructive algorithms greedy math
chip and ribbon greedy math
line trip greedy math
local deletions binary search data structures implementation
transitive graph dfs and similar dp dsu graphs implementation
small gcd bitmasks brute force dp math number theory
anji's binary tree dfs and similar dp trees
laura and operations dp math
cover in water constructive algorithms greedy implementation strings
unusual entertainment data structures dfs and similar dsu shortest paths sortings trees two pointers
alex's whims constructive algorithms graphs greedy shortest paths trees
queue sort greedy implementation sortings
yarik and musical notes hashing math number theory
yarik and array dp greedy two pointers
250 thousand tons of tnt brute force implementation number theory
game with integers games math number theory
vova escapes the matrix brute force dfs and similar divide and conquer shortest paths
sofia and strings data structures greedy sortings strings two pointers
absolute beauty greedy math
colorful grid constructive algorithms
milena and admirer greedy math
milica and string brute force implementation strings
cyclic hamming (hard version) brute force dp fft math number theory
cyclic hamming (easy version) brute force divide and conquer dp fft math number theory
pepe racing constructive algorithms implementation interactive sortings
bracket xoring constructive algorithms greedy implementation math
permutation sorting data structures sortings
ones and twos binary search data structures divide and conquer math two pointers
matching arrays binary search constructive algorithms greedy sortings
ab flipping greedy strings two pointers
jagged swaps sortings
two characters, two colors binary search data structures dp flows greedy
fancy arrays combinatorics dp math matrices
infinite card game binary search brute force data structures dfs and similar dp dsu games graphs greedy sortings two pointers
xor construction bitmasks constructive algorithms data structures math string suffix structures trees
torn lucky ticket brute force dp hashing implementation math
points and minimum distance greedy math sortings
treasure chest math
two out of three constructive algorithms
secret sport implementation strings
cacti symphony combinatorics dfs and similar dp graphs
colorful constructive constructive algorithms data structures greedy
freedom of choice brute force greedy implementation
neutral tonality constructive algorithms greedy sortings two pointers
anonymous informant brute force dfs and similar graphs implementation
a growing tree data structures dfs and similar trees
brukhovich and exams brute force greedy implementation math sortings
suspicious logarithms binary search brute force math
smilo and monsters binary search constructive algorithms greedy sortings two pointers
deja vu brute force math sortings
sorting with twos constructive algorithms sortings
qingshan loves strings constructive algorithms implementation
doremy's paint 3 constructive algorithms
doremy's average tree data structures dp greedy trees
doremy's swapping trees dfs and similar graphs trees
game of stacks brute force dfs and similar graphs implementation trees
doremy's drying plan (hard version) data structures dp
doremy's drying plan (easy version) brute force data structures dp greedy sortings
doremy's connecting plan constructive algorithms greedy math sortings
qingshan loves strings 2 constructive algorithms greedy implementation
minimum segments constructive algorithms
good colorings binary search constructive algorithms graphs interactive
split binary search data structures divide and conquer dsu math trees two pointers
minimum array binary search brute force constructive algorithms data structures greedy hashing two pointers
time travel binary search graphs shortest paths
diamond theft data structures greedy
i wanna be the team leader bitmasks constructive algorithms dp greedy math sortings two pointers
monocarp and the set combinatorics data structures math
decreasing string implementation strings
fear of the dark binary search geometry math
sum of three brute force constructive algorithms math
deterministic scheduling for extended reality over 5g and beyond *special
hard design greedy implementation math
counting rhyme dp math number theory
medium design brute force data structures dp greedy sortings
haunted house binary search greedy math two pointers
simple design brute force greedy math
dances (hard version) binary search greedy sortings two pointers
dances (easy version) binary search greedy two pointers
you are so beautiful data structures
look back bitmasks greedy
in love data structures greedy
raspberries dp math
chemistry strings
morning math
two permutations (hard version) constructive algorithms
two permutations (easy version) brute force constructive algorithms greedy number theory
tree xor bitmasks dfs and similar dp greedy trees
card game brute force greedy
sets and union bitmasks brute force constructive algorithms greedy
increasing sequence greedy
anya and the mysterious string binary search data structures
minimum maximum distance dfs and similar dp graphs shortest paths trees
block sequence dp
divide and equalize math number theory
perfect square brute force implementation
three threadlets math
don't try to count brute force strings
last man standing brute force data structures number theory
interactive game with coloring brute force constructive algorithms dfs and similar graphs implementation interactive trees
sum of xor functions bitmasks combinatorics divide and conquer dp math
make it alternating combinatorics dp greedy
chips on the board constructive algorithms greedy
rigged! greedy
wxhtzdy oro tree binary search bitmasks brute force data structures dfs and similar implementation trees
vasilije loves number theory brute force math number theory
iva & pav binary search bitmasks data structures greedy
reverse madness data structures greedy
vasilije in cacak math
aleksa and stack constructive algorithms math
how much does daytona cost? greedy
joyboard math number theory
goals of victory math
clubstep binary search brute force data structures greedy trees
indefinite clownfish binary search graphs
ball-stackable constructive algorithms data structures dp trees
lexichromatography combinatorics dfs and similar dsu graphs two pointers
autosynthesis constructive algorithms dfs and similar graphs greedy sortings
effects of anti pimples combinatorics number theory sortings
helmets in night light greedy sortings
jellyfish and mex dp
jellyfish and green apple bitmasks greedy math number theory
jellyfish and undertale brute force greedy
jellyfish and inscryption dp
jellyfish and oeis dp
jellyfish and hack dp math
jellyfish and miku divide and conquer dp math probabilities
jellyfish and eva dp graphs greedy math probabilities
jellyfish and math bitmasks brute force dfs and similar dp graphs shortest paths
jellyfish and game brute force games greedy implementation
mad city dfs and similar dsu games graphs shortest paths trees
abbc or bacb constructive algorithms greedy
money trees binary search greedy math two pointers
building an aquarium binary search sortings
1d eraser greedy implementation two pointers
target practice implementation math
good kid brute force greedy math
short sort brute force implementation
replace with product brute force greedy math
selling a menagerie dfs and similar dsu graphs implementation math
data structures fan binary search bitmasks data structures dp
plus minus permutation math
non-coprime split math number theory
the corridor or there and back again greedy implementation
two vessels brute force greedy math
standard graph problem data structures graphs greedy trees
mexanization data structures
lazy numbers binary search math
another mex problem bitmasks brute force dp shortest paths
prefix purchase greedy implementation sortings
colorful table binary search data structures dp implementation math two pointers
friendly arrays bitmasks greedy math
mexanized array constructive algorithms greedy math
2d traveling geometry math shortest paths sortings
make it zero constructive algorithms
lis? data structures greedy implementation
min-sum-max constructive algorithms dp greedy
flower-like pseudotree constructive algorithms graphs greedy implementation trees
travel plan combinatorics dp implementation math trees
candy party (hard version) bitmasks constructive algorithms dp greedy implementation math
candy party (easy version) bitmasks constructive algorithms graphs greedy implementation math
fill in the matrix constructive algorithms implementation
most different tree brute force constructive algorithms dfs and similar greedy hashing
salyg1n and array (hard version) constructive algorithms interactive
salyg1n and array (simple version) constructive algorithms interactive math
cyclic operations brute force constructive algorithms dfs and similar graphs greedy implementation
salyg1n and the mex game constructive algorithms data structures games greedy interactive
xor palindromes bitmasks constructive algorithms strings
green_gold_dog, array and permutation constructive algorithms sortings
mighty rock tower brute force combinatorics dp math probabilities
lihmuf balling binary search brute force math
keen tree calculation binary search data structures dp geometry graphs implementation trees
jackets and packets dp
imagination castle dp games two pointers
happy sets combinatorics
grouped carriages binary search data structures dp flows greedy
freak joker process binary search data structures sortings
elevators of tamem dp
digital wallet dp greedy
completely searching for inversions dfs and similar dp graphs
battling with numbers combinatorics math number theory
ambitious kid math
future dominators graphs greedy
asterism stream dp math matrices
magic square combinatorics constructive algorithms implementation
exotic queries data structures implementation sortings
guess game bitmasks data structures games math probabilities sortings strings trees
matrix cascade brute force constructive algorithms data structures dp greedy math
divisor chain bitmasks constructive algorithms math number theory
swap and reverse constructive algorithms greedy sortings strings
increasing and decreasing constructive algorithms greedy implementation math
redundant routes constructive algorithms dp trees
goldberg machine 3 dp trees
swaps combinatorics dp graphs math
divide, xor, and conquer bitmasks dp math
speedrun brute force dfs and similar dp graphs greedy math sortings two pointers
two-colored dominoes constructive algorithms greedy
mex repetition implementation math
split sort greedy math sortings
channel greedy implementation
the great equalizer binary search data structures math sortings
magic will save the world binary search bitmasks brute force dp
kolya and movie theatre constructive algorithms data structures greedy
ice cream balls binary search combinatorics constructive algorithms math
flower city fence binary search data structures implementation sortings
sequence game constructive algorithms
gift carpet dp greedy implementation strings
four suits binary search bitmasks flows greedy
non-intersecting subpermutations combinatorics dp implementation math
sorting by multiplication dp greedy
queries for the array data structures dfs and similar implementation strings trees
two binary strings constructive algorithms dp greedy
prime deletion constructive algorithms math
evaluate rbs data structures geometry implementation math sortings
fast travel text editor data structures dfs and similar graphs shortest paths
balanced string dp
game on permutation data structures dp games greedy
fancy coins binary search brute force greedy math
not a substring constructive algorithms strings
teleportation in byteland data structures dfs and similar divide and conquer graphs shortest paths trees
maximum monogonosity brute force dp math
andrey and escape from capygrad binary search data structures dp dsu greedy sortings
another permutation problem brute force dp greedy math
olya and game with arrays constructive algorithms greedy math sortings
united we stand constructive algorithms math number theory
rollbacks (hard version) data structures interactive trees
rollbacks (easy version) brute force data structures dfs and similar trees
trees and segments brute force data structures dp greedy two pointers
yet another permutation problem constructive algorithms greedy math number theory
the walkway brute force dp greedy math number theory
buttons games greedy math
counting graphs combinatorics divide and conquer dsu graphs greedy sortings trees
sum and product binary search data structures math
power of points math sortings
strong vertices math sortings trees
assembly via minimums greedy sortings
maximum rounding greedy implementation math
array coloring greedy math
permutree (hard version) bitmasks dfs and similar dp fft greedy implementation math trees
permutree (easy version) dfs and similar dp trees
more wrong divide and conquer interactive
to become max binary search brute force data structures dp
good arrays implementation math
tales of a sort implementation
longest divisors interval brute force combinatorics greedy math number theory
dalton the teacher greedy math
mark and spaceship brute force dp
game bundles brute force constructive algorithms dp greedy math
michael and hotel binary search interactive trees
expected destruction combinatorics dp math probabilities
earn or unlock bitmasks brute force dp
dual (hard version) constructive algorithms math
dual (easy version) constructive algorithms math
fibonaccharsis binary search brute force math
desorting brute force greedy math
panda meetups data structures dp flows
rivalries constructive algorithms data structures greedy
miriany and matchstick constructive algorithms dp greedy
ina of the mountain data structures dp greedy math
imbalanced arrays constructive algorithms graphs greedy math sortings two pointers
ntarsis' set binary search math number theory
vlad and the mountains binary search data structures dsu graphs implementation sortings trees two pointers
lisa and the martians bitmasks greedy math strings trees
nastya and potions dfs and similar dp graphs sortings
prefix permutation sums implementation math
tiles comeback greedy
parity sort greedy sortings two pointers
escalator conversations brute force constructive algorithms math
the third letter dfs and similar dsu graphs greedy implementation
the morning star combinatorics data structures geometry implementation math sortings
we were both children brute force implementation math number theory
cardboard for pictures binary search geometry implementation math
balanced round brute force greedy implementation sortings
word on the paper implementation strings
ten words of wisdom implementation sortings
to my critics implementation sortings
xor partition binary search bitmasks data structures divide and conquer greedy trees
max to the right of min binary search data structures divide and conquer dp dsu two pointers
array painting constructive algorithms greedy two pointers
binary string copying binary search brute force data structures hashing strings
monsters greedy math sortings
morning sandwich implementation math
vika and wiki binary search bitmasks combinatorics divide and conquer dp math
vika and stone skipping brute force implementation math number theory
vika and bonuses binary search brute force math ternary search
vika and price tags math number theory
vika and the bridge binary search data structures greedy implementation math sortings
vika and her friends games math
the boss's identity binary search bitmasks data structures dfs and similar greedy math sortings
triangle platinum? brute force combinatorics implementation interactive math probabilities
professor higashikata data structures dsu greedy implementation strings
vampiric powers, anyone? bitmasks brute force dp greedy
hamon odyssey bitmasks greedy two pointers
the man who became a god greedy sortings
rudolf and codevid-23 bitmasks dp graphs greedy shortest paths
rudolph and mimic constructive algorithms implementation interactive
rudolf and snowflakes (hard version) binary search brute force implementation math
rudolf and snowflakes (simple version) brute force implementation math
rudolph and christmas tree constructive algorithms geometry math
rudolf and the another competition constructive algorithms data structures dp greedy sortings
rudolph and tic-tac-toe brute force implementation strings
rudolph and cut the rope implementation math
swimmers in the pool dp fft math number theory
boxes and balls dp implementation math
rating system binary search brute force data structures dp dsu greedy math two pointers
strong password binary search dp greedy strings
come together geometry implementation math
forbidden integer constructive algorithms implementation math number theory
multiple of three cycles combinatorics data structures dp dsu math
tree weights bitmasks constructive algorithms data structures dfs and similar implementation math matrices number theory trees
min cost permutation (hard version) binary search constructive algorithms data structures greedy math sortings
min cost permutation (easy version) brute force constructive algorithms greedy math
great grids 2-sat constructive algorithms dfs and similar dsu graphs
row major constructive algorithms greedy math number theory strings
particles dp greedy implementation math
permutations & primes constructive algorithms math
subtraction game constructive algorithms games
omsk metro (hard version) data structures dfs and similar divide and conquer dp math trees
omsk metro (simple version) data structures dfs and similar dp graphs greedy math trees
tracking segments binary search brute force data structures two pointers
apple tree combinatorics dfs and similar dp math trees
sum in binary tree bitmasks combinatorics math trees
long long greedy math two pointers
sasha and array coloring greedy sortings two pointers
tenzing and necklace divide and conquer dp greedy
tenzing and random real numbers bitmasks dp graphs math probabilities
tenzing and random operations combinatorics dp math probabilities
tenzing and tree dfs and similar greedy shortest paths sortings trees
tenzing and triangle data structures dp geometry greedy math
tenzing and his animal friends constructive algorithms graphs greedy
tenzing and balls dp
tenzing and books bitmasks greedy math
tenzing and tsondu games math
monocarp and a strategic game geometry sortings two pointers
fill the matrix data structures greedy math
pairs of segments data structures greedy sortings two pointers
ranom numbers brute force dp greedy math strings
keep it beautiful implementation
game with board constructive algorithms games
in search of truth (hard version) constructive algorithms interactive math meet-in-the-middle probabilities
in search of truth (easy version) constructive algorithms interactive math meet-in-the-middle probabilities
railguns brute force dfs and similar dp graphs
character blocking data structures hashing implementation
wooden toy festival binary search greedy sortings
ski resort combinatorics math two pointers
binary cafe bitmasks combinatorics math
cipher shifer implementation strings two pointers
decreasing game constructive algorithms dfs and similar dp greedy interactive
ball sorting data structures dp sortings
insert zero and invert prefix constructive algorithms
lamps greedy sortings
the good array greedy implementation math
stuck conveyor binary search constructive algorithms interactive
count supersequences combinatorics dp math
bracket walk data structures greedy strings
no prime differences constructive algorithms math number theory
minimize permutation subarrays constructive algorithms math
blackboard list constructive algorithms math
editorial for two binary search data structures greedy implementation
playoff fixing combinatorics trees
bracket coloring constructive algorithms greedy
best binary string constructive algorithms greedy
comparison string greedy
grasshopper on a line constructive algorithms math
astrophysicists greedy math
destroyer implementation sortings
good graph bitmasks dfs and similar graph matchings graphs implementation
old mobile combinatorics dp probabilities
doctor's brown hypothesis dfs and similar graphs math number theory
twin clusters bitmasks brute force constructive algorithms math probabilities
lottery binary search brute force greedy math two pointers
k-th equality brute force implementation math
typewriter brute force math
mex of lcm binary search data structures implementation math number theory
survey in class brute force data structures greedy implementation sortings
game with reversing games greedy math strings
maximum strength greedy math
unit array greedy math
ksyusha and chinchilla constructive algorithms dfs and similar dp dsu greedy implementation trees
ira and flamenco combinatorics constructive algorithms data structures implementation math sortings two pointers
round dance dfs and similar dsu graphs shortest paths
flipper brute force constructive algorithms greedy
vlad building beautiful array greedy math
restore the weather greedy sortings
musical puzzle implementation strings
zombies binary search dp
combinatorics problem brute force combinatorics dp
red-blue operations (hard version) binary search constructive algorithms greedy implementation math
red-blue operations (easy version) binary search greedy implementation math
contrast value greedy implementation
maximum sum brute force sortings two pointers
new palindrome strings
array merging constructive algorithms greedy
twin permutations constructive algorithms
the third grace data structures dp
bully sort data structures math
mex tree brute force dp trees
hyperregular bracket strings combinatorics greedy hashing math number theory sortings
the boss can count pairs brute force math
copil copac draws trees dfs and similar dp graphs trees
don't blame me bitmasks combinatorics dp math
hits different data structures dp implementation math
forever winter dfs and similar graphs math
the lakes dfs and similar dsu graphs implementation
gold rush brute force dfs and similar dp implementation
mr. perfectly fine bitmasks greedy implementation
blank space implementation
love story implementation strings
permutation swap math number theory
divisible array constructive algorithms math
copium permutation constructive algorithms data structures greedy
bus routes binary search constructive algorithms dfs and similar greedy trees
two centroids data structures dfs and similar greedy trees
palindrome partition binary search brute force data structures dp hashing strings
range sorting (hard version) binary search data structures dp greedy
range sorting (easy version) binary search dp dsu greedy trees two pointers
counting orders combinatorics math sortings two pointers
fading into fog geometry interactive math probabilities
walk the runway bitmasks brute force data structures dp graphs implementation sortings
running miles brute force dp greedy
dreaming of freedom greedy math number theory
lunatic never content math number theory
trust nobody brute force greedy implementation sortings
luotianyi and the table greedy math
luotianyi and the palindrome string greedy strings
luotianyi and cartridge data structures trees
luotianyi and the function data structures
luotianyi and xor-tree data structures dfs and similar dp dsu greedy trees
luotianyi and the floating islands (hard version) combinatorics dfs and similar math probabilities trees
luotianyi and the floating islands (easy version) combinatorics math probabilities trees
luotianyi and the show greedy implementation
random walk dp graphs math probabilities trees
removing graph brute force dp games graphs math
unique palindromes constructive algorithms math strings
strongly composite greedy math number theory
sort with step brute force math sortings
a-characteristic combinatorics constructive algorithms math
magic triples (hard version) brute force data structures math number theory
magic triples (easy version) brute force data structures math number theory
gardening friends brute force dfs and similar dp graphs trees
making anti-palindromes greedy math strings
super-permutation constructive algorithms math
bun lover math
karina and array greedy math sortings
tubetube feed brute force implementation
timber combinatorics dp fft math
rearrange brackets brute force dp greedy sortings strings
black cells binary search brute force greedy math
tear it apart brute force implementation math strings
sort the subarray brute force greedy
matching combinatorics math
jojo's incredible adventures math strings two pointers
yura's new name implementation strings
willy-nilly, crack, into release! data structures dp
roads in e city interactive math probabilities trees
misha and apples brute force data structures dp two pointers
the fox and the complete tree traversal constructive algorithms dp implementation math trees
the butcher geometry greedy implementation sortings two pointers
constructive problem brute force greedy
indivisible constructive algorithms
politics greedy implementation
entangled substrings string suffix structures strings
half-sum brute force divide and conquer greedy
toy machine constructive algorithms games implementation
similar polynomials combinatorics math
fish graph brute force constructive algorithms dfs and similar graphs
almost increasing subsequence binary search data structures greedy
grid reconstruction constructive algorithms greedy
ian visits mary constructive algorithms geometry number theory
oh no1 (-2-3-4) constructive algorithms graphs math
bosco and particle dp math number theory strings
xor counting bitmasks combinatorics dp math
between constructive algorithms dfs and similar graphs greedy
sum graph brute force constructive algorithms graphs implementation interactive shortest paths trees
ian and array sorting greedy math
communication towers brute force divide and conquer dsu
chain chips data structures dp matrices
balancing weapons binary search brute force data structures math two pointers
search in parallel constructive algorithms greedy sortings
long legs brute force math
coins implementation math
unmysterious language *special constructive algorithms strings
mountain climber *special
expected twist *special interactive
colour vision *special implementation
factorization *special number theory
not a geometry problem *special *special constructive algorithms geometry math
trivial conjecture *special constructive algorithms math number theory
digits *special
was it rated? *special *special *special brute force implementation
are you a robot? *special *special *special expression parsing strings
vlad and the nice paths (hard version) binary search combinatorics data structures dp math two pointers
vlad and the nice paths (easy version) combinatorics dp math
is it flower? dfs and similar graphs implementation
living sequence binary search dp math number theory
umka and a long flight constructive algorithms implementation math
restore the array constructive algorithms greedy
conveyor belts implementation math
insert digit greedy math strings
last number combinatorics math
the maximum prefix dp
m-tree data structures math sortings trees
monsters brute force data structures dfs and similar dsu graphs greedy
climbing the tree binary search math
make it permutation brute force greedy sortings
candies constructive algorithms math number theory
beautiful sequence brute force greedy
prediction combinatorics dp math
traveling in berland binary search data structures graphs greedy implementation
two tanks binary search dp implementation math
binary string sorting constructive algorithms greedy
sum on subarrays constructive algorithms greedy math
points on plane binary search greedy math
garland implementation
minibuses on venus (hard version) brute force combinatorics dp math
minibuses on venus (medium version) combinatorics divide and conquer dp matrices
minibuses on venus (easy version) combinatorics divide and conquer dp
petya, petya, petr, and palindromes binary search brute force data structures two pointers
unlucky numbers brute force dp greedy implementation
playing in a casino math sortings
lucky numbers brute force implementation
subsequence addition (hard version) bitmasks dp greedy implementation sortings
subsequence addition (easy version) brute force data structures dp greedy implementation sortings
bouncy ball brute force dfs and similar implementation
interview binary search implementation interactive
odd queries data structures implementation
find and replace greedy implementation strings
grab the candies greedy
plus or minus implementation
gcd master (hard version) greedy math sortings
gcd master (easy version) greedy math number theory sortings
tree master brute force data structures dfs and similar trees
dsu master combinatorics dp dsu math
sequence master brute force constructive algorithms math
mex master constructive algorithms greedy
walking master geometry greedy math
survival of the weakest (hard version) greedy math sortings two pointers
survival of the weakest (easy version) binary search brute force implementation math sortings
there should be a lot of maximums brute force data structures dfs and similar dp trees two pointers
a wide, wide graph dfs and similar dp graphs greedy trees
place for a selfie binary search data structures geometry math
the string has a target greedy strings
we need the zero bitmasks brute force
code lock bitmasks dp
flow control data structures dsu implementation
approximate diameter binary search divide and conquer graphs shortest paths
routing bitmasks brute force dfs and similar dp graphs
accommodation brute force dp greedy implementation
pull your luck brute force greedy math number theory
vaccination greedy implementation
lame king greedy math
settlement of guinea pigs greedy implementation math
likes greedy implementation
a task for substrings data structures string suffix structures strings
another n-dimensional chocolate bar dp math meet-in-the-middle number theory
gasoline prices data structures divide and conquer dsu hashing trees
the way home binary search data structures dp graphs greedy shortest paths sortings
music festival binary search data structures dp greedy sortings
buying gifts data structures greedy sortings
the very beautiful blanket bitmasks constructive algorithms
symmetree dfs and similar hashing implementation trees
dasha and nightmares bitmasks hashing meet-in-the-middle strings
unforgivable curse (hard version) brute force constructive algorithms dfs and similar dsu graphs greedy strings
unforgivable curse (easy version) brute force constructive algorithms dsu graphs greedy strings
remove two letters data structures greedy hashing strings
powering the hero (hard version) data structures greedy
powering the hero (easy version) data structures greedy
count the number of pairs greedy strings
is it a cat? implementation strings
tree cutting bitmasks dfs and similar dp
count voting combinatorics dp math
halve or subtract binary search brute force dp greedy sortings
city union constructive algorithms dfs and similar dsu geometry greedy implementation math
hot start up (hard version) data structures dp
hot start up (easy version) dp
double lexicographically minimum greedy strings
equalize by divide brute force constructive algorithms greedy math
recent actions data structures greedy implementation math
gifts from grandfather ahmed dp math number theory
multitest generator brute force dp
shocking arrangement constructive algorithms greedy math
candy store greedy math number theory
three sevens brute force data structures greedy implementation
showstopper greedy implementation sortings
li hua and path data structures dfs and similar divide and conquer dsu trees
li hua and array brute force data structures dsu math number theory two pointers
li hua and tree brute force data structures dfs and similar dp implementation trees
li hua and chess constructive algorithms greedy interactive
li hua and pattern constructive algorithms greedy
li hua and maze constructive algorithms flows graphs greedy implementation
strange triples brute force math number theory
colored subgraphs dfs and similar dp games greedy trees
maximum subarray data structures dp greedy two pointers
maximum set binary search math
asterisk-minor template implementation strings
typical interview problem brute force implementation strings
removal sequences bitmasks dfs and similar graphs
blocking chips binary search constructive algorithms dfs and similar greedy trees
explosions? binary search data structures dp greedy math
triangle coloring combinatorics math
tea tasting binary search data structures implementation
ideal point brute force geometry greedy
two towers brute force implementation strings
labeling the tree with distances data structures dp greedy hashing implementation trees
counting factorizations combinatorics divide and conquer dp math number theory
scoring subsequences binary search greedy math two pointers
not dividing constructive algorithms greedy math
prefix and suffix array strings
rebrending brute force data structures divide and conquer implementation
velepin and marketing binary search data structures dp greedy sortings two pointers
moscow gorillas binary search dp greedy implementation math two pointers
dora and search constructive algorithms data structures two pointers
fedya and array constructive algorithms math
yet another promotion greedy math
graph coloring (hard version) brute force combinatorics divide and conquer dp fft graphs
graph coloring (easy version) combinatorics dp graphs
divisors and table brute force dfs and similar dp number theory
fixed prefix permutations binary search bitmasks data structures hashing math sortings
min max sort binary search brute force greedy math two pointers
stand-up comedian greedy math
gamingforces greedy sortings
teleporters (hard version) binary search greedy sortings
teleporters (easy version) greedy sortings
range update point query binary search brute force data structures
negatives and positives dp greedy sortings
distinct split brute force greedy strings
prepend and append implementation two pointers
following directions geometry implementation
codeforces checking implementation strings
tokens on graph constructive algorithms dfs and similar graphs shortest paths
timofey and black-white tree brute force dfs and similar divide and conquer graphs greedy math shortest paths trees
vlad and a pair of numbers bitmasks constructive algorithms
matryoshkas data structures greedy sortings
premutation brute force implementation math
taisia and dice greedy greedy math
polycarp and the day of pi implementation math strings
serval and brain power bitmasks brute force dp greedy implementation strings
serval and music game brute force dp implementation math number theory
serval and shift-shift-shift bitmasks brute force constructive algorithms implementation
serval and toxel's arrays combinatorics dp implementation math
serval and inversion magic brute force implementation strings two pointers
serval and mocha's array brute force math number theory
xor, tree, and queries bitmasks constructive algorithms dfs and similar dsu graphs greedy implementation trees
sum over zero data structures dfs and similar dp
moving dots binary search brute force combinatorics math two pointers
matching numbers constructive algorithms greedy math
sum of two numbers constructive algorithms greedy implementation math probabilities
one and two brute force implementation math
treasure hunt data structures divide and conquer two pointers
codeforces scoreboard binary search data structures dp geometry
colorful tree again brute force data structures trees
inverse transformation constructive algorithms implementation math
the harmonization of xor bitmasks constructive algorithms greedy math
game on axis combinatorics dfs and similar dsu graphs implementation
remove the bracket dp greedy math
number factorization greedy math number theory
exponential equation constructive algorithms math
cake assembly line brute force sortings
alternating deck (hard version) implementation
non-alternating deck (easy version) implementation
minimums or medians
infinite game brute force combinatorics dp games probabilities
wooden spoon combinatorics dp
monsters (hard version) data structures greedy
letter exchange constructive algorithms
monsters (easy version) brute force greedy
weighed tree radius data structures divide and conquer implementation trees
double sort ii dfs and similar flows graph matchings graphs
game of the year brute force data structures math number theory
different arrays brute force dp implementation
yet another tournament binary search greedy sortings
matrix of differences constructive algorithms math
make it beautiful constructive algorithms math sortings
window signals (hard version)
window signals (easy version)
diverse coloring constructive algorithms trees
bracket insertion combinatorics dp math trees
rectangle shrinking binary search brute force data structures greedy implementation two pointers
many perfect squares brute force math number theory
equal frequencies brute force constructive algorithms greedy implementation sortings strings
going to the cinema brute force greedy sortings
parallel projection geometry math
delicious dessert binary search dsu hashing math number theory string suffix structures
three chairs bitmasks brute force combinatorics data structures dp number theory sortings
josuke and complete graph binary search brute force data structures math number theory
bit guessing game binary search bitmasks constructive algorithms interactive
gcd partition brute force greedy math number theory
hayato and school constructive algorithms greedy
olympic team building brute force meet-in-the-middle
the game of the century constructive algorithms graphs shortest paths
xorcerer's stones bitmasks constructive algorithms dp trees
anya's simultaneous exhibition constructive algorithms graphs greedy interactive sortings
boris and his amazing haircut constructive algorithms data structures dp dsu greedy sortings
least prefix sum data structures greedy
mknez's constructiveforces task constructive algorithms math
hall of fame constructive algorithms greedy strings
maximizing root dfs and similar dp graphs math number theory trees
the tree has fallen! bitmasks dfs and similar math trees
flexible string revisit combinatorics dp math probabilities
flexible string bitmasks brute force strings
the forbidden permutation greedy math
flip flop sum greedy implementation
comfortably numb bitmasks data structures divide and conquer strings trees
edge reverse binary search dfs and similar graphs trees
score of a tree bitmasks combinatorics dfs and similar dp math probabilities trees
quiz master binary search math number theory sortings two pointers
emordnilap combinatorics greedy math
everybody likes good arrays! greedy math
count permutations math
parmigiana with seafood binary search dp greedy trees
controllers binary search math
uniform chemistry dp math
italian data centers graphs shortest paths
spinach pizza games geometry greedy interactive
beppa and swerchat two pointers
another wine tasting event combinatorics constructive algorithms math strings
train splitting constructive algorithms graphs greedy
crossing the railways data structures dp
teamwork constructive algorithms greedy math
library game games greedy interactive sortings
vittorio plays with lego bricks dp geometry
walking boy greedy
laboratory on pluto constructive algorithms dp greedy math
the human equation greedy implementation
friendly spiders dfs and similar graphs math number theory shortest paths
interesting sequence bitmasks math
gardener and the array bitmasks constructive algorithms
gardener and the capybaras (hard version) constructive algorithms greedy
gardener and the capybaras (easy version) brute force constructive algorithms implementation
maximum permutation constructive algorithms
segment covering brute force combinatorics constructive algorithms data structures dp trees
magician and pigs (hard version) binary search brute force data structures implementation
magician and pigs (easy version) brute force data structures implementation
two chess pieces dfs and similar dp greedy trees
same count one brute force constructive algorithms greedy implementation two pointers
ice and fire constructive algorithms dp greedy
coloring constructive algorithms greedy math
add plus minus sign constructive algorithms math
lisa's sequences dp
king's puzzle constructive algorithms
jumbled trees constructive algorithms math
interactive factorial guessing brute force games implementation interactive
hot and cold binary search interactive
game of questions bitmasks combinatorics dp fft math probabilities
football constructive algorithms
easy assembly greedy sortings
dominoes combinatorics flows graph matchings greedy
cactus meets torus
bincoin binary search divide and conquer hashing implementation probabilities trees
amazing trick constructive algorithms graph matchings math probabilities
gaining rating binary search greedy implementation math sortings two pointers
copy of a copy of a copy constructive algorithms dfs and similar graphs implementation sortings
permutation game games
absolute sorting constructive algorithms math
different differences constructive algorithms greedy math
matrix rotation brute force implementation
a+b? implementation
hossam and range minimum query binary search bitmasks data structures hashing probabilities strings trees
hossam and a letter brute force dp implementation two pointers
hossam and (sub-)palindromic tree brute force data structures dfs and similar dp strings trees
hossam and trainees greedy math number theory
hossam and friends binary search constructive algorithms dp two pointers
hossam and combinatorics combinatorics math sortings
koxia, mahiru and winter festival constructive algorithms
koxia and bracket divide and conquer fft math
koxia and sequence bitmasks combinatorics dp math number theory
koxia and tree combinatorics dfs and similar dp dsu math probabilities trees
koxia and game constructive algorithms data structures dfs and similar dsu flows games graph matchings graphs implementation
koxia and number theory brute force chinese remainder theorem math number theory
koxia and permutation constructive algorithms
koxia and whiteboards brute force greedy
игра в девятку iii *special brute force
игра в девятку ii *special brute force
игра в девятку i *special brute force dp
подкрутка ii *special dp
подкрутка i *special brute force dp greedy
копирование файлов ii *special binary search brute force math
копирование файлов i *special brute force implementation math
узкая дорога *special math
wonderful jump dp greedy
partial sorting combinatorics math number theory
lucky permutation constructive algorithms dfs and similar graphs greedy
elemental decompress constructive algorithms greedy implementation sortings
quick sort greedy math
greatest convex greedy math number theory
two subtrees data structures trees
algebra flash bitmasks brute force dp graphs math meet-in-the-middle trees
playoff combinatorics constructive algorithms dp greedy math
count binary strings data structures dp
block towers data structures greedy sortings
cut the triangle implementation
mcf flows
decomposition binary search brute force data structures divide and conquer dp two pointers
lucky chains math number theory
hamiltonian wall dp implementation
notepad# implementation
extremely round brute force implementation
number reduction greedy
minimum lcm math number theory
project manager brute force data structures implementation
torus path greedy math
hero to zero graph matchings math
infinite chess implementation shortest paths
hospital queue binary search graphs greedy implementation
guess the string constructive algorithms interactive probabilities
chemistry lab dp geometry probabilities
exchange brute force math
watch the videos binary search constructive algorithms two pointers
card guessing combinatorics dp probabilities
broken keyboard greedy
access levels bitmasks dsu flows graph matchings
doremy's paint 2 data structures
doremy's perfect ds class (hard version) binary search interactive
doremy's perfect ds class (medium version) binary search interactive
doremy's perfect ds class (easy version) binary search interactive
doremy's experimental tree brute force constructive algorithms dfs and similar dsu sortings trees
doremy's number line dp greedy sortings
doremy's pegging game combinatorics dp math
doremy's city construction graphs greedy
doremy's perfect math class math number theory
doremy's paint greedy
edge queries data structures dfs and similar dp dsu graphs trees
node pairs dp graphs math number theory
valid bitonic permutations combinatorics dp implementation math number theory
another array problem brute force constructive algorithms greedy
incinerate binary search brute force data structures implementation math sortings
absolute maximization bitmasks constructive algorithms greedy math
unequal adjacent elements constructive algorithms sortings
good pairs binary search data structures dp
tree sum combinatorics math trees
gcd queries constructive algorithms interactive number theory
binary strings are fun combinatorics math
make array good constructive algorithms implementation number theory sortings
divide and conquer greedy math number theory
centroid guess interactive probabilities trees
anti-median (hard version) combinatorics dp math
anti-median (easy version) dp math
make it connected binary search brute force constructive algorithms dsu graphs greedy matrices trees two pointers
carry bit combinatorics math
set construction constructive algorithms dfs and similar graphs greedy
elimination of a ring constructive algorithms greedy implementation
two permutations brute force constructive algorithms
slavicg's favorite problem bitmasks dfs and similar graphs
quests binary search greedy sortings
binary inversions data structures greedy math
challenging valleys implementation two pointers
advantage data structures implementation sortings
atilla's favorite problem greedy implementation strings
medium number implementation sortings
restore the permutation binary search constructive algorithms data structures greedy math
all possible digits binary search data structures greedy math number theory
the humanoid brute force dp sortings
make it round brute force number theory
thermostat greedy math shortest paths
lost permutation math
yes-yes? implementation strings
decent division constructive algorithms data structures
tick, tock combinatorics dfs and similar dsu graphs
range = √sum binary search brute force constructive algorithms math two pointers
almost all multiples greedy number theory
xor = average constructive algorithms
sseeeeiinngg ddoouubbllee constructive algorithms strings
kevin and permutation constructive algorithms greedy math
technical support greedy
minecraft series brute force two pointers
n machines binary search brute force greedy
the beach constructive algorithms dfs and similar graphs shortest paths
wish i knew how to sort dp math probabilities
factorial divisibility math number theory
make nonzero sum (hard version) constructive algorithms dp greedy
make nonzero sum (easy version) constructive algorithms dp greedy
binarystringforces constructive algorithms data structures dp
doping combinatorics dp math
majority combinatorics dp math strings
bracket cost binary search data structures divide and conquer dp greedy strings
count gcd combinatorics math number theory
complementary xor constructive algorithms implementation
maximum substring brute force greedy implementation
indirect sort constructive algorithms implementation math
distance to the path data structures dfs and similar trees
cactus wall constructive algorithms dfs and similar graphs shortest paths
counting arrays combinatorics dp math number theory
number game binary search data structures games greedy implementation
death's blessing greedy
cowardly rooks greedy implementation
circular xor reversal bitmasks constructive algorithms
yet another array counting problem binary search data structures divide and conquer dp flows math trees
constructor bitmasks chinese remainder theorem combinatorics constructive algorithms math number theory
zero-sum prefixes brute force data structures dp greedy implementation
diverse substrings brute force implementation strings
the ultimate square math
list generation combinatorics dp math
yet another problem binary search bitmasks constructive algorithms data structures
swap game games
ban ban constructive algorithms
two groups constructive algorithms greedy
olympiad training binary search data structures dp flows geometry implementation sortings
kazaee data structures hashing probabilities
joking (hard version) dp interactive
joking (easy version) binary search constructive algorithms interactive ternary search
paths on the tree dfs and similar dp greedy sortings trees
permutation operations constructive algorithms greedy implementation math
rebellion constructive algorithms greedy two pointers
maxmina constructive algorithms greedy
mex vs med math two pointers
divisible numbers (hard version) brute force math number theory
divisible numbers (easy version) brute force math number theory
divisibility by 2^n greedy math sortings
traffic light binary search implementation two pointers
even-odd increments implementation math
number replacement greedy implementation
antifibonacci cut bitmasks combinatorics constructive algorithms data structures dp hashing math
intersection and union data structures dp matrices probabilities
ftl binary search dp
problem with random tests brute force dp greedy probabilities
save the magazines constructive algorithms dp greedy
permutation value constructive algorithms greedy
password brute force combinatorics implementation math
orray bitmasks brute force greedy math sortings
smaller constructive algorithms greedy strings
scuza binary search greedy math
coprime brute force greedy number theory
stripes implementation
increasing greedy implementation sortings
sum implementation
kirill and company bitmasks brute force dfs and similar dp flows graphs shortest paths
multi-colored segments binary search data structures math sortings
sending a sequence over the network dp
masha and a beautiful tree dfs and similar divide and conquer graphs sortings trees
minimize the thickness brute force greedy math two pointers
funny permutation constructive algorithms math
compare t-shirt sizes implementation implementation strings
arranging crystal balls data structures divide and conquer divide and conquer dp geometry graphs number theory
mex tree manipulation data structures trees
dangerous laser power constructive algorithms dsu sortings
conditional mix combinatorics dp math
hanging hearts constructive algorithms data structures dfs and similar dp greedy trees
knowledge cards constructive algorithms data structures
bricks and bags constructive algorithms games greedy sortings
jumbo extra cheese 2 geometry greedy sortings
factorise n+m constructive algorithms number theory
keyboard design bitmasks data structures dp string suffix structures strings
cleaning robot bitmasks dp
reset k edges binary search data structures dfs and similar graphs greedy trees
card game combinatorics constructive algorithms dp games
array recovery constructive algorithms greedy math
immobile knight implementation
palindrome addicts data structures strings
anti-increasing addicts constructive algorithms dp greedy math
connectivity addicts constructive algorithms dsu graphs greedy interactive shortest paths trees
balance addicts combinatorics dp math two pointers
permutation addicts constructive algorithms data structures dfs and similar dsu graphs trees
even number addicts dp games greedy math
prefix sum addicts constructive algorithms greedy math sortings
glory addicts greedy implementation sortings
ela takes dancing class binary search data structures
ela and prime gcd constructive algorithms math number theory
ela goes hiking combinatorics dp math probabilities
ela and the wiring wizard brute force dp graphs greedy implementation shortest paths
ela and crickets constructive algorithms games implementation math
ela's fitness and the luxury number binary search implementation math
ela sorting books greedy implementation strings
swap and take dp greedy
equal binary subsequences constructive algorithms geometry greedy implementation strings
good subarrays (hard version) binary search data structures dp two pointers
good subarrays (easy version) binary search data structures schedules two pointers
playing with gcd math number theory
make a equal to b brute force greedy sortings
pebbles and beads data structures geometry
house planning constructive algorithms data structures graph matchings greedy
meta-set brute force combinatorics data structures hashing math
phase shift dfs and similar dsu graphs greedy implementation strings
tea with tangerines greedy math
working week constructive algorithms greedy math
zeros and ones bitmasks divide and conquer dp math
rectangular congruence constructive algorithms number theory
slime escape data structures dp greedy two pointers
removing smallest multiples greedy math
bright, nice, brilliant constructive algorithms
select three sticks brute force greedy sortings
conveyor constructive algorithms dp math
zero-one (hard version) dp greedy
zero-one (easy version) constructive algorithms greedy math
parity shuffle sorting constructive algorithms sortings
rule of league constructive algorithms math
consecutive sum greedy sortings
location data structures dp math number theory
balance (hard version) brute force data structures number theory
balance (easy version) brute force data structures implementation number theory
sheikh (hard version) binary search bitmasks brute force greedy implementation two pointers
sheikh (easy version) binary search bitmasks greedy two pointers
ugu brute force dp greedy implementation
bestie brute force combinatorics constructive algorithms implementation math number theory
function sum brute force combinatorics dp fft math
graph cost dp greedy math number theory
valiant's new map binary search brute force data structures dp two pointers
even subarrays bitmasks brute force hashing math number theory
kill demodogs greedy math
joey takes money greedy math
almost sorted bitmasks data structures dp
maximums and minimums combinatorics data structures divide and conquer number theory
prefixes and suffixes constructive algorithms strings two pointers
minimum notation data structures greedy math sortings
meeting on the line binary search geometry greedy implementation math ternary search
planets data structures greedy sortings
cut substrings combinatorics dp hashing strings two pointers
kirei and the linear function hashing math
guess the cycle size interactive probabilities
friends and the restaurant greedy sortings two pointers
jumping on tiles constructive algorithms strings
decode string greedy strings
two elevators math
illumination binary search bitmasks brute force combinatorics dp math two pointers
fishermen flows graph matchings greedy
red-black pepper brute force data structures greedy math number theory
letter picking constructive algorithms dp games two pointers
digital logarithm data structures greedy sortings
best permutation constructive algorithms greedy
colored balls: revisited brute force greedy implementation sortings
mainak and the bleeding polygon binary search geometry implementation math
a certain magical party combinatorics data structures greedy sortings
late for work (submissions are not allowed) data structures greedy schedules shortest paths
almost perfect combinatorics fft math
edge split brute force constructive algorithms dfs and similar dsu graphs probabilities trees
jatayu's balanced bracket sequence data structures dsu graphs greedy
mainak and interesting sequence bitmasks constructive algorithms math
mainak and array greedy math
moving both hands dp graphs shortest paths
lemper cooking competition data structures
kingdom of criticism data structures dsu
journey dp trees
imitating the key tree combinatorics dsu trees
hot black hot white constructive algorithms math
garage binary search geometry math
field photography bitmasks data structures sortings
electrical efficiency combinatorics data structures dp math number theory trees
deducing sortability binary search bitmasks math
circular mirror binary search combinatorics geometry math two pointers
basketball together binary search greedy sortings
accumulation of dominoes math
even-odd xor bitmasks constructive algorithms greedy
l-shapes dfs and similar implementation
counting rectangles brute force data structures dp implementation
line greedy sortings
word game data structures implementation
colourblindness implementation
spell check implementation
matching reduction brute force constructive algorithms dfs and similar flows graph matchings graphs interactive
prefix function queries dfs and similar dp hashing string suffix structures strings trees
maximum and bitmasks dfs and similar divide and conquer greedy sortings
min-max array transformation binary search greedy two pointers
deadly laser implementation
image greedy implementation
misha and paintings constructive algorithms data structures greedy implementation math
xor-subsequence (hard version) bitmasks data structures dp strings trees
xor-subsequence (easy version) bitmasks brute force dp strings trees two pointers
corners greedy implementation
interesting sum brute force data structures greedy math sortings
burenka plays with fractions math number theory
fighting tournament binary search data structures implementation two pointers
mathematical circus constructive algorithms math
chip game games math
burenka, an array and queries data structures math number theory
impressionism constructive algorithms graphs implementation math
permutation for burenka data structures graph matchings greedy math trees
tonya and burenka-179 data structures greedy math number theory
fibonacci strings greedy implementation math number theory
burenka and traditions (hard version) data structures dp greedy
burenka and traditions (easy version) dp greedy
madoka and the first session constructive algorithms flows graph matchings graphs implementation
madoka and the best university math number theory
madoka and the corruption scheme combinatorics constructive algorithms greedy math
madoka and formal statement greedy
madoka and underground competitions constructive algorithms implementation
madoka and strange thoughts math number theory
bags with balls combinatorics dp math number theory
swap and maximum block bitmasks data structures dfs and similar divide and conquer dp
chip move brute force dp math
robot in a hallway data structures dp greedy implementation ternary search
permutation chain constructive algorithms math
2-3 moves greedy math
crop squares constructive algorithms geometry interactive math
long way home data structures divide and conquer dp geometry graphs greedy shortest paths
2+ doors 2-sat bitmasks graphs greedy
monoblock combinatorics data structures implementation math
beautiful array constructive algorithms greedy math
crossmarket constructive algorithms greedy math
path prefixes binary search data structures dfs and similar trees
build a tree and that is it constructive algorithms implementation trees
add modulo 10 brute force math number theory
color with occurrences brute force data structures dp greedy strings
minimum varied number greedy
remove prefix data structures greedy implementation
everyone loves to sleep implementation math
lost array bitmasks combinatorics constructive algorithms dp math
cross swapping 2-sat data structures dsu greedy matrices
tournament countdown constructive algorithms greedy interactive number theory probabilities
build permutation constructive algorithms dp math
optimal reduction constructive algorithms sortings
traveling salesman problem geometry greedy implementation
triameter binary search data structures dfs and similar trees
lcm sum (hard version) brute force data structures math number theory two pointers
lcm sum (easy version) binary search brute force combinatorics math number theory two pointers
empty graph binary search constructive algorithms data structures greedy shortest paths
sort zero greedy sortings
woeful permutation constructive algorithms greedy number theory
wonderful permutation greedy implementation
party brute force graphs
perfect permutation constructive algorithms
two arrays binary search games graph matchings
recover the tree constructive algorithms trees
xor triangle bitmasks brute force constructive algorithms dp greedy math
rain binary search brute force data structures geometry greedy implementation math
color the picture constructive algorithms greedy math
multiset of strings bitmasks brute force dp fft flows graphs math meet-in-the-middle trees
xor tree bitmasks data structures dfs and similar dsu greedy trees
rorororobot binary search data structures greedy math
recover an rbs constructive algorithms greedy implementation strings
also try minecraft data structures dp implementation
three doors brute force greedy implementation math
difference of gcds constructive algorithms math
difference operations greedy math
bugaboo bitmasks constructive algorithms dp number theory
replace binary search data structures
partial virtual trees combinatorics dfs and similar dp math trees
dfs trees dfs and similar dsu graphs greedy sortings trees
difference array brute force data structures implementation sortings
doremy's iq binary search constructive algorithms greedy implementation
qpwoeirut and vertices binary search data structures dfs and similar divide and conquer dsu greedy trees
chopping carrots (hard version) brute force constructive algorithms data structures dp greedy math number theory two pointers
chopping carrots (easy version) binary search brute force constructive algorithms greedy number theory
qpwoeirut and the city dp flows greedy implementation
making towers dp greedy math
another string minimization problem 2-sat constructive algorithms greedy string suffix structures strings
mark and the online exam bitmasks constructive algorithms interactive probabilities
mark and professor koro binary search bitmasks brute force combinatorics data structures greedy
mark and lightbulbs combinatorics constructive algorithms greedy math sortings
mark and his unfinished essay brute force implementation
mark the dust sweeper constructive algorithms greedy implementation
mark the photographer greedy sortings
game of ai (hard version) combinatorics fft math
game of ai (easy version) combinatorics constructive algorithms dp fft math
mio and lucky array constructive algorithms fft math strings
colouring game constructive algorithms dp games
count seconds brute force constructive algorithms dp graphs implementation math
magical array constructive algorithms hashing implementation math
virus greedy implementation sortings
luke is a foodie brute force greedy implementation
two 0-1 sequences constructive algorithms greedy
good key, bad key bitmasks brute force dp greedy math
yet another problem about pairs satisfying an inequality binary search data structures dp greedy sortings
mirror grid implementation
double strings brute force data structures strings
cypher brute force implementation strings
icpc balloons data structures implementation
yes or yes? brute force implementation strings
passable paths (hard version) data structures dfs and similar trees
passable paths (easy version) dfs and similar trees
equate multisets constructive algorithms data structures greedy math number theory
split into two sets dfs and similar dsu graphs
not a cheap string greedy
train and queries data structures greedy
polycarp writes a string from memory greedy
round down the price constructive algorithms
points combinatorics data structures implementation math matrices
text editor brute force dp greedy strings
permutation restoration binary search data structures greedy math sortings two pointers
schedule management binary search greedy implementation two pointers
permutation greedy
grass field implementation
puzzle constructive algorithms dp greedy
serega the pirate brute force constructive algorithms
river locks binary search dp greedy math
helping the nature constructive algorithms data structures greedy
palindromic numbers constructive algorithms implementation math
optimal path constructive algorithms greedy math
three days grace data structures dp greedy math number theory two pointers
almost triple deletions data structures dp greedy
the third problem combinatorics constructive algorithms math
almost ternary matrix bitmasks constructive algorithms matrices
the third three number problem constructive algorithms math
long binary string bitmasks math matrices meet-in-the-middle number theory
equal reversal constructive algorithms graphs implementation math
permutationforces ii brute force combinatorics greedy sortings trees two pointers
fixed point guessing binary search constructive algorithms interactive
3sum closure brute force data structures
rising sand constructive algorithms greedy implementation
xor mixup bitmasks brute force
too many constraints 2-sat constructive algorithms graphs implementation
coloring brute force combinatorics constructive algorithms dp geometry graphs greedy implementation math
guess the string binary search constructive algorithms interactive
awoo's favorite problem binary search constructive algorithms data structures greedy implementation strings two pointers
promo greedy sortings
parkway walk greedy implementation
maximum product? brute force combinatorics dp greedy implementation math two pointers
fishingprince plays with array again brute force data structures geometry math
tree recovery brute force constructive algorithms dfs and similar dsu graphs trees
placing jinas combinatorics math
permutation graph binary search constructive algorithms data structures divide and conquer greedy shortest paths
fishingprince plays with array constructive algorithms greedy implementation math
nit destroys the universe greedy
nit orz! bitmasks greedy
ambiguous dominoes constructive algorithms dfs and similar graphs
tree queries (hard version) constructive algorithms dfs and similar dp greedy trees
tree queries (easy version) brute force constructive algorithms dfs and similar dp greedy trees
zero path brute force data structures dp graphs greedy shortest paths
circle game games greedy
subrectangle guess games
paranoid string constructive algorithms greedy
creep greedy implementation
i might be wrong binary search greedy two pointers
outermost maximums data structures greedy
decinc dividing brute force data structures divide and conquer dp greedy
keshi in search of amshz graphs greedy shortest paths
fake plastic trees dfs and similar dp greedy trees
directional increase greedy
gambling data structures dp greedy math
2^sort data structures dp sortings two pointers
3sum brute force math
binary deque binary search implementation two pointers
the clock brute force implementation
where's the bishop? implementation
all distinct greedy sortings
marathon implementation
k-set tree combinatorics dfs and similar dp math trees
number of groups data structures dfs and similar dsu graphs greedy sortings
max geq sum binary search constructive algorithms data structures divide and conquer implementation two pointers
sum of substrings brute force constructive algorithms greedy math strings
shoe shuffling constructive algorithms greedy implementation two pointers
beat the odds brute force greedy math
count the trains binary search data structures greedy sortings
shifting string graphs math number theory strings
price maximization binary search greedy math two pointers
black and white stripe implementation two pointers
restoring the duration of tasks data structures greedy implementation
array decrements greedy implementation
print a pedestal (codeforces logo?) constructive algorithms greedy
andfinity bitmasks brute force constructive algorithms dfs and similar dsu graphs
lena and matrix data structures dp geometry shortest paths
infected tree dfs and similar dp trees
mystic permutation data structures greedy
lex string brute force greedy implementation sortings two pointers
manipulating history constructive algorithms greedy strings
patchouli's magical talisman bitmasks constructive algorithms greedy sortings
cirno's perfect bitmasks classroom bitmasks brute force
koishi's unconscious permutation fft math
become big for me combinatorics constructive algorithms greedy math number theory
cute number binary search brute force data structures dsu implementation math
sanae and giant robot binary search brute force data structures dsu greedy sortings
railway system constructive algorithms graphs greedy interactive sortings
the enchanted forest brute force greedy
odd subarrays dp greedy
everything everywhere all but one greedy
the ultimate lis problem data structures greedy
permutation weight (hard version) constructive algorithms greedy
permutation weight (easy version) constructive algorithms dfs and similar dsu
bring balance brute force constructive algorithms greedy
linguistics greedy implementation sortings strings
circular local minimax constructive algorithms greedy sortings
hard cut constructive algorithms dfs and similar divide and conquer math
euclid guess constructive algorithms flows graph matchings math number theory
diverse segments data structures two pointers
mex vs diff binary search brute force constructive algorithms data structures greedy two pointers
traps constructive algorithms greedy sortings
column swapping brute force constructive algorithms greedy implementation sortings
z mod x = c constructive algorithms math
digit minimization constructive algorithms games math strings
mcmf? data structures flows graphs greedy sortings two pointers
unordered swaps constructive algorithms dfs and similar graphs greedy math sortings trees
circular spanning tree constructive algorithms implementation trees
lis or reverse lis? constructive algorithms greedy implementation math
and sorting bitmasks constructive algorithms sortings
palindromic indices greedy strings
unique occurrences data structures dfs and similar divide and conquer dp dsu trees
labyrinth adventures data structures dp matrices shortest paths
required length brute force dfs and similar dp hashing shortest paths
double sort implementation sortings
card trick implementation math
game with cards games greedy
lenient vertex cover dfs and similar divide and conquer dsu graphs trees
moving chips bitmasks dp greedy
dog walking brute force greedy math
binary string binary search greedy strings two pointers
robots implementation
minimums and maximums brute force math
formalism for formalism bitmasks dp math
typical party in dorm bitmasks combinatorics dp strings
toss a coin to your graph... binary search dfs and similar dp graphs
rooks defenders data structures implementation
stone age problem data structures implementation
avtobus brute force greedy math number theory
tokitsukaze and good 01-string (hard version) dp greedy implementation
tokitsukaze and good 01-string (easy version) implementation
tokitsukaze and all zero sequence implementation
tokitsukaze and gems dp math
tokitsukaze and beautiful subsegments data structures
tokitsukaze and permutations dp math
tokitsukaze and two colorful tapes constructive algorithms dfs and similar graphs greedy
tokitsukaze and meeting data structures implementation math
tokitsukaze and strange inequality brute force data structures dp
maximum crossings (hard version) data structures divide and conquer sortings
maximum crossings (easy version) brute force
white-black balanced subtrees dfs and similar dp graphs trees
longest strike data structures greedy implementation sortings two pointers
eating queries binary search greedy sortings
x-sum brute force greedy implementation
most similar words brute force greedy implementation implementation math strings
equal candies greedy math sortings
lucky? implementation
sorting pancakes dp
vlad and unfinished business dfs and similar dp greedy trees
replace with the previous, minimize dsu greedy strings
vertical paths graphs implementation trees
detective task implementation
make it increasing greedy implementation
food for animals greedy math
remove directed edges dfs and similar dp graphs
desktop rearrangement data structures greedy implementation
breaking the wall binary search brute force constructive algorithms greedy math
a-b-c sort constructive algorithms implementation sortings
infinite replacement combinatorics implementation strings
dictionary combinatorics math
number transformation constructive algorithms math
anti-theft road planning bitmasks constructive algorithms divide and conquer greedy interactive math
power or xor? bitmasks combinatorics math number theory
lost arithmetic progression combinatorics math number theory
palindrome basis brute force dp math number theory
a perfectly balanced string? brute force greedy strings
subtle substring subtraction games greedy strings
permutationforces data structures greedy
zigu zagu constructive algorithms data structures greedy
cross xor constructive algorithms graphs math matrices
checker for array shuffling constructive algorithms dfs and similar graphs
array shuffling constructive algorithms graphs greedy
notepad.exe binary search constructive algorithms greedy interactive
cyclic rotation constructive algorithms greedy implementation two pointers
unequal array constructive algorithms greedy implementation
i love aaab constructive algorithms implementation
log chopping games implementation math
permutation counting brute force combinatorics dp fft math
preorder combinatorics divide and conquer dp dsu hashing sortings trees
insert a progression brute force constructive algorithms greedy
dolce vita binary search brute force greedy math
consecutive points segment brute force math sortings
string building implementation
jee, you see? bitmasks combinatorics dp
hemose on the tree bitmasks constructive algorithms dfs and similar trees
very suspicious binary search brute force geometry greedy implementation math
where is the pizza? data structures dfs and similar dsu graphs implementation math
dorms war brute force implementation strings
prof. slim greedy implementation sortings
maximal and bitmasks greedy math
fall down dfs and similar implementation
eating candies binary search data structures greedy two pointers
2-letter strings data structures math strings
colorful stamp implementation
odd/even increments greedy greedy implementation math
triple implementation sortings
division? implementation
social distance greedy math sortings
direction change implementation math
yin yang implementation
centroid probabilities combinatorics dp fft math
edge elimination constructive algorithms dfs and similar dp trees
half queen cover constructive algorithms math
optimal partition data structures dp
make it increasing brute force greedy math
labyrinth dfs and similar graphs
kingdom partition flows
job lookup constructive algorithms dp shortest paths trees
interactive treasure hunt brute force constructive algorithms geometry interactive math
heroes of might math
global warming geometry math
fancy stack combinatorics dp implementation
even split binary search constructive algorithms greedy math
deletive editing greedy
connect the points brute force constructive algorithms geometry
budget distribution
admissible map
minimizor bitmasks brute force data structures divide and conquer greedy implementation two pointers
gcd guess bitmasks chinese remainder theorem constructive algorithms games interactive math number theory
tree infection binary search greedy sortings trees
array cloning technique constructive algorithms greedy sortings
gcd vs lcm constructive algorithms math
cross-language program *special constructive algorithms
six characters *special constructive algorithms strings
in every generation... *special strings
are you safe? *special implementation
is it rated - 3 *special combinatorics dp math
pōja verdon *special implementation math
mike's sequence *special divide and conquer implementation math
who tested? *special expression parsing trees
circular maze brute force dfs and similar graphs implementation
drone photo combinatorics math sortings
bottle arrangements constructive algorithms
il derby della madonnina data structures dp math
pandemic restrictions geometry ternary search
training camp flows graphs
ice cream shop brute force implementation sortings
boundary brute force math
gastronomic event dp greedy trees
antennas data structures dfs and similar graphs graphs implementation implementation shortest paths shortest paths
round table math
evolution of weasels greedy implementation strings
european trip dp graphs math matrices
toys greedy strings
organizing swerc brute force implementation
teleporters binary search greedy
narrow components brute force data structures dp dsu math trees
progressions covering data structures greedy
water the trees binary search greedy math
getting zero bitmasks brute force dfs and similar dp graphs greedy shortest paths
array balancing greedy math
promising string (hard version) data structures implementation math strings
promising string (easy version) brute force implementation math strings
matrix and shifts brute force constructive algorithms greedy implementation
maximum product strikes back brute force implementation math two pointers
get an even string dp greedy strings
vlad and candies math
vasya and coins greedy math
tree and permutation game dfs and similar games graphs trees
and-mex walk bitmasks brute force constructive algorithms dfs and similar dsu graphs
reverse sort sum constructive algorithms data structures greedy implementation math two pointers
line empire binary search brute force dp greedy implementation math
bit flipping bitmasks constructive algorithms greedy strings
red versus blue constructive algorithms greedy implementation math
juju and binary string brute force constructive algorithms greedy math
gojou and matrix game data structures dp games hashing implementation math number theory sortings
388535 (hard version) bitmasks brute force data structures math
388535 (easy version) bitmasks math
shinju and the lost permutation constructive algorithms math
marin and anti-coprime permutation combinatorics math number theory
marin and photoshoot constructive algorithms implementation math
words on tree 2-sat dfs and similar dsu graphs trees
star mst combinatorics dp graph matchings math
for gamers. by gamers. binary search brute force greedy math sortings
bracket sequence deletion greedy implementation
xy sequence greedy
integer moves brute force math
neighbour ordering constructive algorithms graphs
equal lcm subsets data structures math number theory
cycle palindrome constructive algorithms graphs math
parametric mst binary search constructive algorithms graphs greedy math sortings
equal tree sums constructive algorithms dfs and similar math trees
k-good constructive algorithms math number theory
make equal with mod constructive algorithms math number theory sortings
subtract operation data structures greedy math two pointers
good pairs math sortings
three minimums combinatorics constructive algorithms divide and conquer dp fft math
snowy mountain data structures dfs and similar graphs greedy shortest paths trees
minimal string xoration bitmasks data structures divide and conquer greedy hashing sortings strings
arithmetic operations brute force data structures graphs math
potion brewing class dfs and similar math number theory trees
alice and the cake data structures greedy implementation sortings
prefix removals strings
maximum cake tastiness brute force greedy implementation sortings
tower defense binary search brute force data structures
sum of matchings brute force combinatorics constructive algorithms dfs and similar graph matchings greedy math
nearest excluded points binary search data structures dfs and similar graphs shortest paths
fault-tolerant network brute force data structures implementation
prove him wrong constructive algorithms greedy
playoff implementation
counting shortcuts data structures dfs and similar dp graphs shortest paths
vitaly and advanced useless algorithms dp greedy implementation
rescheduling the exam binary search data structures greedy implementation math sortings
twist the permutation brute force constructive algorithms implementation math
weight of the system of nested segments greedy hashing implementation sortings
div + mod math
deletions of two adjacent letters implementation strings
game of ball passing greedy implementation
game implementation
two avenues data structures dfs and similar graphs
air reform data structures dfs and similar divide and conquer dsu graphs implementation trees
serious business data structures divide and conquer dp implementation shortest paths
tyler and strings combinatorics data structures implementation
integral array brute force constructive algorithms data structures math
weird sum combinatorics data structures geometry math matrices sortings
madoka and laziness dp greedy
madoka and the sixth-graders data structures dfs and similar greedy
madoka and the best school in russia constructive algorithms dp math number theory
madoka and childish pranks constructive algorithms greedy
madoka and the elegant gift brute force constructive algorithms graphs implementation
madoka and math dad implementation math
playing around the table constructive algorithms greedy implementation
power board brute force dp math number theory
weight the tree constructive algorithms dfs and similar dp implementation trees
factorials and powers of two bitmasks brute force constructive algorithms dp math
quality vs quantity brute force constructive algorithms greedy sortings two pointers
square counting math
basis combinatorics fft math number theory
expand the path brute force combinatorics data structures implementation math
cross coloring data structures implementation math
increase subarray sums brute force dp greedy implementation
anti-fibonacci permutation brute force constructive algorithms implementation
doors and keys implementation
power walking greedy
hard way geometry
covering circle geometry
special positions combinatorics divide and conquer fft math
two arrays bitmasks brute force combinatorics greedy hashing math two pointers
anonymity is important binary search brute force data structures dsu greedy sortings
repetitions decoding constructive algorithms implementation sortings
great sequence brute force greedy sortings
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
treasure hunt graphs interactive
two posters brute force data structures greedy two pointers
colorful operations brute force data structures implementation
big brush constructive algorithms data structures greedy implementation
inversion graph data structures dsu graphs math
odd swap sort data structures math sortings
reverse constructive algorithms greedy math
minimize inversions number data structures greedy math sortings
birthday constructive algorithms greedy math
towers constructive algorithms dfs and similar dp greedy trees
best pair binary search brute force implementation
yet another minimization problem dp greedy math
andrew and stones greedy implementation
mex and array brute force dp greedy math
sorting parts brute force sortings
closest pair data structures greedy
cars 2-sat constructive algorithms dfs and similar dsu graphs greedy sortings
infinite set bitmasks dp math matrices number theory strings
differential sorting constructive algorithms greedy
avoid local maximums greedy
min or sum bitmasks greedy
fibonacci additions brute force data structures hashing implementation math
fair share constructive algorithms data structures dfs and similar graph matchings graphs
finding zero constructive algorithms interactive math
okea constructive algorithms
fortune telling bitmasks math
reverse and concatenate greedy strings
perfect matching data structures divide and conquer interactive trees
spanning tree queries binary search data structures dfs and similar dsu graphs greedy math sortings trees
make them equal dp greedy
kill the monster brute force math
minority greedy
div. 7 brute force
distance tree (hard version) binary search dfs and similar shortest paths trees
distance tree (easy version) binary search data structures dfs and similar graphs shortest paths trees
new year concert binary search data structures greedy math number theory two pointers
strange test binary search bitmasks brute force dp math
roof construction bitmasks constructive algorithms
abc implementation
fun with even subarrays dp greedy
min max swap greedy
making it bipartite flows graph matchings graphs number theory
expected components combinatorics math number theory probabilities
flipping range constructive algorithms dp greedy number theory
paint the middle dp greedy sortings two pointers
range and partition binary search constructive algorithms data structures greedy two pointers
and matching bitmasks constructive algorithms
gcd arrays greedy math number theory
download more ram brute force greedy sortings
spaceship crisis management binary search data structures geometry sortings
groceries in meteor town binary search data structures dsu trees
game on sum (hard version) combinatorics dp games math
game on sum (easy version) combinatorics dp games math
grid xor constructive algorithms greedy implementation interactive math
peculiar movie preferences greedy strings
meximum array binary search constructive algorithms greedy implementation math two pointers
not splitting geometry graphs greedy implementation shortest paths
not escaping data structures dp implementation shortest paths two pointers
not adding brute force dp math number theory
not assigning constructive algorithms dfs and similar number theory trees
not sitting games greedy sortings
not shading constructive algorithms implementation
a random code problem combinatorics dp math number theory probabilities
black and white tree dfs and similar greedy trees
martial arts tournament binary search brute force greedy math
monsters and spells binary search data structures dp greedy implementation math two pointers
minor reduction greedy strings
equidistant letters constructive algorithms sortings
cats on the upgrade (hard version) binary search data structures dfs and similar graphs trees
cats on the upgrade (easy version) brute force data structures dfs and similar divide and conquer dp graphs trees
binary spiders bitmasks data structures implementation math sortings trees
road optimization dp
elementary particles brute force greedy sortings
ancient civilization bitmasks greedy math
minor tree bitmasks dfs and similar dsu graphs greedy
interacdive problem binary search constructive algorithms interactive
masha-forgetful brute force constructive algorithms dp hashing implementation strings
palindromes coloring binary search greedy sortings strings
division by two and permutation constructive algorithms flows graph matchings greedy math
make ap implementation math
plus one on the subset math
middle duplication data structures dfs and similar greedy strings trees
robot cleaner revisit implementation math probabilities
balanced stone heaps binary search greedy
game on ranges brute force dfs and similar implementation sortings
robot cleaner brute force implementation math
quadratic set constructive algorithms hashing math number theory
math test bitmasks brute force greedy
shuffle combinatorics math two pointers
set or decrease binary search brute force greedy sortings
berland music data structures greedy math sortings
construct a rectangle geometry math
two sequences data structures hashing string suffix structures
trains and airplanes dfs and similar graphs shortest paths trees
weighted increasing subsequences data structures dp math
strange instructions data structures greedy implementation
new school binary search data structures dp greedy implementation sortings
the winter hike constructive algorithms greedy math
hidden permutations dfs and similar interactive math
integers shop data structures greedy implementation
stable arrangement of rooks constructive algorithms
subsequences galore bitmasks combinatorics dp
bipartite array dp greedy
replace the numbers constructive algorithms data structures dsu implementation
exact change brute force constructive algorithms greedy
ba-string brute force dp greedy implementation math
triangles on a rectangle geometry greedy math
equal or not equal constructive algorithms dsu implementation
permutation and queries brute force data structures divide and conquer two pointers
unusual minesweeper binary search dfs and similar dsu greedy sortings
let's play the hat? brute force constructive algorithms greedy math
mex and increments constructive algorithms data structures dp greedy implementation math sortings
new year's problem binary search greedy sortings
wrong addition implementation
squares and cubes implementation math
square string? implementation strings
trader problem data structures dsu greedy sortings
reverse bitmasks constructive algorithms dfs and similar implementation math strings
singers' tour constructive algorithms math
array and operations dp greedy math
paint the array math
missing bigram implementation
polycarp and sums of subsequences math sortings
christmas chocolates dfs and similar dp games graphs implementation math number theory shortest paths trees
too many impostors (hard version) constructive algorithms implementation interactive math
too many impostors (easy version) constructive algorithms implementation interactive
paprika and permutation binary search greedy math sortings
gcd problem brute force constructive algorithms math number theory
forbidden subsequence constructive algorithms greedy sortings strings
keep xor low bitmasks combinatorics data structures divide and conquer dp math
just add an edge dfs and similar dp graphs
tricolor triangles brute force graphs math matrices
lexicographically small enough brute force data structures greedy strings
keep the average high dp greedy math
representative edges brute force geometry implementation math
mirror in the string greedy strings
integer diversity implementation
reindeer games binary search constructive algorithms data structures divide and conquer flows graphs shortest paths
maximum adjacent pairs constructive algorithms graph matchings
legondary grandmaster combinatorics dp math
purple crayon data structures dfs and similar games graphs greedy math sortings trees
x(or)-mas tree bitmasks dfs and similar dsu graphs trees
menorah brute force graphs greedy math
and it's non-zero bitmasks greedy math
closing the gap greedy math
divan and a cottage binary search data structures
divan and kostomuksha (hard version) dp number theory
divan and kostomuksha (easy version) dp number theory
divan and bitwise operations bitmasks combinatorics constructive algorithms dp math
divan and a new project constructive algorithms sortings
divan and a store brute force constructive algorithms greedy
tree coloring combinatorics divide and conquer fft
crazy robot dfs and similar graphs
mex sequences dp math
poisoned dagger binary search
absent remainder greedy implementation sortings
long comparison implementation math
max sum array combinatorics constructive algorithms greedy sortings
armor and weapons brute force dp greedy shortest paths
messages brute force dp greedy probabilities sortings
x-magic pair math number theory
chat ban binary search math
special permutation constructive algorithms greedy
distance brute force constructive algorithms
robot and candies data structures graph matchings greedy
atm and students binary search data structures two pointers
escape the maze (hard version) dfs and similar dp greedy shortest paths trees
escape the maze (easy version) dfs and similar greedy shortest paths trees two pointers
weights assignment for tree edges constructive algorithms trees
polycarp recovers the permutation constructive algorithms
team composition: programmers and mathematicians binary search constructive algorithms math
make even constructive algorithms math
mashtali vs atcoder games trees
squid game data structures dfs and similar greedy trees
amshz wins a bet data structures greedy hashing
mashtali: a space oddysey constructive algorithms dfs and similar graphs
amshz and g.o.a.t. binary search brute force greedy implementation math
not quite lee combinatorics dp math number theory
keshi is throwing a party binary search greedy
kalindrome array greedy two pointers
anti light's cell guessing math
pushing robots
a stroll around the matrix data structures greedy math
interesting sections data structures divide and conquer meet-in-the-middle two pointers
william the oblivious bitmasks data structures dp matrices
social network dsu graphs greedy implementation trees
complex market analysis binary search dp implementation number theory schedules two pointers
william the vigilant implementation strings
divide and multiply greedy implementation math number theory
alphabetic tree binary search data structures dfs and similar hashing string suffix structures strings trees
mex counting combinatorics dp implementation
the cells on the paper binary search implementation sortings
dominoes combinatorics fft graphs math number theory
game master data structures dfs and similar dp graphs greedy two pointers
build the permutation constructive algorithms greedy
find array constructive algorithms math
banquet preparations 2 greedy sortings two pointers
banquet preparations 1 greedy
robot on the board 2 brute force dfs and similar graphs implementation
robot on the board 1 implementation
blue-red permutation greedy math sortings
minimum extraction brute force sortings
odd grasshopper math
linear keyboard implementation strings
tree queries brute force dp trees
arena combinatorics dp math
red-blue matrix brute force constructive algorithms implementation sortings
banknotes greedy number theory
update files greedy implementation math
ab balance strings
palindorme combinatorics dp
array equalizer binary search greedy implementation math number theory sortings two pointers
treelabeling bitmasks constructive algorithms dfs and similar games greedy implementation trees
dominant character brute force greedy implementation strings
reverse sort greedy sortings
a.m. deviation math number theory
xor specia-lis-t
era greedy
october 18, 2017 combinatorics dp implementation math
a perfect problem combinatorics dp math
artistic partition divide and conquer dp number theory
extreme extension dp greedy math number theory
moderate modular mode constructive algorithms math number theory
di-visible confusion constructive algorithms math number theory
divine array constructive algorithms implementation
two subsequences implementation
two sorts binary search dfs and similar math meet-in-the-middle
phys ed online data structures dp greedy
difficult mountain data structures dp greedy sortings
optimal insertion data structures divide and conquer dp greedy sortings
frog traveler data structures dfs and similar dp graphs shortest paths two pointers
array elimination bitmasks greedy math number theory
robot factory bitmasks dfs and similar
party organization brute force math probabilities
array game games greedy two pointers
bob's beautiful array bitmasks brute force greedy
desert data structures graphs
hidden fortress interactive math
shortest path brute force geometry math shortest paths
mars hashing
two arrays data structures matrices
bubble popping
bubble strike combinatorics math probabilities ternary search
restaurant game
weights constructive algorithms greedy two pointers
the sum of good numbers hashing math string suffix structures strings
rbs binary search bitmasks brute force data structures dp
staircases brute force combinatorics data structures dfs and similar dp implementation math
training session combinatorics data structures geometry implementation math
delete two elements data structures dp implementation math two pointers
groups brute force implementation
computer game brute force dfs and similar dp implementation
ideal farm constructive algorithms math
rubik's cube coloring (hard version) brute force dp implementation math trees
rubik's cube coloring (easy version) combinatorics math
the number of imposters constructive algorithms dfs and similar dp dsu graphs
make them equal brute force greedy math strings
special numbers bitmasks math
consecutive sum riddle math
changing brackets constructive algorithms data structures dp greedy
red-black number dfs and similar dp implementation math meet-in-the-middle
gardener and tree brute force data structures dfs and similar greedy implementation trees
half of same brute force math number theory
all are same math number theory
save more mice binary search greedy greedy
make it divisible by 25 dfs and similar dp greedy math math
elections math
alice and recoloring 2 constructive algorithms flows graph matchings greedy
alice and recoloring 1 constructive algorithms greedy
bored bakry bitmasks greedy math two pointers
hemose in icpc ? binary search dfs and similar implementation interactive math number theory trees
bakry and partitioning bitmasks constructive algorithms dfs and similar dp graphs trees
hemose shopping constructive algorithms dsu math sortings
gamer hemose binary search greedy math sortings
jumping through the array binary search data structures graphs two pointers
omkar and mosaic combinatorics constructive algorithms math
poachers dp games graphs trees
non-equal neighbours combinatorics dp math
frequency queries data structures dfs and similar trees
yet another sorting problem data structures math
minimize distance greedy
array eversion greedy
life of a flower implementation
eligible segments geometry
strange lcs bitmasks dp graphs greedy strings
game with stones binary search data structures games greedy
guess the permutation binary search combinatorics interactive math
two arrays greedy math sortings
coloring rectangles greedy math
mathematical addition math
omkar and tours data structures divide and conquer sortings trees
omkar and time travel data structures math
defender of childhood dreams bitmasks constructive algorithms divide and conquer
moment of bloom constructive algorithms dfs and similar graph matchings graphs greedy trees
omkar and the meaning of life constructive algorithms greedy interactive
omkar and determination data structures dp
omkar and heavenly tree constructive algorithms trees
windblume ode math number theory
kuzya and homework data structures number theory
korney korneevich and xor (hard version) binary search brute force dp greedy two pointers
korney korneevich and xor (easy version) bitmasks dp greedy
pchelyonok and segments binary search data structures dp greedy math
vupsen, pupsen and 0 constructive algorithms math
grandma capa knits a scarf brute force data structures greedy strings two pointers
luntik and subsequences combinatorics math
luntik and concerts math
diameter of graph constructive algorithms graphs greedy math
cqxym count permutations combinatorics math number theory
problems for codeforces combinatorics fft math
railway construction brute force constructive algorithms data structures graphs shortest paths
subsequence brute force divide and conquer dp greedy trees
train maintenance brute force data structures implementation
mathematics curriculum brute force combinatorics dp trees
portal brute force data structures dp greedy implementation
minimal coverage dp
array stabilization (and version) brute force graphs math number theory shortest paths
array optimization by deque data structures greedy
permutation minimization by deque constructive algorithms greedy math
productive meeting constructive algorithms graphs greedy
ticks greedy implementation
shifting sort implementation sortings
casimir's string solitaire math strings
the mind constructive algorithms interactive probabilities
labyrinth binary search dsu greedy
kingdom of islands brute force graphs implementation
just kingdom brute force data structures dfs and similar
interactive rays geometry interactive
higher order functions implementation strings
game of chance math probabilities
framing pictures geometry
easy scheduling implementation math
dragon curve
cactus lady and her cing
building forest trails data structures dsu
anti-tetris constructive algorithms graphs shortest paths
communication routing challenge *special
managing telephone poles data structures geometry
longest array deconstruction data structures divide and conquer dp sortings
knitting batik implementation math
jeopardy of dropped balls binary search brute force dsu implementation
illusions of the desert data structures trees
holiday wall ornaments dp strings
gcd festival math number theory
finding expected value math
eye-pleasing city park tour data structures trees
divisible by twenty-five brute force dfs and similar dp
cyclic sum data structures fft number theory
building an amusement park binary search geometry
another sorting problem data structures sortings strings
occurrences combinatorics dfs and similar dp dsu fft graphs
coloring combinatorics constructive algorithms implementation math
the strongest build binary search brute force data structures dfs and similar graphs greedy hashing implementation
slay the dragon binary search greedy sortings ternary search
combinatorics homework combinatorics greedy math
regular bracket sequences constructive algorithms
swaps greedy math sortings
countdown greedy
stations data structures
polygon binary search dp geometry
bridge club flows graph matchings graphs greedy
paint dp greedy
xor of 3 brute force constructive algorithms greedy two pointers
book binary search brute force data structures dp graphs implementation sortings
two railroads *special
physical examination *special binary search data structures
laser beams *special geometry probabilities
a battle against a dragon *special data structures dp
kotlinforces *special constructive algorithms dp
fix the string *special bitmasks dp greedy
sweepstake *special brute force constructive algorithms implementation math
rhyme *special implementation
epic novel *special math
sequence of comparisons *special
palindromic hamiltonian path brute force dfs and similar dp graphs hashing
playoff restoration bitmasks brute force hashing implementation meet-in-the-middle
inconvenient pairs binary search data structures implementation sortings two pointers
jury meeting combinatorics math
chess tournament constructive algorithms
balanced substring implementation
one-four overload 2-sat constructive algorithms dfs and similar dsu graphs implementation
non-decreasing dilemma data structures divide and conquer math
expression evaluation error constructive algorithms greedy implementation math
carrying conundrum bitmasks combinatorics dp math
mexor mixup bitmasks greedy
domino disaster implementation strings
xor-quiz constructive algorithms dp interactive math number theory
four vertices constructive algorithms data structures graphs greedy implementation shortest paths
points movement data structures dp greedy implementation sortings
buds re-hanging constructive algorithms dfs and similar dp greedy trees
seating arrangements (hard version) data structures greedy implementation sortings two pointers
seating arrangements (easy version) data structures greedy sortings
max-mex cut bitmasks constructive algorithms dp greedy
min-mex cut bitmasks constructive algorithms dp greedy
median maximization binary search greedy math
tubular bells interactive math number theory probabilities
rescue niwen! dp greedy string suffix structures strings
two hundred twenty one (hard version) data structures math
two hundred twenty one (easy version) data structures dp math
rings constructive algorithms math
scenes from a memory brute force constructive algorithms implementation math number theory
the miracle and the sleeper greedy math
up the strip (simplified version) brute force data structures dp math number theory
deep down below binary search greedy sortings
simply strange sort brute force implementation sortings
nearest beautiful number (hard version) bitmasks brute force constructive algorithms dfs and similar dp greedy
nearest beautiful number (easy version) binary search bitmasks brute force constructive algorithms dfs and similar greedy
polycarp and string transformation binary search implementation sortings strings
make a power of two greedy math strings
infinity table implementation math
who's opposite? math
dislike of threes implementation
mocha and stars combinatorics dp fft math number theory
mocha and diana (hard version) brute force constructive algorithms dfs and similar dsu graphs greedy trees two pointers
mocha and diana (easy version) brute force constructive algorithms dsu graphs greedy trees
mocha and hiking constructive algorithms graphs
mocha and red and blue dp greedy
mocha and math bitmasks constructive algorithms math
strange sort data structures sortings
down below binary search dfs and similar graphs greedy meet-in-the-middle shortest paths
top-notch insertions combinatorics data structures
bottom-tier reversals constructive algorithms greedy
up the strip brute force dp math number theory two pointers
charmed by the game brute force math
assiut chess brute force constructive algorithms interactive
ezzat and grid data structures dp greedy
moamen and xor bitmasks combinatorics dp math matrices
moamen and k-subarrays greedy sortings
ezzat and two subsequences brute force math sortings
diy tree graphs greedy math probabilities
gates to another world bitmasks data structures dsu two pointers
sports betting bitmasks combinatorics dp graphs math probabilities
equilibrium data structures dp greedy
take a guess bitmasks constructive algorithms interactive math
compressed bracket sequence brute force implementation
take your places! implementation
a variety of operations math
good graph data structures dsu graphs trees
boring segments data structures sortings trees two pointers
say no to palindromes brute force constructive algorithms dp strings
coin rows brute force constructive algorithms dp implementation
two tables brute force
pizzaforces brute force math
you dfs and similar dp math number theory
diane constructive algorithms greedy strings
mikasa binary search bitmasks greedy implementation
cobb bitmasks brute force greedy math
cherry greedy
stairs combinatorics divide and conquer dp fft math
xor and distance bitmasks divide and conquer trees
common divisor graph brute force constructive algorithms dsu graphs hashing math number theory
pairwise modulo data structures math
permutation shift brute force combinatorics constructive algorithms dfs and similar dsu graphs math
backspace dp greedy strings two pointers
penalty bitmasks brute force dp greedy
reverse string brute force dp hashing implementation strings
digits sum math number theory
organizing a music festival dfs and similar math
guess the perimeter binary search interactive number theory
a serious referee bitmasks brute force dfs and similar sortings
telepanting binary search data structures dp sortings
colors and intervals constructive algorithms data structures greedy sortings
array differentiation bitmasks brute force constructive algorithms dfs and similar dp graphs math
maximize the intersections combinatorics constructive algorithms geometry greedy sortings
running for gold combinatorics graphs greedy sortings
subsequence permutation sortings strings
equidistant vertices brute force combinatorics dfs and similar dp trees
fixed points binary search brute force dp
domino (hard version) constructive algorithms implementation math
domino (easy version) constructive algorithms math
interesting story greedy sortings strings
wonderful coloring - 2 binary search constructive algorithms data structures greedy
wonderful coloring - 1 greedy strings
polycarp and coins greedy math
jumping around binary search data structures divide and conquer dp dsu graphs shortest paths
stringforces binary search bitmasks brute force dp strings two pointers
excellent arrays binary search combinatorics constructive algorithms implementation math sortings two pointers
manhattan subarrays brute force geometry greedy implementation
maximum cost deletion greedy math
find the array greedy math
gregor and the pawn game dfs and similar dp flows graph matchings graphs greedy implementation
gregor and cryptography math number theory
gregor and the two painters data structures divide and conquer graphs greedy math
gregor and the odd cows (hard) brute force geometry math number theory
gregor and the odd cows (easy) bitmasks geometry math number theory
the three little pigs combinatorics dp fft math
integers have friends binary search data structures divide and conquer math number theory two pointers
web of lies brute force graphs greedy
how many paths? dfs and similar dp graphs trees
array stabilization (gcd version) binary search brute force data structures divide and conquer number theory two pointers
air conditioners data structures dp implementation shortest paths sortings two pointers
co-growing sequence bitmasks constructive algorithms greedy
pair programming greedy two pointers
alphabetical strings greedy implementation strings
shortest path with obstacle implementation math
aquamoon and stolen string interactive math
aquamoon and two arrays brute force greedy
aquamoon and potatoes brute force data structures dp
aquamoon and time stop (hard version) data structures dp
aquamoon and time stop (easy version) data structures dp
aquamoon and wrong coordinate constructive algorithms interactive math
aquamoon and permutations 2-sat brute force combinatorics constructive algorithms graph matchings graphs
aquamoon and chess combinatorics math
aquamoon and strange sort sortings
the final pursuit bitmasks constructive algorithms divide and conquer graphs greedy math
rpd and rap sheet (hard version) brute force constructive algorithms interactive math
rpd and rap sheet (easy version) bitmasks constructive algorithms interactive math
need for pink slips bitmasks brute force dfs and similar implementation math probabilities
customising the track combinatorics greedy math
exciting bets greedy math number theory
abnormal permutation pairs (hard version) combinatorics dp fft math
abnormal permutation pairs (easy version) combinatorics dp fft math
priority queue combinatorics dp implementation math ternary search
strange function math number theory
plus and multiply constructive algorithms math number theory
odd set math
pleasant pairs brute force implementation math number theory
pretty permutations constructive algorithms greedy implementation
tasty dishes math matrices
inverse inversions binary search brute force data structures
converging array (hard version) dp math
converging array (easy version) dp math
tree array brute force combinatorics dp graphs math probabilities trees
great graphs constructive algorithms graphs greedy shortest paths sortings
strange array data structures greedy sortings
game with cards binary search constructive algorithms data structures dp greedy implementation
pricefixed binary search greedy implementation sortings two pointers
stable groups greedy sortings
love song dp implementation strings
contest start combinatorics geometry greedy math
gift set binary search greedy math ternary search
interesting function binary search dp math number theory
funny substrings data structures hashing implementation matrices strings
another problem about dividing numbers constructive algorithms math number theory
number of pairs binary search data structures math two pointers
friends and candies greedy math
stone game brute force dp greedy
figure fixing constructive algorithms dfs and similar dsu graphs greedy math
erase and extend (hard version) binary search data structures greedy hashing string suffix structures strings two pointers
erase and extend (easy version) binary search brute force dp greedy hashing implementation string suffix structures strings two pointers
deleting divisors games math number theory
challenging cliffs constructive algorithms greedy implementation math
bad boy constructive algorithms greedy math
arithmetic array greedy math
omkar and akmar chinese remainder theorem combinatorics constructive algorithms fft games geometry math meet-in-the-middle string suffix structures
omkar and forest combinatorics graphs math shortest paths
omkar and medians data structures greedy implementation
diluc and kaeya data structures dp hashing number theory
prinzessin der verurteilung brute force constructive algorithms strings
omkar and bad story brute force constructive algorithms
string distance binary search brute force data structures hashing implementation strings
gold transfer binary search data structures dp greedy interactive trees
playoff tournament data structures dfs and similar dp implementation trees
unstable string binary search dp greedy implementation strings two pointers
array reodering brute force greedy math number theory sortings
fair playoff brute force implementation
lost nodes constructive algorithms dp graphs interactive sortings trees
a new beginning data structures dp geometry sortings
falling sand (hard version) dfs and similar dp graphs greedy
falling sand (easy version) dfs and similar graphs greedy
lost array graphs greedy interactive shortest paths
lost tree constructive algorithms interactive trees
little alawn's puzzle combinatorics dp dsu graphs math
histogram ugliness greedy implementation math
colour the flag brute force implementation
pawns *special
excursions *special constructive algorithms dfs and similar flows graph matchings graphs
submatrices *special bitmasks data structures dp
biome map *special constructive algorithms dfs and similar graphs
binary string partition *special binary search greedy
chess team forming *special binary search data structures greedy
string searching *special hashing
sweets *special data structures implementation
nearest point function *special implementation
travel to bertown *special implementation math
prefixes and suffixes *special strings
good array *special
teams forming *special sortings
uniform string *special implementation
frog jumping *special math
a+b (trial problem) *special
сортировка слиянием *special binary search
сортировка слиянием *special *special brute force
сортировка слиянием *special
редактируем зингер | color *special *special
симметричный амфитеатр *special constructive algorithms dp
мониторинг *special
мониторинг *special *special
зингер | color *special implementation
turing's award data structures dp
what a reversal constructive algorithms
bingo bitmasks combinatorics dp math probabilities
minimax constructive algorithms greedy strings
secret santa constructive algorithms flows graphs greedy math
pursuit binary search brute force greedy sortings
putting plates constructive algorithms implementation
binary decimal greedy math
sifid and strange subsequences greedy math sortings
eshag loves big arrays constructive algorithms greedy math
amshz farm combinatorics fft math
mashtali and hagh trees combinatorics dp trees
it's a bird! no, it's a plane! no, it's aaparsa! constructive algorithms graphs shortest paths
trees of tranquillity data structures dfs and similar greedy trees
kavi on pairing duty combinatorics dp math
parsa's humongous tree dfs and similar divide and conquer dp greedy trees
partition game binary search data structures divide and conquer dp
mex tree combinatorics dfs and similar implementation math trees
sequence pair weight hashing implementation math
palindrome game (hard version) constructive algorithms games
palindrome game (easy version) constructive algorithms games
and then there were k bitmasks
median queries constructive algorithms interactive probabilities
oolimry and suffix array combinatorics constructive algorithms math
kill anton brute force constructive algorithms data structures math strings
potions (hard version) data structures greedy
potions (easy version) brute force data structures dp greedy
i hate 1111 dp math number theory
mean inequality constructive algorithms sortings
goblins and gnomes brute force dp flows graph matchings
assimilation iv combinatorics dp math probabilities two pointers
armchairs dp flows graph matchings greedy
robot collisions data structures greedy implementation sortings
permutation sort constructive algorithms greedy
potion-making math number theory
hopping around the array data structures dp
try booking data structures divide and conquer
favorite game bitmasks dp
crypto lights combinatorics dp math probabilities
love-hate bitmasks brute force dp probabilities
compression and expansion brute force data structures greedy implementation trees
lord of the values constructive algorithms
game of life implementation
nastia and a beautiful matrix binary search constructive algorithms dp greedy
nastia plays with a tree constructive algorithms data structures dfs and similar dp dsu greedy implementation trees
nastia and a hidden permutation constructive algorithms interactive
nastia and a good array constructive algorithms math number theory
nastia and nearly good numbers constructive algorithms math number theory
to go or not to go? brute force dfs and similar graphs greedy implementation shortest paths
guess the k-th zero (hard version) binary search constructive algorithms data structures interactive
guess the k-th zero (easy version) binary search interactive
arranging the sheep greedy math
same differences data structures hashing math
not adjacent matrix constructive algorithms
ordinary numbers brute force math number theory
do not be distracted! brute force implementation
chests and keys bitmasks brute force dfs and similar dp flows
off by one constructive algorithms dfs and similar geometry graphs sortings trees
maximum sum of products brute force dp implementation math two pointers
berland regional brute force data structures greedy number theory sortings
the cake is a lie dp math
red and blue beans math
fly around the world dp geometry
starry night camping constructive algorithms flows graphs
reunion combinatorics dp trees
group photo binary search data structures implementation two pointers
explorer space dp graphs shortest paths
fillomino 2 constructive algorithms dfs and similar greedy implementation
morning jogging constructive algorithms greedy sortings
sum of 2050 greedy math
baby ehab plays with permutations combinatorics dp math
cut binary search data structures dp graphs number theory two pointers
baby ehab partitions again bitmasks constructive algorithms dp math
agaga xooorrr bitmasks brute force dp greedy
tit for tat greedy
phoenix and diamonds binary search data structures sortings
phoenix and bits bitmasks brute force data structures sortings
phoenix and odometers dfs and similar graphs math number theory
phoenix and earthquake constructive algorithms dfs and similar dsu graphs greedy trees
phoenix and computers combinatorics dp math
phoenix and socks greedy sortings two pointers
phoenix and towers constructive algorithms data structures greedy
phoenix and puzzle brute force geometry math number theory
phoenix and gold constructive algorithms greedy math
baby ehab's hyper apartment binary search graphs interactive sortings two pointers
cut and stick binary search data structures greedy implementation sortings
product 1 modulo n greedy number theory
and 0, sum big bitmasks combinatorics math
perfectly imperfect array math number theory
swapping problem brute force constructive algorithms data structures sortings
cost equilibrium combinatorics constructive algorithms math sortings
gcd and mst constructive algorithms dsu graphs greedy number theory sortings
add one dp matrices
and sequences bitmasks combinatorics constructive algorithms math
array and peaks constructive algorithms implementation
short task brute force dp math number theory
education brute force dp greedy implementation
permutation by sum brute force greedy math
corrupted array constructive algorithms data structures greedy
a-b palindrome constructive algorithms implementation strings
almost rectangle implementation
spy detected! brute force implementation
chips on a board bitmasks brute force data structures dp games two pointers
chainword brute force data structures dp matrices string suffix structures strings
colorings and dominoes combinatorics dp greedy math
min cost string brute force constructive algorithms graphs greedy strings
yet another card deck brute force data structures implementation trees
gcd length constructive algorithms math number theory
review site greedy
king's task brute force graphs implementation
japanese game constructive algorithms math
is it rated? greedy interactive math probabilities
hard optimization dp
guide
fiber shape
equilibrium point /\textbackslash/\textbackslash
digits dp math number theory
cactus not enough dfs and similar graph matchings graphs
button lock flows graph matchings graphs
ascii automata art
the sports festival dp greedy
tmt document greedy
average height constructive algorithms
optimal encoding brute force data structures
tree calendar brute force constructive algorithms data structures dfs and similar sortings trees
swap pass constructive algorithms geometry sortings
complete the mst bitmasks brute force data structures dfs and similar dsu graphs greedy trees
almost sorted binary search combinatorics constructive algorithms implementation
binary literature constructive algorithms greedy implementation strings two pointers
maximize the remaining string brute force data structures dp greedy strings
triangular paths constructive algorithms graphs math shortest paths sortings
restoring the permutation constructive algorithms implementation
epic transformation constructive algorithms data structures greedy
double-ended strings brute force implementation strings
partial replacement greedy implementation
strange table math
mysterious language again, seriously? *special
l break into program *special
encoded message *special implementation
math *special math
cakewalk *special greedy implementation shortest paths
xenolith? hippodrome? *special number theory
fibonacci words *special implementation
dmca *special implementation number theory
is it rated - 2 *special implementation interactive
flip the bits constructive algorithms greedy implementation math
déjà vu constructive algorithms strings
balance the cards constructive algorithms data structures divide and conquer geometry graphs implementation
2-coloring combinatorics dp math
flip the cards 2-sat constructive algorithms data structures greedy sortings two pointers
travelling salesman problem binary search data structures dp greedy shortest paths sortings two pointers
3-coloring constructive algorithms games interactive
balance the bits constructive algorithms greedy
napoleon cake dp implementation sortings
alexey and train implementation
cupboards jumps dp
subset trick binary search data structures
tiles for bathroom data structures sortings two pointers
matrix sorting bitmasks brute force constructive algorithms greedy two pointers
two chandeliers binary search brute force chinese remainder theorem math number theory
going home brute force hashing implementation math
graph coloring data structures graphs interactive
diameter cuts combinatorics dfs and similar dp trees
chaotic merge combinatorics dp math strings
the number of pairs dp math number theory
minimum grid path brute force data structures greedy math
binary removals brute force dp greedy implementation
domino on windowsill combinatorics constructive algorithms math
christmas game bitmasks data structures dfs and similar dp games math trees
two houses brute force graphs greedy interactive sortings
bananas in a microwave dfs and similar dp graphs implementation
planar reflections brute force data structures dp
box fitting binary search bitmasks data structures greedy
gcd sum brute force math
square-free division (hard version) data structures dp greedy math number theory two pointers
square-free division (easy version) data structures dp greedy math number theory two pointers
genius bitmasks dp graphs number theory
k-lcm (hard version) constructive algorithms math
k-lcm (easy version) constructive algorithms math
m-arrays constructive algorithms greedy math
meximization brute force data structures greedy sortings
max and mex math
split it! brute force constructive algorithms greedy strings
squares constructive algorithms data structures dp graphs trees
qingshan and daniel brute force data structures greedy implementation
bfs trees combinatorics dfs and similar graphs math shortest paths trees
garden of the sun constructive algorithms graphs
let's go hiking games greedy
diamond miner geometry greedy math sortings
delete the edges brute force constructive algorithms dfs and similar graphs implementation
a-z graph constructive algorithms data structures graphs hashing
dogeforces constructive algorithms data structures dfs and similar divide and conquer dsu greedy sortings trees
1d sokoban binary search dp greedy implementation two pointers
berland crossword bitmasks brute force greedy implementation
abc string bitmasks brute force implementation
enchanted matrix bitmasks interactive number theory
enormous xor bitmasks constructive algorithms greedy math strings two pointers
gcd of an array brute force data structures hashing implementation math number theory sortings two pointers
k-beautiful strings binary search brute force constructive algorithms greedy strings
planet lapituletti brute force implementation
anti-knapsack constructive algorithms greedy
almost fault-tolerant database brute force constructive algorithms dfs and similar greedy implementation
genius's gambit bitmasks constructive algorithms greedy math
maximum width binary search data structures dp greedy two pointers
card deck data structures greedy math
three swimmers math
ruler of the zoo brute force data structures
yuezheng ling and dynamic tree data structures trees
switch and flip constructive algorithms graphs math
magnets binary search constructive algorithms interactive
fib-tree brute force dfs and similar divide and conquer number theory trees
zookeeper and the infinite zoo bitmasks constructive algorithms dp greedy math
pekora and trampoline brute force data structures dp greedy implementation
minimal cost brute force math
k-th largest value brute force greedy implementation
old floppy drive binary search data structures math
equalize the array binary search data structures greedy math sortings
accidental victory binary search data structures greedy
permutation transformation dfs and similar divide and conquer implementation
sum of cubes binary search brute force brute force math
balanced remainders brute force constructive algorithms math
dense array greedy math
flower shop *special data structures fft math
demonic invasion *special flows
build from suffixes *special combinatorics data structures
painting numbers *special data structures greedy number theory
dogecoin *special *special binary search data structures
palindromic doubles *special data structures dp
problemsolving marathon *special binary search greedy
two policemen *special binary search brute force math
rbs deletion *special greedy
from zero to y *special math
string counting combinatorics dp fft math
ones dp greedy shortest paths
cheap dinner brute force data structures graphs greedy implementation sortings two pointers
pythagorean triples binary search brute force math number theory
minimum ties brute force constructive algorithms dfs and similar graphs greedy implementation math
cat cycle math number theory
arena implementation sortings
pairs of paths combinatorics data structures dfs and similar dp trees
paired payment binary search brute force constructive algorithms dp flows graphs shortest paths
max median binary search data structures dp
guessing the greatest (hard version) binary search interactive
guessing the greatest (easy version) binary search interactive
eastern exhibition binary search geometry shortest paths sortings
shifting stacks greedy implementation
copy or prefix sum combinatorics data structures dp sortings
move and swap dfs and similar dp greedy trees
multiples and power differences constructive algorithms graphs math number theory
floor and mod binary search brute force math number theory
replace and keep sorted dp implementation math
add and divide brute force greedy math number theory
exam data structures string suffix structures trees
vabank binary search interactive
useful edges graphs shortest paths
skyline photo data structures divide and conquer dp
playlist data structures dsu implementation shortest paths
basic diplomacy brute force constructive algorithms greedy implementation
restore modulo implementation math
prison break math
ab tree dp greedy trees
sorting books data structures dp greedy
ab graph brute force constructive algorithms graphs greedy implementation
fence painting brute force constructive algorithms greedy
new colony brute force greedy implementation
space navigation greedy strings
the great hero greedy implementation sortings
yet another string game games greedy strings
school clubs dp fft math number theory probabilities
odd mineral resource binary search bitmasks brute force data structures probabilities trees
continuous city bitmasks constructive algorithms
painting the array ii constructive algorithms data structures dp greedy implementation
painting the array i constructive algorithms data structures dp greedy implementation
searching local minimum binary search interactive ternary search
nezzar and symmetric array implementation math sortings
nezzar and lucky number brute force dp greedy math
nezzar and colorful balls brute force greedy
nezzar and chocolate bars combinatorics fft math probabilities
nezzar and tournaments data structures greedy
nezzar and hidden permutations constructive algorithms dfs and similar graphs
nezzar and nice beatmap constructive algorithms geometry greedy math sortings
nezzar and binary string data structures greedy
nezzar and board constructive algorithms math number theory
minimum difference data structures hashing sortings two pointers
lanterns binary search data structures dp
pattern matching bitmasks data structures dfs and similar graphs hashing sortings strings
journey dfs and similar dp dsu implementation
longest simple cycle dp graphs greedy
inflation binary search brute force greedy math
k-divisible sum binary search constructive algorithms greedy math
strange beauty dp math number theory sortings
unusual matrix 2-sat brute force constructive algorithms
advertising agency combinatorics math sortings
cleaning the phone binary search dp sortings two pointers
ball in berland combinatorics graphs math
new year's number brute force dp math
odd divisor math number theory
1 2 3 4 ... dp math matrices
what is it? constructive algorithms greedy
cleaning data structures dp greedy math
array destruction brute force constructive algorithms data structures greedy implementation sortings
different divisors binary search constructive algorithms greedy math number theory
puzzle from the future greedy
tiles combinatorics dp fft math
strange set flows math
minimum path graphs shortest paths
program data structures dp implementation strings
no more inversions constructive algorithms math
string lcm brute force math number theory strings
replacing elements greedy implementation math sortings
moving to the capital dfs and similar dp graphs shortest paths
new year's puzzle brute force dp graph matchings greedy sortings
correct placement binary search data structures dp sortings two pointers
even-odd game dp games greedy sortings
long jumps dp graphs
fair division dp greedy math
cards for friends greedy math
strange list brute force greedy implementation math
strange partition greedy math number theory
strange covering divide and conquer
strange permutation binary search combinatorics data structures dp graphs implementation two pointers
strange housing constructive algorithms dfs and similar graph matchings graphs greedy
strange shuffle binary search brute force constructive algorithms interactive
strange definition bitmasks graphs hashing math number theory
strange birthday party binary search dp greedy sortings two pointers
power sockets binary search data structures greedy
a bit similar bitmasks brute force hashing string suffix structures strings two pointers
ceil divisions brute force constructive algorithms math number theory
building a fence dp greedy implementation two pointers
red and blue dp greedy
regular bracket sequence constructive algorithms greedy
waste sorting greedy implementation
similar sets data structures graphs implementation
prime divisors selection binary search greedy math number theory
the robot brute force implementation
road reform dsu graphs greedy
plane tiling geometry implementation math
k and medians constructive algorithms greedy math
hobbits binary search geometry
full turn geometry hashing number theory
four segments greedy
firecrackers binary search sortings
berpizza data structures implementation
bakery data structures dsu
lais data structures dp greedy
distinctive roots in a tree data structures dfs and similar dp trees
sum of paths combinatorics dp math
three bags constructive algorithms greedy
hills and valleys brute force implementation
wizard of orz constructive algorithms greedy math
the riddle of the sphinx binary search data structures data structures interactive
finding satisfactory solutions combinatorics dp graphs greedy math
song of the sirens combinatorics divide and conquer hashing math string suffix structures strings
euclid's nightmare bitmasks dfs and similar dsu graphs greedy math sortings
apollo versus pan bitmasks brute force math
13th labour of heracles data structures greedy sortings trees
canine poetry dp greedy strings
last minute enhancements dp greedy
bovine dilemma brute force geometry math
my beautiful madness data structures trees
max correct set bitmasks dp math
plan of lectures constructive algorithms dfs and similar dsu graphs implementation sortings trees
pairs binary search constructive algorithms greedy two pointers
busy robot implementation
find the array bitmasks constructive algorithms greedy
dungeon binary search math
the treasure of the segments binary search data structures greedy
close tuples (hard version) binary search combinatorics implementation math sortings two pointers
close tuples (easy version) binary search combinatorics math sortings two pointers
add to neighbour and remove greedy math number theory
unique number brute force greedy math
last year's substring dp implementation strings
favorite sequence implementation two pointers
mathematical expression constructive algorithms dp greedy
water level brute force graphs greedy implementation math
divide and summarize binary search brute force data structures divide and conquer implementation sortings
random events dp math probabilities
find the spruce brute force dp implementation
string generation constructive algorithms greedy
move and turn dp math
red-blue shuffle math probabilities
range diameter sum data structures trees
nim shortcuts data structures games
flip and reverse data structures graphs greedy
latin square math matrices
glass half spilled dp
row gcd math number theory
xor-ranges dp greedy
forbidden value data structures dp
string and operations dp greedy
four points brute force constructive algorithms flows geometry greedy implementation math ternary search
sequence and swaps dp greedy sortings
ping-pong constructive algorithms games math
jumps constructive algorithms math
strange functions math number theory
array partition binary search data structures greedy two pointers
number of simple paths combinatorics dfs and similar graphs trees
number into sequence constructive algorithms math number theory
sequence transformation greedy implementation
unique bid auction implementation
special permutation constructive algorithms probabilities
even harder dp
dog snacks binary search dfs and similar dp greedy trees
checkpoints brute force constructive algorithms greedy math probabilities
triangles greedy implementation
suffix operations constructive algorithms implementation
cancel the trains implementation
game on tree data structures dfs and similar greedy trees
divide powers constructive algorithms greedy
two editorials brute force dp greedy sortings two pointers
radio towers combinatorics dp math
two brackets greedy
toy blocks binary search greedy math sortings
robot program math
nullify the matrix constructive algorithms games
bitwise queries (hard version) bitmasks constructive algorithms interactive math
bitwise queries (easy version) bitmasks constructive algorithms interactive math
circle game games geometry math
string equality dp greedy hashing implementation strings
non-substring subsequence dp greedy implementation strings
subtract or divide greedy math
multithreading (hard version) combinatorics implementation math
multithreading (easy version) combinatorics fft math
communism bitmasks dp trees
the struggling contestant constructive algorithms greedy
capitalism constructive algorithms dfs and similar graphs shortest paths
rating compression binary search data structures greedy implementation two pointers
errich-tac-toe (hard version) constructive algorithms math
errich-tac-toe (easy version) constructive algorithms math
balls of steel brute force geometry greedy
avoid trygub constructive algorithms sortings
numbers box greedy math
add candies constructive algorithms math
line distance binary search data structures geometry
long recovery constructive algorithms dfs and similar
frequency problem (hard version) data structures greedy two pointers
frequency problem (easy version) data structures greedy
xor tree binary search bitmasks data structures divide and conquer dp trees
catching cheaters dp strings
knapsack constructive algorithms greedy sortings
elimination greedy math
array rearrangment greedy sortings
finding the vertex brute force dfs and similar dp interactive trees
rectangular polyline constructive algorithms dp geometry
team-building data structures dfs and similar dsu graphs
divide and sum combinatorics math sortings
division brute force math number theory
long permutation brute force math two pointers
the delivery dilemma binary search greedy sortings
saving the city dp greedy math sortings
kids seating constructive algorithms math
differentiating games games interactive
black, white and grey tree binary search constructive algorithms dfs and similar dp greedy trees
sum data structures divide and conquer dp greedy
graph transpositions dfs and similar graphs greedy shortest paths
identify the operations combinatorics data structures dsu greedy implementation
extreme subtraction constructive algorithms dp greedy
sum of medians greedy math
buy the string implementation math
cheat and win bitmasks data structures games trees
inoi final contests combinatorics dp fft
greedy shopping binary search data structures divide and conquer greedy implementation
graph subset problem constructive algorithms data structures graphs
binary table (hard version) constructive algorithms graphs greedy implementation
binary table (easy version) constructive algorithms implementation
olha and igor interactive probabilities trees
yurii can do everything binary search bitmasks brute force constructive algorithms divide and conquer two pointers
powerful ksenia bitmasks constructive algorithms math
engineer artem 2-sat chinese remainder theorem constructive algorithms fft flows
valerii against everyone constructive algorithms data structures greedy sortings
specific tastes of andre constructive algorithms implementation
death dbms data structures string suffix structures strings trees
emotional fishermen combinatorics dp math two pointers
make it increasing binary search constructive algorithms data structures dp implementation
minimal height tree graphs greedy shortest paths trees
chef monocarp dp flows graph matchings greedy math sortings
reverse binary strings constructive algorithms greedy
marketing scheme brute force constructive algorithms greedy math
sum over subsets combinatorics math number theory
complicated computations binary search data structures two pointers
bandit in a city binary search dfs and similar graphs greedy trees
binary search binary search combinatorics
prime square constructive algorithms math
reorder math
a convex game dsu games
reducing delivery cost brute force graphs shortest paths
zero remainder sum dp
two round dances combinatorics math
districts connection constructive algorithms dfs and similar
dominant piranha constructive algorithms greedy
yet another bookshelf greedy implementation
boring apartments implementation math
zero-xor array *special dp
cyclic shifts *special strings
rogue-like game *special brute force greedy two pointers
number deletion game *special dp games greedy
neural network problem *special binary search greedy
chess match *special
used markers *special greedy
black friday *special implementation
polycarp and the language of gods *special implementation two pointers
selling hamburgers *special
yet another dag problem bitmasks dfs and similar dp flows graphs math
realistic gameplay dp greedy
string reversal data structures greedy strings
string deletion binary search data structures greedy two pointers
numbers on whiteboard constructive algorithms data structures greedy implementation math
barrels greedy implementation sortings
number of apartments brute force constructive algorithms math
rotary laser lock binary search interactive
lucky numbers (hard version) dp greedy
lucky numbers (easy version) dp greedy
fruit sequences binary search data structures divide and conquer dp two pointers
carrots for rabbits binary search data structures greedy math sortings
bouncing boomerangs constructive algorithms greedy implementation
abbb brute force data structures greedy strings
belted rooms graphs implementation
box is pull math
prison break binary search games geometry ternary search
one billion shades of grey flows graphs
boring card game data structures greedy trees
xum bitmasks constructive algorithms math matrices number theory
unshuffling a deck constructive algorithms implementation
the hard work of paparazzi dp
chess cheater greedy implementation sortings
avoiding zero math sortings
number of subsequences combinatorics dp strings
rock, paper, scissors brute force constructive algorithms flows greedy math
non-zero segments constructive algorithms data structures greedy sortings
increase and copy binary search constructive algorithms math
symmetric matrix implementation
floor number implementation math
impressive harvesting of the orchard data structures
huge boxes of animal toys constructive algorithms
flamingoes of mystery interactive
excitation of atoms greedy implementation
danger of mad snakes combinatorics dp math
captain of knights math
blue and red of our faculty! divide and conquer dp
arena of greed games greedy
ancient language graphs sortings
years data structures sortings
bubblesquare tokens
milutin's plums interactive
light switches meet-in-the-middle
lonely numbers binary search math number theory two pointers
bubble cup hypothesis bitmasks constructive algorithms dp math
lookup tables bitmasks
virus data structures divide and conquer dsu graphs
growing flowers data structures
coins math
5g antenna towers geometry
does anyone else hate the wind?
dušan's railway divide and conquer graphs trees
valuable paper binary search flows graph matchings graphs
wakanda forever
boring queries data structures math number theory
minlexes dp greedy implementation strings
returning home graphs shortest paths sortings
bargain combinatorics dp math
nice matrix greedy implementation math
fence geometry math
swedish heroes brute force dp implementation
hexagons brute force constructive algorithms greedy implementation math shortest paths
palindromifier constructive algorithms strings
putting bricks in the wall constructive algorithms implementation
xorwice bitmasks greedy math
battle lemmings dp greedy
rescue nibel! combinatorics data structures sortings
pokémon army (hard version) data structures divide and conquer dp greedy implementation
pokémon army (easy version) constructive algorithms dp greedy
rock and lever bitmasks math
cubes sorting math sortings
rain of fire binary search data structures dfs and similar dsu graphs implementation
decryption constructive algorithms implementation math number theory
sage's birthday (hard version) binary search brute force constructive algorithms greedy sortings two pointers
sage's birthday (easy version) binary search constructive algorithms greedy sortings
killjoy greedy implementation math
stairs brute force constructive algorithms greedy implementation math
digit game games greedy implementation
three occurrences data structures divide and conquer hashing two pointers
equal product data structures math number theory two pointers
expected damage binary search combinatorics probabilities
trash problem data structures implementation
mortal kombat tower dp graphs greedy shortest paths
negative prefixes greedy sortings
buying torches math
two arrays greedy math sortings
copy-paste greedy math
showing off flows graph matchings greedy implementation
split binary search data structures dp greedy
graph and queries data structures dsu graphs implementation trees
xor inverse bitmasks data structures divide and conquer dp greedy math sortings strings trees
make them equal constructive algorithms greedy math
k-amazing numbers binary search data structures implementation two pointers
cakes for clones dp
new game plus! constructive algorithms greedy math
xor-gun bitmasks brute force constructive algorithms
bouncing ball brute force dp implementation
repainting street brute force brute force greedy
prison break brute force math
roads and ramen data structures trees
solo mid oracle greedy math ternary search
shurikens data structures greedy implementation
perform easily binary search brute force dp implementation sortings two pointers
a new technique implementation
finding sasuke constructive algorithms math
no game no life bitmasks games math matrices
the thorny path greedy math
poman numbers bitmasks greedy math strings
grime zoo brute force greedy implementation strings
peaceful rooks dfs and similar dsu graphs
fair numbers brute force number theory
in-game chat implementation
subsequences of length two dp strings
two platforms binary search dp sortings two pointers
decrease the sum of digits greedy math
yet another array restoration brute force math number theory
minimum product brute force greedy math
yet another two integers problem greedy math
bitwise magic dp math
rainbow triples binary search data structures flows greedy
clusterization counting combinatorics dp dsu fft graphs trees
two different constructive algorithms divide and conquer
avoid rainbow cycles data structures dsu graphs greedy sortings trees
searchlights binary search brute force data structures dp implementation sortings two pointers
discrete acceleration binary search dp implementation math two pointers
arrays sum constructive algorithms greedy math
circle coloring constructive algorithms
egor in the republic of dagestan constructive algorithms dfs and similar dp graphs greedy shortest paths
discrete centrifugal jumps data structures dp graphs
chocolate bunny constructive algorithms interactive math two pointers
big vova brute force greedy math number theory
ahahahahahahahaha constructive algorithms math
deleting numbers interactive math number theory
three sequences constructive algorithms data structures greedy math
link cut centroids constructive algorithms dfs and similar graphs trees
maximum product brute force dp greedy implementation sortings
subset mex greedy implementation math
array cancellation constructive algorithms implementation
permutation forgery constructive algorithms
bricks flows graph matchings graphs
game of pairs constructive algorithms dfs and similar interactive math number theory
fixed point removal binary search constructive algorithms data structures greedy two pointers
tree tag dfs and similar dp games trees
balanced bitstring implementation strings
chess rush *special combinatorics dp implementation math
spring cleaning *special data structures dfs and similar graphs trees
the potion of great power *special 2-sat binary search data structures graphs interactive sortings two pointers
star trek *special combinatorics dfs and similar dp games graphs matrices trees
roads *special geometry sortings
fancy fence *special data structures dsu implementation math sortings
reverse and swap binary search bitmasks data structures
divide square data structures geometry implementation sortings
maximum distributed tree dfs and similar dp greedy implementation math number theory sortings trees
mere array constructive algorithms math number theory sortings
ternary sequence constructive algorithms greedy math
distance and axis constructive algorithms math
mercenaries bitmasks brute force combinatorics dp dsu math two pointers
x-prime substrings brute force dfs and similar dp string suffix structures strings
clear the multiset data structures divide and conquer dp greedy
zigzags brute force combinatorics data structures math two pointers
binary string reconstruction 2-sat brute force constructive algorithms greedy
rpg protagonist brute force greedy math
string similarity constructive algorithms strings
yet another segments subset data structures dp graphs sortings
weights division (hard version) binary search dfs and similar greedy sortings trees two pointers
weights division (easy version) data structures dfs and similar greedy trees
binary string to subsequences constructive algorithms data structures greedy implementation
boats competition brute force greedy two pointers
gifts fixing greedy
remove smallest greedy sortings
running competition bitmasks fft math number theory
controversial rounds binary search data structures dp greedy two pointers
two types of spells binary search data structures greedy implementation math sortings
colored rectangles dp greedy sortings
good subarrays data structures dp math
substring removal game games greedy sortings
bad triangle geometry math
power sequence brute force math number theory sortings
juggling letters greedy strings
distance matching constructive algorithms dfs and similar trees
rainbow rectangles data structures sortings two pointers
monster invaders dp greedy implementation
stoned game brute force constructive algorithms games greedy
multiples of length constructive algorithms greedy number theory
boboniu and bit operations bitmasks brute force dp greedy
boboniu plays chess constructive algorithms
boboniu likes to color balls brute force math
boboniu and banknote collection strings
boboniu and jianghu dp greedy sortings trees
boboniu and string binary search geometry ternary search
boboniu walks on graph brute force dfs and similar graphs hashing
boboniu chats with du dp greedy sortings two pointers
twilight and ancient scroll (harder version) dp hashing implementation string suffix structures strings two pointers
twilight and ancient scroll (easier version) dp hashing implementation string suffix structures strings
rarity and new dress dfs and similar dp implementation shortest paths
pinkie pie eats patty-cakes constructive algorithms greedy math sortings
applejack and storages constructive algorithms data structures greedy implementation
rainbow dash, fluttershy and chess coloring greedy math
kevin and grid fft graphs math
zs shuffles cards combinatorics dp math probabilities
omkar and pies bitmasks dfs and similar dp math shortest paths
omkar and landslide binary search constructive algorithms data structures greedy math
omkar and duck bitmasks constructive algorithms interactive math
omkar and bed wars dp greedy
omkar and waterslide greedy implementation
omkar and infinity clock implementation math
omkar and password greedy math
pairs of pairs constructive algorithms dfs and similar graphs greedy trees
505 bitmasks brute force constructive algorithms dp greedy implementation
cyclic permutations combinatorics dp graphs math
fix you brute force greedy implementation
suborrays constructive algorithms math
directing edges dfs and similar dp graphs trees
bicolored segments data structures dp graph matchings sortings
calendar ambiguity math number theory
segment intersections brute force greedy implementation math
good string brute force dp greedy two pointers
array walk brute force dp greedy
lcm problem constructive algorithms greedy math number theory
uncle bogdan and projections data structures geometry sortings
captain flint and treasure data structures dfs and similar graphs greedy implementation trees
uncle bogdan and country happiness dfs and similar greedy math trees
captain flint and a long voyage greedy math
captain flint and crew recruitment brute force greedy math number theory
viruses *special dp shortest paths string suffix structures
village (maximum) *special dfs and similar trees
village (minimum) *special dp greedy trees
graph *special binary search dfs and similar dp math ternary search
joker *special bitmasks data structures divide and conquer dsu
mixture *special data structures geometry math sortings
colors *special binary search constructive algorithms interactive
columns swaps 2-sat dfs and similar dsu graphs implementation
removing leaves data structures greedy implementation trees
directing edges constructive algorithms dfs and similar graphs
a-good string bitmasks brute force divide and conquer dp implementation
make it good greedy
restore the permutation by merger greedy
three pairwise maximums math
koa and the beach (hard version) constructive algorithms dp greedy implementation
koa and the beach (easy version) brute force dp greedy
common prefixes constructive algorithms greedy strings
special edges flows graphs
strange operation combinatorics data structures dp
rearrange brute force constructive algorithms graphs greedy sortings
string transformation 2 bitmasks dp graphs trees
gamegame bitmasks constructive algorithms dp games greedy math
string transformation 1 dsu graphs greedy sortings strings trees two pointers
sequential nim dp games
common subsequence brute force
origami geometry math sortings
the majestic brown tree snake dfs and similar dp greedy trees two pointers
mastermind constructive algorithms graph matchings greedy implementation sortings two pointers
unmerge dp
prefix flip (hard version) constructive algorithms data structures implementation strings two pointers
prefix flip (easy version) constructive algorithms data structures strings
circular dungeon greedy math probabilities
strange addition data structures dp matrices
merging towers data structures dsu implementation trees
berserk and fireball constructive algorithms greedy implementation math two pointers
create the teams brute force dp greedy implementation sortings
universal solution greedy
three indices brute force data structures
chess strikes back (hard version) data structures divide and conquer
chess strikes back (easy version) binary search data structures
inverse genealogy constructive algorithms divide and conquer dp math trees
new passenger trams binary search brute force data structures sortings two pointers
choosing flowers binary search brute force data structures dfs and similar dp greedy sortings two pointers
dubious cyrpto binary search brute force math number theory
acacius and string brute force implementation strings
cubic lattice geometry math matrices number theory
set merging constructive algorithms divide and conquer
tree modification brute force constructive algorithms dfs and similar graph matchings graphs trees
integer game constructive algorithms games interactive math
inversion swapsort constructive algorithms greedy sortings
replace by mex brute force constructive algorithms sortings
element extermination constructive algorithms data structures greedy
neighbor grid constructive algorithms greedy
sign flipping constructive algorithms math
cyclic shifts sorting brute force constructive algorithms implementation sortings
reading books (hard version) data structures greedy implementation sortings ternary search two pointers
reading books (easy version) data structures greedy sortings
zero remainder array math sortings two pointers
move brackets greedy strings
multiply by 2, divide by 6 math
required remainder math
pawns data structures divide and conquer greedy
network coverage binary search constructive algorithms data structures greedy
sum of digits brute force constructive algorithms dp greedy
maximum sum on even positions divide and conquer dp greedy implementation
pluses and minuses math
01 game games
donut shops greedy implementation math
omkar and modes binary search divide and conquer interactive
omkar and last floor dp greedy two pointers
omkar and circle brute force dp games greedy
omkar and baseball constructive algorithms math
omkar and last class of math greedy math number theory
omkar and completion constructive algorithms implementation
raging thunder data structures divide and conquer implementation
asterism (hard version) binary search combinatorics dp math number theory sortings
asterism (easy version) binary search brute force combinatorics math number theory sortings
grid-00100 constructive algorithms greedy implementation
a cookie for you greedy implementation math
magical calendar math
magical sticks math
the hidden pair (hard version) binary search dfs and similar graphs interactive shortest paths trees
the hidden pair (easy version) binary search dfs and similar graphs interactive shortest paths trees
binary subsequence rotation binary search constructive algorithms data structures greedy
odd-even subsequence binary search dp dsu greedy implementation
number game games math number theory
gcd compression constructive algorithms math number theory
maximum gcd greedy implementation math number theory
barelee dfs and similar dp games
deadlee data structures dfs and similar greedy implementation sortings
tediouslee dp graphs greedy math trees
rationallee greedy math sortings two pointers
accuratelee greedy implementation strings
fashionablee geometry math
breadboard capacity (hard version)
breadboard capacity (easy version) dp flows greedy
shifting dominoes data structures geometry graphs trees
lamps on a circle games implementation interactive math
ski accidents constructive algorithms graphs greedy
and, or and square sum bitmasks greedy math
even picture constructive algorithms
codeforces subsequences brute force constructive algorithms greedy math strings
c+= brute force greedy implementation math
flying sort (hard version) binary search data structures dp greedy sortings two pointers
flying sort (easy version) dp greedy two pointers
necklace assembly brute force dfs and similar dp graphs greedy number theory
task on the board constructive algorithms greedy implementation sortings
social distance constructive algorithms greedy math
even array greedy math
short substrings implementation strings
construct the string data structures dp strings
jog around the graph binary search dp geometry graphs
two arrays binary search brute force combinatorics constructive algorithms dp two pointers
two divisors constructive algorithms math number theory
palindromic paths greedy math
shuffle math two pointers
shovels and swords binary search greedy math
secure password bitmasks combinatorics constructive algorithms interactive math
swaps again constructive algorithms implementation sortings
maximum subsequence value brute force constructive algorithms
solve the maze constructive algorithms dfs and similar dsu graphs greedy implementation shortest paths
rotation matching constructive algorithms data structures greedy implementation
trouble sort constructive algorithms implementation
matrix game games greedy implementation
x-or bitmasks constructive algorithms divide and conquer interactive probabilities
ehab's last corollary constructive algorithms dfs and similar graphs greedy implementation trees
ehab and prefix mexs brute force constructive algorithms greedy
most socially-distanced subsequence greedy two pointers
xxxxx brute force data structures number theory two pointers
rotating substrings dp strings
tree shuffling dfs and similar dp greedy trees
guess the maximums binary search implementation interactive math
game on leaves games trees
subsequence hate implementation strings
odd selection brute force implementation math
johnny and another rating drop bitmasks greedy math
johnny and his hobbies bitmasks brute force
johnny and ancient computer implementation
johnny and new toy data structures implementation math
james and the chase dfs and similar graphs probabilities trees
johnny and james greedy implementation math trees
johnny and megan's necklace binary search bitmasks constructive algorithms dfs and similar dsu graphs
johnny and grandmaster greedy implementation math sortings
johnny and contribution constructive algorithms graphs greedy sortings
binary median binary search bitmasks brute force constructive algorithms
a/b matrix constructive algorithms greedy math
spy-string bitmasks brute force constructive algorithms dp hashing strings
polygon dp graphs implementation shortest paths
buying shovels math number theory
similar pairs constructive algorithms graph matchings greedy sortings
honest coach greedy sortings
minimal square greedy math
rc kaboom show binary search brute force data structures geometry math
modular stability combinatorics math number theory
yet another yet another task data structures dp implementation two pointers
mixing water binary search math
new theatre square brute force dp greedy implementation two pointers
berland poker brute force greedy math
tasty cookie binary search constructive algorithms greedy implementation
are you fired? constructive algorithms data structures greedy implementation
the best vacation binary search brute force greedy implementation two pointers
celex update math
maria breaks the self-isolation greedy sortings
park lighting greedy math
root of quantum fourier transform
power of quantum fourier transform
quantum classification - dataset 7
quantum classification - dataset 6
quantum classification - dataset 5
quantum classification - dataset 4
quantum classification - dataset 3
prepare superposition of basis states with the same parity
prepare superposition of basis states with 0s
"is the number divisible by 3?" oracle
"is the bit string balanced?" oracle
distinguish y, xz, -y and -xz
distinguish four pauli gates
distinguish rz(θ) from ry(θ)
distinguish rz from r1
distinguish h from x
distinguish i, cnots and swap
figure out direction of cnot
quantum classification - 2 *special
quantum classification - 1 *special
prepare state |01⟩ + |10⟩ + |11⟩ *special
decrement *special
increment *special
distinguish z from -z *special
distinguish i ⊗ x from cnot *special
distinguish z from s *special
distinguish i from z *special
distinguish i from x *special
guess divisors count constructive algorithms interactive number theory
restorer distance binary search greedy math sortings ternary search
game with array constructive algorithms math
count triangles binary search implementation math two pointers
young explorers dp greedy sortings
sequence with digits brute force implementation math
find a gift binary search interactive probabilities
summoning minions constructive algorithms dp flows graph matchings greedy sortings
graph coloring dfs and similar dp graphs
multiset binary search data structures
not so simple polygon embedding binary search brute force geometry math
simple polygon embedding binary search geometry math ternary search
ternary string binary search dp implementation two pointers
alarm clock math
decreasing heights brute force dp
k-periodic garland brute force dp greedy
constructing the array constructive algorithms data structures sortings
board moves math
two arrays and swaps greedy sortings
most unstable array constructive algorithms greedy math
special permutation constructive algorithms
binary string reconstruction constructive algorithms dfs and similar math
special elements brute force implementation two pointers
alice, bob and candies implementation
k-th not divisible by n binary search math
same parity summands constructive algorithms math
sum of round numbers implementation math
skier data structures implementation
square? brute force implementation math
a+b (trial problem) implementation
orac and models dp math number theory
orac and factors math
slime and sequences (hard version) dp fft math
slime and sequences (easy version) dp fft math
slime and hats constructive algorithms dp greedy
slime and biscuits math probabilities
orac and game of life dfs and similar graphs implementation shortest paths
orac and medians constructive algorithms greedy math
orac and lcm data structures math number theory
phoenix and memory data structures dfs and similar graphs greedy
phoenix and berries brute force dp greedy math
phoenix and science binary search constructive algorithms greedy implementation math
phoenix and distribution constructive algorithms greedy sortings strings
phoenix and beauty constructive algorithms data structures greedy sortings
phoenix and balance greedy math
pac-man 2.0 *special dp
game with segments *special data structures games
two ip cameras *special math number theory
dune ii: battle for arrakis *special data structures greedy math
magic tricks *special dp graphs
constructing the dungeon *special graphs greedy
spring cleaning *special greedy sortings
boot camp *special greedy
color revolution *special math
card constructions binary search brute force dp math
puzzle pieces math
piet's palette matrices
train tracks data structures trees
résumé review binary search greedy math
quantifier question dfs and similar dp graphs math
monopole magnets constructive algorithms dfs and similar dsu graphs
hilbert's hotel math number theory sortings
restore the permutation by sorted segments brute force constructive algorithms data structures greedy implementation
weights distributing brute force graphs greedy shortest paths sortings
constant palindrome sum brute force data structures greedy two pointers
alternating subsequence dp greedy two pointers
balanced array constructive algorithms math
candies brute force math
make it ascending bitmasks brute force dp
placing rooks combinatorics fft math
multiple testcases binary search constructive algorithms data structures greedy sortings two pointers
yet another counting problem math number theory
binary period constructive algorithms strings
road to zero greedy math
nastya and door greedy implementation
nastya and rice math
nastya and cbs brute force data structures hashing
nastya and bees graphs interactive probabilities
nastya and time machine constructive algorithms dfs and similar graphs trees
nastya and unexpected guest dfs and similar dp graphs shortest paths
nastya and scoreboard bitmasks dp graphs greedy
nastya and strange generator brute force data structures greedy implementation
sorted adjacent differences constructive algorithms sortings
filling diamonds brute force dp implementation math
jypnation graphs
nested rubber bands constructive algorithms dfs and similar dp math trees
perfect triples bitmasks brute force constructive algorithms divide and conquer math
edge weight assignment bitmasks constructive algorithms dfs and similar greedy math trees
powered addition greedy math
kana and dragon quest game greedy implementation math
ichihime and triangle constructive algorithms math
journey data structures divide and conquer graphs trees
chiori and doll picking (hard version) bitmasks brute force combinatorics math
chiori and doll picking (easy version) bitmasks brute force combinatorics math
yui and mahjong set constructive algorithms interactive
kaavi and magic spell dp strings
xenia and colorful gems binary search greedy math sortings two pointers
linova and kingdom dfs and similar dp greedy sortings trees
robots on a grid data structures dfs and similar dsu graphs greedy matrices
three blocks palindrome (hard version) brute force data structures dp two pointers
three blocks palindrome (easy version) binary search brute force data structures dp two pointers
anti-sudoku constructive algorithms implementation
two teams composing binary search greedy implementation sortings
construct the string constructive algorithms
candies and two sisters math
substring search bitmasks brute force fft
strange function binary search data structures dp greedy
divisor paths combinatorics graphs greedy math number theory
minimum euler cycle constructive algorithms graphs greedy implementation
circle of monsters brute force constructive algorithms greedy math
middle class greedy sortings
level statistics implementation math
kate and imperfection greedy implementation math number theory sortings two pointers
road to 1600 brute force constructive algorithms
challenges in school №41 brute force constructive algorithms games graphs greedy implementation sortings
eugene and an array binary search data structures implementation two pointers
kind anton greedy implementation
little artem constructive algorithms
no monotone triples data structures
independent set dfs and similar dp trees
height all the same combinatorics constructive algorithms math matrices
walk on matrix bitmasks constructive algorithms math
k-complete word dfs and similar dsu greedy implementation strings
composite coloring brute force constructive algorithms greedy math number theory
exercising walk greedy implementation math
it's showtime *special
lingua romana *special
elementary! *special brute force dp strings
jordan smiley *special dfs and similar geometry implementation
again? *special implementation
...and after happily lived ever they *special bitmasks
limericks *special math number theory
is it rated? *special
dreamoon likes permutations implementation math
dreamoon and ranking collection implementation
dreamoon loves aa binary search greedy
dreamoon likes strings constructive algorithms data structures
drazil likes heap constructive algorithms data structures greedy implementation
dreamoon likes sequences bitmasks combinatorics math
dreamoon likes coloring constructive algorithms greedy implementation math
make k equal greedy
tree queries dfs and similar graphs trees
carousel constructive algorithms dp graphs greedy math
ternary xor greedy implementation
k-th beautiful string binary search brute force combinatorics implementation math
divisibility problem math
letters and question marks bitmasks dp string suffix structures
and segments bitmasks combinatorics data structures dp two pointers
count the blocks combinatorics dp math
infinite path brute force dfs and similar graphs math number theory
game with chips constructive algorithms implementation
princesses and princes brute force graphs greedy
sum of odd integers math
spiderweb trees dp geometry trees
wise men (hard version) bitmasks dp math
wise men (easy version) bitmasks brute force dp meet-in-the-middle
bombs data structures two pointers
prefix-suffix palindrome (hard version) binary search greedy hashing string suffix structures strings
prefix-suffix palindrome (easy version) hashing string suffix structures strings
permutation partitions combinatorics greedy math
maximums implementation math
bad ugly numbers constructive algorithms number theory
ehab's last theorem constructive algorithms dfs and similar graphs greedy
ehab's real number theory problem brute force dfs and similar graphs number theory shortest paths
ehab the xorcist bitmasks constructive algorithms greedy number theory
ehab and path-etic mexs constructive algorithms dfs and similar greedy trees
copycopycopycopycopy greedy implementation
ehab and gcd constructive algorithms greedy number theory
maximum white subtree dfs and similar dp graphs trees
sleeping schedule dp implementation
pair of topics binary search data structures sortings two pointers
frog jumps binary search data structures dfs and similar greedy implementation
yet another palindrome problem brute force strings
yet another tetris problem implementation number theory
count subrectangles binary search greedy implementation
even subset sum problem brute force dp greedy implementation
assigning fares dp trees
median mountain range data structures
reality show bitmasks dp
instant noodles graphs hashing math number theory
present binary search bitmasks constructive algorithms data structures math sortings
unusual competitions greedy
remove adjacent brute force constructive algorithms greedy strings
contest for robots greedy
blocks and sensors brute force
treeland and viruses data structures dfs and similar dp shortest paths trees
reachable strings data structures hashing strings
world of darkraft: battle for azathoth brute force data structures sortings
navigation system dfs and similar graphs shortest paths
journey planning data structures dp greedy math sortings
battalion strength data structures divide and conquer probabilities
team building bitmasks dp greedy sortings
nash matrix constructive algorithms dfs and similar graphs implementation
primitive primes constructive algorithms math ternary search
string modification brute force constructive algorithms implementation sortings strings
grade allocation implementation
restoring permutation greedy
homecoming binary search dp greedy strings
dead pixel implementation
concatenation with intersection data structures hashing strings two pointers
happy new year bitmasks dp implementation
skyscrapers (hard version) data structures dp greedy
skyscrapers (easy version) brute force data structures dp greedy
different rules constructive algorithms greedy implementation math
fast food restaurant brute force greedy implementation
autocompletion data structures dfs and similar dp
attack on red kingdom games two pointers
array shrinking dp greedy
count the arrays combinatorics math
adding powers bitmasks greedy implementation math number theory ternary search
bogosort constructive algorithms sortings
two regular polygons geometry greedy math number theory
moving points data structures divide and conquer implementation sortings
construct the binary tree brute force constructive algorithms trees
three integers brute force math
perform the combo brute force
weirdsort dfs and similar sortings
add odd or subtract even greedy implementation math
bad cryptography math number theory
strange function dp
tourism dp graphs probabilities
au pont rouge binary search dp strings
double elimination dp implementation
recommendations data structures greedy sortings
cow and exercise flows graphs shortest paths
cow and vacation dfs and similar dsu trees
cow and treats binary search combinatorics dp greedy implementation math
cow and fields binary search data structures dfs and similar graphs greedy shortest paths sortings
cow and message brute force dp math strings
cow and friend geometry greedy math
cow and haybales greedy implementation
kuroni the private tutor binary search greedy
kuroni and antihype bitmasks brute force dp dsu graphs
kuroni and the punishment math number theory probabilities
kuroni and the score distribution constructive algorithms greedy implementation math
kuroni and the celebration constructive algorithms dfs and similar interactive trees
kuroni and impossible calculation brute force combinatorics math number theory
kuroni and simple strings constructive algorithms greedy strings two pointers
kuroni and the gifts brute force constructive algorithms greedy sortings
animal observation (hard version) data structures dp greedy
animal observation (easy version) data structures dp
1-trees and queries data structures dfs and similar shortest paths trees
shortest and longest lis constructive algorithms graphs greedy two pointers
air conditioner dp greedy implementation sortings two pointers
longest palindrome brute force constructive algorithms greedy implementation strings
two rabbits math
sum of prefix sums data structures divide and conquer geometry trees
number of components dsu implementation
erase subsequences dp strings
fill the bag bitmasks greedy
perfect keyboard dfs and similar greedy implementation
national project math
erasing zeroes implementation strings
keep talking and nobody explodes -- hard
deja vu
who needs suffix structures?
keep talking and nobody explodes -- medium
keep talking and nobody explodes -- easy bitmasks brute force expression parsing
amazing bitset
dijkstra
segment tree or fenwick? data structures
dag constructive algorithms
nash equilibrium
super jaber dfs and similar graphs implementation shortest paths
nanosoft binary search data structures dp implementation
time to run constructive algorithms graphs implementation
ayoub's function binary search combinatorics greedy math strings
motarack's birthday binary search greedy ternary search
three strings implementation strings
assigning to classes greedy implementation sortings
non-zero implementation math
so mean interactive math
around the world bitmasks combinatorics dfs and similar dp graphs graphs math trees
water balance data structures geometry greedy
aerodynamic geometry
anu has a function brute force greedy math
falling blocks *special data structures
paint the string *special dp strings
m-numbers *special dp math
movie fan *special data structures greedy implementation sortings
modernization of treeland *special dfs and similar trees
bonus distribution *special binary search greedy sortings
dream team *special greedy
cartoons *special implementation sortings
likes display *special implementation
berland beauty constructive algorithms dfs and similar greedy sortings trees
string coloring (hard version) data structures dp
string coloring (easy version) constructive algorithms dp graphs greedy sortings
fight with monsters greedy sortings
yet another walking robot data structures implementation
food buying math
array with odd sum math
good contest combinatorics dp probabilities
permutation separation data structures divide and conquer
same gcds math number theory
obtain the string dp greedy strings
infinite prefixes math strings
display the number greedy
three paths on a tree dfs and similar dp greedy trees
obtain a permutation greedy implementation math
mex maximizing data structures greedy implementation math
product of three numbers greedy math number theory
collecting packages implementation sortings
collecting coins math
joe is on tv! combinatorics greedy math
conner and the a.r.c. markland-n binary search brute force implementation
nora's toy boxes bitmasks combinatorics dp
rin and the unknown flower constructive algorithms greedy interactive math
chaotic v. dp graphs greedy math number theory trees
xenon's attack on the gangs combinatorics dfs and similar dp greedy trees
aroma's search brute force constructive algorithms geometry greedy implementation
neko's maze game data structures dsu implementation
coffee varieties (easy version) graphs interactive
array sharpening greedy implementation
even but not even greedy math strings
making shapes dp
cartesian tree data structures
coffee varieties (hard version) constructive algorithms graphs interactive
prefix enlightenment dfs and similar dsu graphs
irreducible anagrams binary search constructive algorithms data structures strings two pointers
mind control brute force data structures implementation
red-blue graph constructive algorithms flows
messenger simulator data structures
minimax problem binary search bitmasks dp
two arrays combinatorics dp
yet another meme problem math
deadline binary search brute force math ternary search
hyperset brute force data structures implementation
angry students greedy implementation
harry the potter brute force constructive algorithms dp fft implementation math
fedya the potter strikes back data structures strings
lcc data structures math matrices probabilities
madhouse (hard version) brute force constructive algorithms hashing interactive math
madhouse (easy version) brute force constructive algorithms interactive math
numbers on tree constructive algorithms data structures dfs and similar graphs greedy trees
garland dp greedy sortings
classical? binary search combinatorics number theory
delete a segment brute force constructive algorithms data structures dp graphs sortings trees two pointers
dr. evil underscores bitmasks brute force dfs and similar divide and conquer dp greedy strings trees
fadi and lcm brute force math number theory
just eat it! dp greedy implementation
mezo playing zoma math
seollal graphs
new year and social network data structures graph matchings graphs math trees
new year and castle construction combinatorics geometry math sortings
new year and conference binary search data structures hashing sortings
new year and permutation combinatorics math
new year and ascent sequence binary search combinatorics data structures dp implementation sortings
new year and naming implementation strings
diy garland constructive algorithms greedy trees
new year parties dp greedy
christmas trees graphs greedy shortest paths
friends and gifts constructive algorithms data structures math
candies division math
minutes before the new year math
the cake is a lie constructive algorithms data structures dfs and similar graphs
enchanted artifact constructive algorithms interactive strings
petya and exam greedy sortings two pointers
k for the price of one (hard version) dp greedy sortings
k for the price of one (easy version) dp greedy sortings
temporarily unavailable implementation math
azamon web services greedy
suffix three implementation
intergalactic sliding puzzle combinatorics constructive algorithms math
kirchhoff's current loss math
miss punyverse dp greedy trees
jeremy bearimy dfs and similar graphs greedy trees
beingawesomeism implementation math
cut and paste implementation math
new year and handle change binary search dp
new year permutations combinatorics dp
santa's bot combinatorics math probabilities
stack of presents data structures implementation
verse for santa binary search brute force implementation
new year garland math
cards combinatorics dp math number theory probabilities
tests for problem d constructive algorithms dfs and similar divide and conquer trees
segment tree data structures dsu graphs trees
berry jam data structures dp greedy implementation
a and b greedy math
shuffle hashing brute force implementation strings
let's play the words? data structures hashing implementation math
make them odd greedy number theory
happy birthday, polycarp! implementation
asterisk substrings string suffix structures
four stones constructive algorithms
tree elimination dp trees
beautiful rectangle brute force combinatorics constructive algorithms data structures greedy math
two fairs combinatorics dfs and similar dsu graphs
as simple as one and two dp greedy
шардирование постов *special binary search interactive
контрольная сумма *special
контрольная сумма *special
контрольная сумма *special
storage2 *special
#define задача b ... *special
code review *special
скрытый друг *special
two bracket sequences dp strings two pointers
nearest opposite parity dfs and similar graphs shortest paths
remove one element brute force dp
yet another broken keyboard combinatorics dp implementation
snow walking robot constructive algorithms greedy implementation
three friends brute force greedy math sortings
divide the students brute force
common number binary search combinatorics dp math
portals data structures dp greedy implementation sortings
shawarma tent brute force geometry greedy implementation
blocks greedy math
suits brute force greedy math
xor on figures constructive algorithms fft math
number of components data structures
subset with zero sum constructive algorithms dfs and similar graphs math
awesome substrings math strings
divide points constructive algorithms geometry math
strange device constructive algorithms interactive math sortings
make good bitmasks constructive algorithms math
interesting subarray constructive algorithms greedy math
card game games greedy math
modulo equality brute force sortings
equation brute force math
happy cactus dp
invertation in tournament brute force divide and conquer graphs math
k integers binary search data structures
domino for young dp greedy math
long beautiful integer constructive algorithms greedy implementation strings
lexicography constructive algorithms strings
key storage combinatorics math
just arrange the icons greedy implementation math
intriguing selection brute force constructive algorithms implementation interactive sortings
help berline constructive algorithms
game relics math probabilities
foolprüf security graphs
elections greedy
devops best practices constructive algorithms
cactus revenge constructive algorithms
balls of buma
apprentice learning trajectory
red-blue graph dp graphs math matrices meet-in-the-middle
permutation concatenation string suffix structures
almost same distance dfs and similar graphs
spaceship solitaire data structures greedy implementation
decreasing debts constructive algorithms data structures graphs greedy implementation math two pointers
diverse matrix constructive algorithms greedy math number theory
dice tower constructive algorithms math
competitive programmer chinese remainder theorem math
beautiful mirrors data structures dp math probabilities
beautiful numbers data structures implementation math two pointers
beautiful string constructive algorithms greedy
beautiful fibonacci problem constructive algorithms number theory
beautiful league constructive algorithms flows graph matchings
beautiful bracket sequence (hard version) combinatorics probabilities
beautiful bracket sequence (easy version) combinatorics dp probabilities
beautiful mirrors with queries data structures probabilities
beautiful sequence brute force constructive algorithms greedy
beautiful regional contest greedy implementation
economic difficulties data structures dfs and similar dp flows graphs trees
editor data structures implementation
secret passwords dfs and similar dsu graphs
everyone is a winner! binary search math meet-in-the-middle number theory
pin codes greedy implementation
sweet problem math
xor-set bitmasks divide and conquer math
colored tree data structures trees
tournament brute force dp greedy
a game with traps binary search dp greedy sortings
infinite fence greedy math number theory
obtain two zeroes binary search math
heating math
divisor set divide and conquer fft greedy math number theory
make them similar bitmasks brute force hashing meet-in-the-middle
the contest data structures dp greedy
yet another monster killing problem binary search data structures dp greedy sortings two pointers
dominated subarray greedy implementation sortings strings two pointers
magic stick math
two rival students greedy math
equalizing two strings constructive algorithms sortings strings
yet another division into teams dp greedy sortings
binary string minimizing greedy
platforms jumping greedy
minimize the permutation greedy
payment without change math
league of leesins constructive algorithms implementation
fridge lockers graphs implementation
changing volume math
send tree to charlie combinatorics dfs and similar dsu trees
tree queries data structures probabilities trees
point ordering constructive algorithms geometry interactive math
send boxes to alice (hard version) constructive algorithms greedy math number theory ternary search two pointers
send boxes to alice (easy version) constructive algorithms greedy math number theory ternary search two pointers
feeding chicken constructive algorithms greedy implementation
cheap robot binary search dsu graphs shortest paths trees
antenna coverage data structures dp greedy sortings
harmonious graph constructive algorithms dfs and similar dsu graphs greedy sortings
sweets eating dp greedy math sortings
silly mistake greedy implementation
single push implementation
road construction flows graphs
addition robot data structures math matrices
tiling terrace brute force dp
mission possible
twin buildings greedy implementation
performance review data structures
regular forestation hashing trees
songwriter greedy two pointers
find string in a grid data structures dp strings trees
even path data structures implementation
cleaning robots dp trees
copying homework
red-white fence combinatorics fft
voting (hard version) binary search data structures greedy
voting (easy version) data structures dp greedy
salary changing binary search greedy sortings
minimize the integer greedy two pointers
binary palindromes greedy strings
broken keyboard brute force strings two pointers
wires dfs and similar graphs greedy
smartgarden constructive algorithms divide and conquer
divide the students binary search greedy math
projectors flows graphs
the parade binary search greedy
show must go on binary search brute force greedy shortest paths
happy birthday math
discarding game dp greedy two pointers
data center brute force implementation
the coronation graphs implementation
conference problem dp
trip to saint petersburg data structures
the feast and the bus brute force constructive algorithms greedy math
berstagram implementation
maximum weight subset dp trees
by elevator or stairs? dp shortest paths
too many segments (hard version) data structures greedy sortings
too many segments (easy version) greedy
good numbers (hard version) binary search greedy math meet-in-the-middle
good numbers (easy version) brute force greedy implementation
books exchange (hard version) dfs and similar dsu math
books exchange (easy version) dsu math
yet another dividing into teams math
the world is just a programming task (easy version) brute force dp greedy implementation
grow the tree greedy math sortings
integer points geometry math
cursor distance
daniel and spring cleaning bitmasks brute force combinatorics dp
hyakugoku and ladders dp probabilities shortest paths
shichikuji and power grid dsu graphs greedy shortest paths trees
constanze's machine dp
restricted rps constructive algorithms dp greedy
good ol' numbers coloring math number theory
running in pairs constructive algorithms greedy math
chips constructive algorithms implementation
minimizing difference binary search constructive algorithms greedy sortings ternary search two pointers
paint the tree brute force constructive algorithms dp graphs implementation trees
the football season brute force math number theory
rooms and staircases brute force implementation
pens and pencils math
character swap (hard version) strings
character swap (easy version) strings
maximum square implementation
planar perimeter constructive algorithms graphs
number discovery math
sum balance bitmasks dfs and similar dp graphs
0-1 mst dfs and similar dsu graphs sortings
tile painting constructive algorithms math number theory
football graphs
swiper, no swiping! graphs implementation
turtle dp implementation
catowice city 2-sat dfs and similar graph matchings graphs
queue in the train data structures greedy implementation
the world is just a programming task (hard version) implementation
ivan the fool and the probability theory combinatorics dp math
adilbek and the watering system data structures greedy sortings
the maximum subtree dfs and similar dp graphs trees
keyboard purchase bitmasks dp
ab-string binary search combinatorics dp strings
standard free2play dp greedy math
kill `em all greedy sortings
prime subtraction math number theory
balanced reversals constructive algorithms
balanced distribution data structures dp greedy
balanced domino placements combinatorics dp
balanced binary search trees dp math
balanced playlist binary search data structures implementation
balanced removals (harder) binary search constructive algorithms divide and conquer greedy implementation sortings
balanced removals (easier) constructive algorithms geometry greedy
balanced tunnel data structures sortings two pointers
balanced rating changes implementation math
alice and the cactus dfs and similar graphs math probabilities
alice and the unfair game binary search data structures dp dsu
alice and the doll brute force data structures greedy implementation
labs constructive algorithms greedy implementation
alice and the list of presents combinatorics math
stones brute force greedy math
yet another substring reverse bitmasks dp
special permutations math
distinct characters queries data structures
pipes dp implementation
social network (hard version) data structures implementation
social network (easy version) implementation
equalize prices again math
middle-out constructive algorithms greedy strings
increasing matrix greedy
ania and minimizing greedy implementation
dawid and bags of candies brute force implementation
one node is gone constructive algorithms implementation trees
another filling the grid combinatorics dp math
complete tripartite brute force constructive algorithms graphs hashing implementation
primes and multiplication math number theory
filling the grid implementation math
distinct digits brute force implementation
not same constructive algorithms
wrong answer on test 233 (hard version) combinatorics math
wrong answer on test 233 (easy version) dp
arson in berland forest binary search graphs graphs shortest paths
optimal subsequences (hard version) data structures greedy
optimal subsequences (easy version) data structures greedy
messy constructive algorithms
box constructive algorithms
math problem math
to make 1 bitmasks constructive algorithms dp greedy number theory
tree factory constructive algorithms greedy trees
rock is push binary search dp
power products hashing math number theory
p-binary bitmasks brute force math
tv subscriptions (hard version) implementation two pointers
tv subscriptions (easy version) implementation
forgetting things math
wooden raft binary search math number theory
stack exterminable arrays data structures divide and conquer dp hashing
paint the tree dp sortings trees
sequence sorting dp greedy two pointers
save the nature binary search greedy
strings equalization strings
cme math
graph and numbers bitmasks brute force combinatorics dp meet-in-the-middle
choose a square binary search data structures sortings
game with string games
make the fence great again dp
perfect team binary search math
knights constructive algorithms greedy
2048 game brute force greedy math
geolocation geometry
gardener alex binary search data structures
tourism dfs and similar dp dsu graphs greedy trees
alex and julian bitmasks math number theory
substring game in the lesson games greedy strings
multiplication table math number theory
cards implementation sortings strings
harvester implementation
periodic integer number implementation strings
the light square 2-sat dfs and similar greedy
function composition dfs and similar
alpha planetary system constructive algorithms graphs shortest paths
workout plan data structures greedy
product tuples divide and conquer fft
xor spanning tree divide and conquer fft graphs
jumping transformers dp
guarding warehouses data structures geometry
bubblereactor dp graphs
forced online queries problem data structures divide and conquer dsu graphs trees
sum queries? data structures greedy implementation math
coloring edges constructive algorithms dfs and similar graphs
the number of good substrings binary search bitmasks brute force
zmei gorynich greedy math
creating a character binary search math
wi-fi data structures dp greedy
numerical sequence (hard version) binary search math
numerical sequence (easy version) binary search brute force math
swords math
white sheet geometry math
shooting greedy implementation sortings
prefixes strings
radio stations 2-sat
marbles bitmasks dp
ticket game games greedy math
swap letters constructive algorithms greedy
the number of products combinatorics dp implementation
yellow cards greedy implementation math
tiles placement constructive algorithms dfs and similar trees
feeling good bitmasks data structures
employment greedy sortings
petya and construction set constructive algorithms graphs math sortings trees
treasure island dfs and similar dp flows hashing
bad sequence data structures greedy
badges brute force math
optimal currency exchange brute force math
path queries divide and conquer dsu graphs sortings trees
unstable string sort data structures dfs and similar dsu graphs greedy implementation strings
two small strings brute force constructive algorithms
equalizing by division (hard version) brute force math sortings
equalizing by division (easy version) brute force implementation
book reading math
bad prices data structures implementation
chips moving math
unusual graph *special graphs
road repair in treeland *special binary search dp trees
king's path *special math trees
kotlinkotlinkotlinkotlin... *special graphs implementation strings
double permutation inc. *special binary search greedy
teams *special binary search greedy math
ice cream *special greedy sortings
traveling around the golden ring of berland *special implementation
three problems *special implementation
mateusz and escape room dp
marek and matching (hard version) brute force probabilities
marek and matching (easy version) brute force probabilities
wojtek and card tricks math
konrad and company evaluation graphs
kamil and making a stream math number theory trees
marcin and training camp brute force greedy
anadi and domino brute force graphs
moving walkways data structures greedy math
into blocks (hard version) data structures
into blocks (easy version) data structures dsu greedy implementation two pointers
koala and notebook data structures dfs and similar graphs shortest paths strings trees
rotate columns (hard version) bitmasks dp greedy sortings
rotate columns (easy version) bitmasks brute force dp greedy sortings
cow and snacks dfs and similar dsu graphs
paint the digits constructive algorithms greedy implementation
koala and lights implementation math number theory
paint the numbers greedy implementation math
red blue tree data structures implementation trees
polygons greedy math number theory
bits and pieces bitmasks dfs and similar dp greedy
let them slide data structures implementation
restore permutation binary search data structures greedy implementation
magic grid constructive algorithms
uniqueness binary search brute force implementation two pointers
xorinacci math
indie album data structures dfs and similar hashing string suffix structures strings trees
remainder problem brute force data structures implementation
xor guessing bitmasks interactive math
number of permutations combinatorics
gas pipeline dp greedy
square filling constructive algorithms greedy implementation
there are two types of burgers brute force greedy implementation math
make product equal one dp implementation
choose two numbers math sortings
beauty of a permutation constructive algorithms math
expected value again combinatorics strings
almost all constructive algorithms trees
palindromic paths implementation interactive
shortest cycle bitmasks brute force graphs shortest paths
almost equal constructive algorithms greedy math
natasha, sasha and the prefix sums combinatorics dp math number theory
kirk and a binary string (hard version) data structures greedy math strings
kirk and a binary string (easy version) brute force greedy strings
anna, svyatoslav and maps dp graphs greedy shortest paths
mislove has lost an array greedy math
bowwow and the timetable math
complete the projects (hard version) dp greedy
complete the projects (easy version) greedy
boxers greedy sortings
remove the substring (hard version) binary search greedy implementation two pointers
remove the substring (easy version) greedy implementation
common divisors implementation math
equal rectangles greedy math
circle of students implementation
you are given some letters... binary search implementation math
you are given some strings... brute force string suffix structures strings
print a 1337-string... combinatorics constructive algorithms math strings
you are given a wasd-string... brute force data structures dp greedy implementation math strings
you are given a decimal string... brute force dp shortest paths
you are given two binary strings... bitmasks greedy
knightmare (hard) graphs interactive shortest paths
knightmare (easy) graphs interactive shortest paths
treasure hunting binary search dp greedy implementation
maximum median binary search greedy math sortings
zero array greedy math
important exam implementation strings
graph traveler brute force data structures dfs and similar dp graphs implementation math number theory
compress words brute force hashing implementation string suffix structures strings
white lines brute force data structures dp implementation two pointers
round corridor math number theory
block adventure dp greedy
hotelier brute force data structures implementation
water lily geometry math
city day implementation
gcd groups 2 greedy number theory probabilities
rectangle painting 2 flows graph matchings graphs
rectangle painting 1 dp
matching vs independent set constructive algorithms graphs greedy sortings
welfare state binary search brute force data structures sortings
mp3 sortings two pointers
coloring game dp games matrices
culture code binary search combinatorics data structures dp shortest paths sortings
yet another subarray problem dp greedy math
array splitting greedy sortings
pillars greedy implementation
diy wooden ladder greedy math sortings
k-th path brute force constructive algorithms shortest paths sortings
connected component on a chessboard constructive algorithms implementation
rgb substring (hard version) data structures dp implementation two pointers
rgb substring (easy version) implementation
robot breakout implementation
odd sum segments constructive algorithms math
three piles of candies brute force constructive algorithms math
geometers anonymous club data structures geometry math sortings
openstreetmap data structures two pointers
submarine in the rybinsk sea (hard edition) combinatorics math number theory
submarine in the rybinsk sea (easy edition) combinatorics math number theory
basketball exercise dp
sport mafia binary search brute force math
drinks choosing greedy math
another meme problem dp
crossword expert combinatorics dp number theory probabilities two pointers
count the rectangles bitmasks brute force data structures geometry sortings
1-2-k game games math
from s to t implementation strings
yet another crosses problem implementation
remove a progression math
scissors and tape *special constructive algorithms geometry
magic tree *special data structures dp trees
amusement park *special dp math
cubeword *special brute force dp meet-in-the-middle
dynamic diameter *special data structures dfs and similar divide and conquer trees
building skyscrapers *special
tokitsukaze and mahjong brute force implementation
tokitsukaze and enhancement brute force
tokitsukaze and powers number theory probabilities
tokitsukaze and explosion binary search greedy
tokitsukaze and strange rectangle data structures divide and conquer sortings two pointers
tokitsukaze and duel brute force games greedy
tokitsukaze, csl and stone game games
tokitsukaze and discard items implementation two pointers
candies! data structures dp implementation math
number circle greedy math sortings
keanu reeves strings
problem from red panda combinatorics
make equal dp
array beauty dp
count pairs math matrices number theory two pointers
add on a tree: revolution constructive algorithms dfs and similar implementation trees
add on a tree trees
gang up flows graphs
expected square beauty dp math probabilities
tree painting dfs and similar dp trees
subarray sorting data structures sortings
vasya and array constructive algorithms greedy implementation
letters shop binary search implementation strings
stickers and toys math
vus the cossack and a graph dfs and similar graphs greedy implementation
vus the cossack and a field divide and conquer implementation math
vus the cossack and numbers constructive algorithms greedy math
vus the cossack and strings implementation math
vus the cossack and a contest implementation
playlist for polycarp (hard version) combinatorics dp
playlist for polycarp (easy version) bitmasks combinatorics dp
two pizzas bitmasks brute force
polycarp and snakes brute force implementation
extra element implementation math
exam in bersu (hard version) brute force data structures greedy math
exam in bersu (easy version) greedy sortings
email from polycarp implementation strings
ropewalkers math
daleks' invasion (hard) data structures dsu graphs trees
daleks' invasion (medium) dfs and similar graphs shortest paths trees
daleks' invasion (easy) graphs trees
parallel universes (hard) math matrices
parallel universes (easy) implementation
heidi and the turing test (hard)
heidi and the turing test (medium) data structures
heidi and the turing test (easy) implementation
the doctor meets vader (hard) flows shortest paths
the doctor meets vader (medium) flows graph matchings graphs shortest paths sortings
the doctor meets vader (easy) binary search sortings
heidi learns hashing (hard) fft math number theory
heidi learns hashing (medium) brute force number theory
heidi learns hashing (easy) brute force math number theory
subsequences (hard version) dp strings
candy box (hard version) greedy implementation sortings
topforces strikes back brute force math sortings
subsequences (easy version) dp graphs implementation shortest paths
candy box (easy version) greedy sortings
computer game binary search math
equalize prices math
nearest interesting number implementation
maximum sine binary search data structures number theory
product oriented recurrence dp math matrices number theory
complete mirror constructive algorithms dfs and similar dp hashing implementation trees
beautiful lyrics data structures greedy strings
plus from picture dfs and similar implementation strings
filling shapes dp math
a story of one country (hard) brute force greedy sortings
a story of one country (easy) brute force divide and conquer sortings
irrigation binary search data structures implementation sortings trees two pointers
flag brute force combinatorics dp implementation
split a number greedy implementation strings
chunga-changa greedy math
nick and array greedy implementation
alex and a rhombus dp implementation math
alesya and discrete math divide and conquer interactive
fedor runs for president data structures dp trees
serge and dining room binary search data structures graph matchings greedy implementation math trees
tolik and his uncle constructive algorithms
valeriy and deque data structures implementation
stock exchange binary search flows graphs
the awesomest vertex data structures dfs and similar
long colorful strip dp
short colorful strip combinatorics dfs and similar dp
archaeology brute force constructive algorithms greedy strings
prime graph constructive algorithms greedy math number theory
tiles combinatorics greedy math
wow factor dp strings
prime minister greedy
digits sequence (hard edition) binary search divide and conquer implementation
digits sequence (easy edition) implementation
destroy it! dp implementation sortings
cover it! dfs and similar dsu graphs shortest paths trees
recover it! dfs and similar graphs greedy number theory sortings
lose it! dp greedy implementation
merge it! math
divide it! brute force greedy implementation
yet another partiton problem data structures divide and conquer dp geometry two pointers
the number of subpermutations brute force data structures divide and conquer hashing math
minimal segment cover data structures dfs and similar divide and conquer dp greedy implementation trees
array splitting greedy sortings
electrification binary search brute force greedy
catch overflow! data structures expression parsing implementation
from hero to zero implementation math
ehab and the big finale constructive algorithms divide and conquer graphs implementation interactive trees
ehab and the expected gcd problem combinatorics dp math number theory
ehab and the expected xor problem bitmasks constructive algorithms
ehab and a special coloring problem constructive algorithms number theory
ehab is an odd person sortings
ehab fails to be thanos constructive algorithms greedy sortings
nauuo and chess constructive algorithms greedy
nauuo and votes greedy
nauuo and bug data structures
nauuo and odt data structures
nauuo and portals constructive algorithms
nauuo and pictures (hard version) dp probabilities
nauuo and pictures (easy version) dp probabilities
nauuo and circle combinatorics dfs and similar dp trees
nauuo and cards greedy implementation
good subsets *special dp
longest saw *special constructive algorithms
graph decomposition *special graphs
wheels *special binary search greedy
sliding doors *special binary search
decoding of integer sequences *special data structures implementation
minus and minus give plus *special implementation strings
bad days *special implementation
three integers again *special math
pairs graphs implementation
circle metro implementation math
xor permutations constructive algorithms math
anagram paths dp implementation trees
and reachability bitmasks dp
good triple brute force two pointers
increasing by modulo binary search greedy
low budget inception brute force geometry
scalar queries combinatorics data structures math sortings
range deleting binary search combinatorics data structures two pointers
bicolored rbs constructive algorithms greedy
news distribution dfs and similar dsu graphs
lost numbers brute force divide and conquer interactive math
telephone number brute force greedy strings
vicky's delivery service data structures dsu graphs hashing
the lcms must be large bitmasks brute force constructive algorithms math number theory
cute sequences binary search brute force greedy math
a tale of two lands binary search sortings two pointers
all the vowels please constructive algorithms math number theory
silent classroom combinatorics greedy
microtransactions (hard version) binary search greedy implementation
microtransactions (easy version) binary search greedy
two arrays and sum of functions greedy math sortings
almost all divisors math number theory
good string greedy
polycarp training data structures greedy sortings
remainder implementation math
indecisive taxi fee data structures graphs shortest paths
magical permutation bitmasks brute force constructive algorithms data structures graphs math
mysterious code dp strings
power transmission (hard edition) data structures geometry implementation math
power transmission (easy edition) brute force geometry
cat party (hard edition) data structures implementation
cat party (easy edition) data structures implementation
eating soup greedy math
double matrix brute force greedy
zoning restrictions again implementation
collaboration *special
expansion coefficient of the array implementation math
a pile of stones implementation math
density of subarrays dp math
strange device binary search interactive math trees
winding polygonal line constructive algorithms geometry greedy math
permutation recovery constructive algorithms data structures dfs and similar graphs greedy math sortings
the minimal unique substring constructive algorithms math strings
the party and sweets binary search constructive algorithms greedy implementation math sortings two pointers
inverse of rows and columns brute force constructive algorithms
maximum balanced circle constructive algorithms dp greedy two pointers
minimum array binary search data structures greedy
n problems during k days constructive algorithms greedy math
increasing subsequence (hard version) greedy
increasing subsequence (easy version) greedy
long number greedy
reachable numbers implementation
optimizer graphs greedy hashing implementation
card bag dp math probabilities
special segments of permutation data structures divide and conquer dsu two pointers
0-1-tree dfs and similar divide and conquer dp dsu trees
match points binary search greedy sortings ternary search two pointers
ugly pairs dfs and similar greedy implementation sortings strings
inscribed figures geometry
delivery oligopoly brute force dp graphs
guess the root brute force interactive math
beautiful array brute force data structures divide and conquer dp greedy
alarm clocks everywhere math number theory
game with telephone numbers games greedy implementation
reverse a substring implementation sortings strings
minimum possible lcm brute force greedy math number theory
shovels shop dp greedy sortings
two teams data structures implementation sortings
walking robot greedy
gourmet cat implementation math
make them equal math
restoring three numbers math
serval and bonus problem combinatorics dp math probabilities
serval and snake binary search brute force interactive
serval and rooted tree binary search dfs and similar dp greedy trees
serval and parenthesis sequence greedy strings
serval and toy bricks constructive algorithms greedy
serval and bus brute force math
neko rules the catniverse (large version) bitmasks dp matrices
neko rules the catniverse (small version) bitmasks dp matrices
neko and flashback constructive algorithms dfs and similar graphs
neko and aki's prank dp greedy trees
neko does maths brute force math number theory
neko performs cat furrier transform bitmasks constructive algorithms dfs and similar math
neko finds grapes greedy implementation math
sonya and informatics combinatorics dp matrices probabilities
number of components combinatorics data structures dp math
stas and the queue at the buffet greedy math sortings
problem for nazar constructive algorithms math
dima and a bad xor bitmasks brute force constructive algorithms dp
maxim and biology brute force strings
tiling challenge greedy implementation
stock arbitraging greedy implementation
election promises games graphs
abandoning roads brute force dp graphs greedy
tree generator™ data structures implementation trees
three religions dp implementation strings
prefix sum primes constructive algorithms greedy math number theory
holy diver data structures
gold experience constructive algorithms graphs math number theory probabilities
foo fighters bitmasks constructive algorithms
earth wind and fire constructive algorithms greedy math sortings two pointers
dirty deeds done dirt cheap greedy sortings
crazy diamond constructive algorithms sortings
born this way binary search brute force two pointers
another one bites the dust greedy
zigzag game games interactive
rainbow coins interactive
palindrome xor dfs and similar graphs
thanos nim games
chladni figure brute force strings
hide and seek graphs
satanic panic dp geometry
zoning restrictions dp flows graphs
leaf partition dp trees
hot is cold bitmasks data structures divide and conquer implementation
frog jumping dfs and similar math number theory
tree diameter bitmasks graphs interactive
hate "a" implementation strings
love "a" implementation strings
ai takeover interactive
neat words
fourier doodles
pigeon d'or implementation
mystery circuit bitmasks brute force
kanban numbers brute force
thanos sort implementation
two merged sequences dp greedy
graph without long directed paths dfs and similar graphs
median string bitmasks math number theory strings
equalize them all constructive algorithms greedy
two shuffled sequences constructive algorithms sortings
parity alternated deletions greedy implementation sortings
diverse strings implementation strings
queen dfs and similar trees
nirvana brute force math number theory
the doors implementation
pink floyd graphs interactive
foreigner dp
u2 geometry
lynyrd skynyrd data structures dfs and similar dp math trees
the beatles brute force math
privatization of roads in treeland binary search constructive algorithms dfs and similar graphs greedy trees
same sum blocks (hard) data structures greedy
same sum blocks (easy) greedy
superhero battle math
colored boots greedy implementation
polycarp restores permutation math
maximal continuous rest implementation
game 23 implementation math
double tree data structures divide and conquer shortest paths trees
extending set of points data structures divide and conquer dsu
palindrome-less arrays combinatorics divide and conquer dp
minimum triangulation dp greedy math
playlist brute force data structures sortings
good string implementation strings
detective book implementation
dish shopping data structures divide and conquer
maximize mex flows graph matchings graphs
steps to one dp math number theory probabilities
edgy trees dfs and similar dsu graphs math trees
chocolates greedy implementation
even substrings implementation strings
circus brute force greedy math strings
sushi for two binary search greedy implementation
matches are not a child's play data structures trees
train car selection data structures greedy
cooperative game constructive algorithms interactive number theory
museums tour dp graphs implementation
camp schedule greedy hashing strings
skyscrapers implementation sortings
nastya hasn't written a legend binary search data structures
nastya is buying lunch greedy
nastya is transposing matrices constructive algorithms sortings
nastya is playing computer games constructive algorithms math
nastya is reading a book implementation
spanning tree with one fixed degree constructive algorithms dfs and similar dsu graphs greedy
spanning tree with maximum degree graphs
k balanced teams dp sortings two pointers
zero quantity maximization hashing math number theory
balanced team sortings two pointers
preparation for international women's day math number theory
middle of the contest implementation
greedy subsequences data structures dp trees
clear the string dp
knapsack dfs and similar dp greedy
stressful training binary search greedy
painting the fence brute force
discounts greedy sortings
regular bracket sequence greedy implementation
most dangerous shark data structures dp two pointers
asya and kittens constructive algorithms dsu
string multiplication dp greedy strings
gourmet choice dfs and similar dp dsu graphs greedy
birthday binary search greedy sortings
draw! greedy implementation
sea battle math
connect brute force dfs and similar dsu
two cakes greedy
be positive implementation
legendary tree binary search interactive trees
isolation data structures dp
morse code binary search data structures dp hashing sortings string suffix structures strings
wrong answer constructive algorithms
toy train brute force greedy
toy train (simplified) brute force greedy
system testing implementation
mike and children brute force implementation
technogoblet of fire implementation sortings
secret letters data structures dp greedy
the very same munchhausen brute force
power tree dfs and similar dp dsu graphs greedy trees
compress string dp strings
once in a casino constructive algorithms greedy implementation math
diana and liana greedy implementation two pointers
triple fft math
get ready for the battle constructive algorithms implementation
niyaz and small degrees data structures dp trees
pavel and triangles brute force dp fft greedy ternary search
frets on fire binary search sortings
ramesses and corner inversion constructive algorithms greedy implementation math
alyona and a narrow fridge binary search flows greedy sortings
ilya and a colorful walk greedy implementation
tree cutting (hard version) combinatorics dfs and similar dp trees
tree cutting (easy version) dfs and similar trees
yet another ball problem constructive algorithms implementation
coffee and coursework (hard version) binary search greedy
coffee and coursework (easy version) brute force greedy
palindromic matrix constructive algorithms implementation
tanya and candies implementation
water buying math
recursive queries data structures
crisp string bitmasks dp
decypher the string bitmasks chinese remainder theorem constructive algorithms interactive math
magic gems dp math matrices
magic ship binary search
emotes greedy math sortings
best subsegment implementation math
hessenberg matrix
creeper
tie fighter
x-wing fighter
pattern of increasing blocks
block diagonal matrix
``is the number of ones divisible by 3?'' oracle
``is the bit string periodic?'' oracle
alternating bits oracle
not a, not b or not c?
distinguish three-qubit states
generate equal superposition of four basis states
generate state |00⟩ + |01⟩ + |10⟩
block unitary *special
chessboard unitary *special
anti-diagonal unitary *special
palindrome checker oracle *special
or oracle *special
and oracle *special
please, another queries on array? bitmasks data structures divide and conquer math number theory
arithmetic progression binary search interactive number theory probabilities
flood fill dp
trailing loves (or l'oeufs?) brute force implementation math number theory
yet another array partitioning task constructive algorithms greedy sortings
got any grapes? brute force greedy implementation
sasha and magnetic machines greedy number theory
sasha and his trip dp greedy math
tree data structures dfs and similar dp graphs trees
destroy the colony combinatorics dp math
creative snap binary search brute force divide and conquer math
average superhero gang power brute force implementation math
superhero transformation implementation strings
modest substrings dp strings
tree-tac-toe constructive algorithms games trees
nearest leaf data structures trees
magic stones constructive algorithms math sortings
jongmah dp
meaningless operations constructive algorithms math number theory
tape greedy sortings
parity math
sasha and algorithm of silence's sounds data structures trees
sasha and a very easy test data structures number theory
sasha and interesting fact from graph theory brute force combinatorics dp math trees
sasha and a patient friend binary search data structures implementation
sasha and one more name constructive algorithms hashing strings
sasha and a bit of relax dp implementation
mst unification binary search dsu graphs greedy
array and segments (hard version) data structures implementation
array and segments (easy version) brute force greedy implementation
diverse garland constructive algorithms dp greedy
nice garland brute force greedy math
divisors of two integers brute force greedy math number theory
two distinct points implementation
vasya and maximum profit binary search constructive algorithms data structures dp dsu
vasya and endless credits dp flows graph matchings graphs sortings
vasya and binary string dp
compression dp implementation math number theory
brutality greedy sortings two pointers
digital root math number theory
digits sequence dividing greedy strings
lunar new year and a recursive sequence math matrices number theory
lunar new year and red envelopes data structures dp
lunar new year and a wander data structures dfs and similar graphs greedy shortest paths
lunar new year and number division greedy implementation math sortings
lunar new year and food ordering data structures implementation
lunar new year and cross counting implementation
helping hiasat bitmasks brute force dp meet-in-the-middle
kilani and the game dfs and similar graphs implementation shortest paths
ayoub and lost array combinatorics dp math
zuhair and strings brute force implementation strings
salem and sticks brute force implementation
game with string data structures implementation math
splitting into digits constructive algorithms implementation math
radix sum fft math number theory
professional layer bitmasks dp
johnny solving constructive algorithms dfs and similar graphs math
game with modulo binary search constructive algorithms interactive
grid game constructive algorithms implementation
elongated matrix binary search bitmasks brute force dp graphs
monotonic renumeration combinatorics sortings
balanced ternary string greedy strings
doors breaking and repairing games
array k-coloring greedy sortings
integer sequence dividing math
(zero xor subset)-less math matrices
trucks and cities binary search dp
polycarp's new job implementation
gcd counting data structures dfs and similar dp number theory trees
division and union sortings
accordion greedy implementation
minimum integer math
ivan and burgers data structures divide and conquer greedy math
andrew and taxi binary search dfs and similar graphs
dasha and chess constructive algorithms games interactive
nn and the optical illusion binary search geometry math
build a contest data structures implementation
roman and browser implementation
cookies binary search data structures dfs and similar dp games trees
postcard constructive algorithms implementation
squares and segments binary search constructive algorithms math
snowball implementation
ж-function string suffix structures strings
fedya the potter binary search implementation math number theory
eels data structures
construct a tree binary search constructive algorithms dfs and similar graphs greedy trees
nice table brute force constructive algorithms greedy math
sum in the tree constructive algorithms dfs and similar greedy trees
mateusz and an infinite sequence bitmasks brute force dp strings
vladislav and a great legend combinatorics dp trees
alex and a tv show bitmasks combinatorics number theory
egor and an rpg game constructive algorithms greedy
makoto and a blackboard dp math number theory probabilities
yuhao and a parenthesis greedy implementation
petr and a combination lock bitmasks brute force dp
gennady and a card game brute force implementation
lucky tickets divide and conquer dp fft
inversion expectation dp math probabilities
the top scorer combinatorics dp math probabilities
easy problem dp
polygon for the angle brute force geometry
substring removal combinatorics math strings
find divisible greedy implementation math
make it connected dsu graphs greedy
almost regular bracket sequence implementation
circular dance implementation
powers of two bitmasks greedy
array stabilization implementation
repeating cipher implementation
multidimensional queries bitmasks data structures
vasya and array dp
intersection of permutations data structures
beautiful graph dfs and similar graphs
mishka and the last exam greedy
letters rearranging constructive algorithms greedy sortings strings
dice rolling math
tree with maximum cost dfs and similar dp trees
minimal diameter forest constructive algorithms dfs and similar greedy trees
great vova wall (version 2) data structures implementation
great vova wall (version 1) greedy implementation math
prefixes and suffixes strings
teams forming sortings
uniform string implementation
new year and the tricolore recreation games
new year and the factorisation collaboration interactive math number theory
new year and the mallard expedition constructive algorithms greedy
new year and the acquaintance estimation binary search data structures graphs greedy implementation math sortings
new year and the permutation concatenation combinatorics dp math
new year and the sphere transmission math number theory
new year and the treasure geolocation brute force constructive algorithms greedy implementation
new year and the christmas ornament brute force implementation math
the pleasant walk implementation
berland university greedy math
right expansion of the mind math
two prefixes strings
minimal product
linearization graphs
combostone games implementation
how to learn you score constructive algorithms interactive
horseback riding flows graphs
similar arrays constructive algorithms
new year presents constructive algorithms data structures
latex expert
company merging greedy
minegraphed constructive algorithms graphs
lazyland
king kog's reception data structures
js minification greedy implementation
interval-free permutations combinatorics
harder satisfiability 2-sat dfs and similar graphs
guest student math
fractions math
easy chess constructive algorithms
distance sum graphs
cactus search interactive
bimatching graphs
alice the fan dp
ehab and a weird weight formula data structures trees
ehab and a component choosing problem dp greedy math trees
ehab and another another xor problem bitmasks constructive algorithms implementation interactive
ehab and a 2-operation task constructive algorithms greedy math
ehab and subtraction implementation sortings
ehab and another construction problem brute force constructive algorithms
forest fires math
beautiful matrix combinatorics data structures dp
rock-paper-scissors champion
vasya and templates greedy implementation strings
minimum diameter tree constructive algorithms implementation trees
connect three implementation math
div times mod math
right-left cipher implementation strings
the fair nut and string combinatorics dp implementation
kvass and the fair nut greedy implementation
the fair nut and elevator brute force implementation
the fair nut and amusing xor data structures
the fair nut and rectangles data structures dp geometry
the fair nut's getting crazy data structures implementation
max mex data structures trees
the fair nut and strings greedy strings
the fair nut and the best path data structures dp trees
petya and graph flows graphs
speed dial dp strings trees
increasing frequency binary search dp greedy
maximum diameter graph constructive algorithms graphs implementation
multi-subject competition greedy sortings
vova and trophies greedy
vasya and book implementation math
palindromic magic data structures hashing strings
mergesort strikes back math probabilities
tricky interactor constructive algorithms implementation interactive
missing numbers binary search constructive algorithms greedy math number theory
maximum distance dsu graphs shortest paths sortings
colorful bricks combinatorics dp math
farewell party constructive algorithms implementation
definite game constructive algorithms math
katya and segments sets data structures interactive sortings
sonya and matrix beauty strings
olya and magical square constructive algorithms implementation math
masha and two friends implementation
margarite and the best present math
petya and origami math
negative time summation constructive algorithms
pictures with kittens (hard version) data structures dp
pictures with kittens (easy version) dp
thematic contests greedy sortings
cutting out binary search sortings
good array
disturbed people greedy
frog jumping math
array game data structures games
summer practice report dp greedy
vasya and a tree data structures trees
edge deletion graphs greedy shortest paths
meme problem binary search math
divisor subtraction implementation math number theory
minimizing the string greedy strings
taxi drivers and lyft implementation sortings
the king's race implementation math
yet another lcp problem data structures string suffix structures
choosing two paths dfs and similar dp greedy trees
segment sum bitmasks combinatorics dp math
berland fair binary search brute force data structures greedy
vasya and robot binary search two pointers
vasya and books implementation math
diverse substring implementation strings
rain protection binary search geometry
algoland and berland constructive algorithms divide and conquer geometry
odd federalization constructive algorithms
video posts implementation
streets and avenues in berhattan dp
privatization of roads in berland flows graph matchings graphs
beros file suggestion brute force implementation
monsters and potions brute force dp greedy implementation
debate greedy
getting deals done binary search data structures
garbage disposal greedy
cloud computing data structures greedy
berkomnadzor data structures greedy
find a number dp graphs number theory shortest paths
colored rooks constructive algorithms graphs
lcm math number theory
birthday math
random forest rank dp graph matchings math trees
computer game dp greedy math probabilities
knights constructive algorithms
multihedgehog dfs and similar graphs shortest paths
array without local maximums dp
yet another 2d walking dp
binary numbers and sum data structures implementation math
boxes packing binary search implementation
books queries implementation
heaters greedy two pointers
vova and train math
fibonacci suffix strings
up and down the tree dfs and similar dp trees
side transmutations combinatorics strings
three pieces dfs and similar dp shortest paths
make it equal greedy
vasya and isolated vertices constructive algorithms graphs
vasya and chocolate implementation math
equations of mathematical magic math
make a triangle! brute force geometry math
string journey data structures dp string suffix structures
lasers and mirrors constructive algorithms math
candies for children brute force math
dwarves, hats and extrasensory abilities binary search constructive algorithms geometry interactive
labyrinth graphs shortest paths
oh those palindromes constructive algorithms strings
upgrading cities dfs and similar graphs
company binary search data structures dfs and similar greedy trees
fun with integers dfs and similar graphs implementation math
banh-mi greedy implementation math
math greedy math number theory
a prank greedy implementation
lost root interactive probabilities
politics flows graphs
tv shows data structures greedy implementation sortings
multiplicity data structures dp implementation math number theory
views matter greedy implementation sortings
coins greedy implementation math
sophisticated device constructive algorithms
balls and pockets data structures
shrinking tree combinatorics dp
sergey and subway dfs and similar dp trees
social circles greedy math
maximum subrectangle binary search implementation two pointers
maximum sum of digits greedy
phone numbers brute force
split the tree binary search data structures dp greedy trees
nature reserve binary search geometry ternary search
sequence transformation constructive algorithms math
forgery implementation
cashier implementation
tanya and colored candies *special dp
ddos *special brute force
bmail computer network *special dfs and similar trees
detect robots data structures strings
take metro brute force data structures graphs
write the contest binary search dp math
check transcription brute force data structures hashing strings
decorate apple tree constructive algorithms dfs and similar dp graphs greedy sortings trees
pick heroes greedy implementation interactive sortings
divide candies math number theory
determine line implementation
jellyfish nightmare
tree and xor strings trees
segments on the line binary search dp
refactoring greedy implementation strings
lucky days math number theory
alice and hairdresser dsu implementation
metro graphs
epic convolution chinese remainder theorem fft math number theory
new road network constructive algorithms greedy math
electric scheme flows graph matchings
chips puzzle constructive algorithms implementation math
changing array greedy implementation
candies distribution constructive algorithms implementation
appending mex implementation
elevator or stairs? implementation
euler tour constructive algorithms trees
distinctification data structures dsu greedy
the shortest statement graphs shortest paths trees
vasya and big integers binary search data structures dp hashing strings
bicolorings bitmasks dp
vasya and multisets brute force dp greedy implementation math
relatively prime pairs greedy math number theory
vasya and password greedy implementation strings
cover points geometry math
little c loves 3 i math
say hello geometry
splitting money implementation
space formula greedy
moonwalk challenge data structures strings trees
palindrome pairs hashing strings
self-exploration math
ai robots data structures
shady lady geometry math
ancient civilizations constructive algorithms geometry
interstellar battle math probabilities trees
hyperspace highways dfs and similar graphs trees
space isaac hashing number theory
last chance data structures flows graph matchings graphs trees
dfs data structures
grid sort implementation
deduction queries data structures dsu
optimal polygon perimeter dp geometry
intersecting subtrees dfs and similar interactive trees
the tower is going home binary search two pointers
speckled band data structures divide and conquer hashing string suffix structures strings
make it one bitmasks combinatorics dp math number theory shortest paths
train hard, win easy constructive algorithms greedy math sortings
mysterious crime brute force combinatorics math meet-in-the-middle two pointers
smallest word constructive algorithms greedy implementation
lost array implementation
elections implementation math
leaf sets data structures dfs and similar dsu graphs greedy sortings trees
vasya and magic matrix dp math probabilities
petya and array data structures divide and conquer two pointers
array product constructive algorithms greedy math
vitamins bitmasks brute force dp implementation
benches binary search implementation
ray in the tube data structures divide and conquer dp math
tree reconstruction constructive algorithms data structures graphs greedy
glider binary search data structures two pointers
coffee break binary search data structures greedy two pointers
buying a tv set math
heist greedy implementation sortings
shashlik cooking dp greedy math
palindrome dance greedy
summer oenothera exhibition data structures
you are given a tree data structures dp trees
network safety dfs and similar dsu graphs math sortings
subway pursuit binary search interactive probabilities
timetable constructive algorithms data structures greedy math
wrap around dp strings
maximum matching bitmasks brute force dfs and similar dp graphs
slime dp greedy implementation
gambling greedy sortings
non-coprime partition constructive algorithms math
equality implementation strings
security data structures string suffix structures
a game on strings games
maximum reduction combinatorics data structures math
trips graphs
valid bfs? dfs and similar graphs shortest paths trees
equalize dp greedy strings
reach median greedy
packets constructive algorithms greedy math
sources and sinks bitmasks brute force dfs and similar
relatively prime powers combinatorics math number theory
covered points fft geometry number theory
vasya and arrays greedy two pointers
classy numbers combinatorics dp
diagonal walking v.2 math
function height math
little c loves 3 iii bitmasks dp math
intervals of intervals binary search data structures two pointers
region separation combinatorics dp number theory trees
little c loves 3 ii brute force constructive algorithms flows graph matchings
enlarge gcd number theory
chip game games
boolean computer bitmasks brute force fft math
hidden bipartite graph binary search constructive algorithms dfs and similar graphs interactive
divisors interactive math number theory
permutation game brute force dp games
square difference math number theory
king escape dfs and similar graphs implementation
chattering
vasya and maximum matching dp trees
the unbearable lightness of weights dp math
barcelonian distance geometry implementation
playing piano constructive algorithms dp
personalized cup
kitchen utensils
familiar operations brute force graphs math
triple flips constructive algorithms
minimum path greedy
cram time greedy
curiosity has no limits
golden plate implementation math
linear congruential generator number theory
putting boxes together data structures
vasya and good sequences bitmasks dp
vasya and triangle geometry number theory
vasya and golden ticket implementation
vasya and cornfield geometry
in search of an easy problem implementation
multicolored markers binary search brute force math number theory
tree with small distances dp graphs greedy
concatenated multiples implementation math
maximal intersection greedy math sortings
creating the contest dp greedy math
many equal substrings implementation strings
make square math
guess the number dp interactive
make symmetrical brute force
restore array constructive algorithms
order book combinatorics data structures greedy
rectangles geometry implementation sortings
unnatural conditions constructive algorithms math
find square implementation
x-mouse in the campus bitmasks math number theory
session in bsu binary search dfs and similar dsu graph matchings graphs
inverse coloring combinatorics dp math
mouse hunt dfs and similar graphs
minimum value rectangle greedy
numbers on the chessboard implementation math
palindromic twist implementation strings
company acquisitions constructive algorithms math
disjoint triangles geometry
colored cubes constructive algorithms implementation matrices
recovering bst brute force dp math number theory trees
plasticine zebra constructive algorithms implementation
weakened common divisor brute force greedy number theory
doggo recoloring implementation sortings
pisces data structures flows trees
mobile phone network dfs and similar dsu graphs trees
down or right constructive algorithms interactive matrices
array restoration constructive algorithms data structures
bracket subsequence greedy
pair of toys math
single wildcard pattern matching brute force implementation strings
badge brute force dfs and similar graphs
new building for sis math
raining season data structures divide and conquer trees
large triangle binary search geometry sortings
sergey's problem constructive algorithms graphs
the hat binary search interactive
elections brute force greedy
the films brute force
the tree data structures
the neutral zone brute force math
the supersonic rocket geometry hashing strings
the wu bitmasks brute force data structures
the phone number constructive algorithms greedy
the bits implementation math
the rank implementation
appropriate team bitmasks math number theory
road projects dfs and similar dp trees
rest in the shades binary search geometry
vasya and the matrix constructive algorithms flows math
vasya and the mushrooms dp implementation
segment occurrences brute force implementation
death note greedy implementation math
bracket substring dp strings
stars drawing (hard edition) binary search dp greedy
stars drawing (easy edition) brute force dp greedy
walking between houses constructive algorithms greedy
songs compression sortings
obtaining the string implementation
points in segments implementation
and greedy
piles with stones math
passports dp implementation
cycle sort dsu math
ab-strings constructive algorithms strings
hills dp
chemical table constructive algorithms dfs and similar dsu graphs matrices
photo of the sky brute force implementation math sortings
planning the expedition binary search brute force implementation
stages greedy implementation sortings
tree fft graphs trees
store data structures
mars rover dfs and similar graphs implementation trees
border number theory
rocket binary search interactive
fly binary search math
allowed letters bitmasks flows graph matchings graphs greedy
dominant indices data structures dsu trees
intercity travelling combinatorics math probabilities
relatively prime graph brute force constructive algorithms graphs greedy math
annoying present greedy math
minimum ternary string greedy implementation
game shopping implementation
turn the rectangles greedy sortings
romaji implementation strings
mini metro dp
ants 2-sat data structures trees
guess two numbers binary search interactive
pave the parallelepiped bitmasks brute force combinatorics math number theory
reorder the array combinatorics data structures math sortings two pointers
xor-paths bitmasks brute force dp meet-in-the-middle
military problem dfs and similar graphs trees
two strings swaps implementation
three parts of the array binary search data structures two pointers
polycarp's practice greedy implementation sortings
adjacent replacements implementation
berland and the shortest paths brute force dfs and similar graphs shortest paths
median on segments (general case edition) sortings
median on segments (permutations edition) sortings
polycarp and div 3 dp greedy number theory
summarize to the power of two brute force greedy implementation
delete from the left brute force implementation strings
tanya and stairways implementation
sonya and bitwise or bitmasks data structures divide and conquer
sonya and ice cream binary search data structures dp greedy shortest paths trees
sonya and matrix brute force constructive algorithms implementation
sonya and robots constructive algorithms implementation
sonya and exhibition constructive algorithms greedy implementation math
sonya and hotels implementation
abbreviation dp hashing strings
tree constructing constructive algorithms graphs
coins and queries greedy
intense heat brute force implementation math
binary string constructing constructive algorithms
polycarp's pockets implementation
another array reconstruction algorithm
bernstein-vazirani algorithm
oracle for majority function
oracle for f(x) = b * x + (1 - b) * (1 - x) mod 2
oracle for f(x) = b * x mod 2
distinguish zero state and plus state without errors
distinguish zero state and plus state with minimum error
distinguish four 2-qubit states - 2
distinguish four 2-qubit states
distinguish ghz state and w state
distinguish zero state and w state
generate w state
generate superposition of two basis states
generate superposition of zero state and a basis state
generate superposition of all basis states
deutsch-jozsa algorithm *special
oracle for f(x) = parity of the number of 1s in x *special
oracle for f(x) = k-th element of x *special
distinguish multi-qubit basis states *special
distinguish bell states *special
distinguish plus state and minus state *special
generate ghz state *special
generate bell state *special
generate plus state or minus state *special
two-paths data structures dp trees
one occurrence data structures divide and conquer
we need more bosses dfs and similar graphs trees
yet another problem on a subsequence combinatorics dp
covered points count data structures implementation sortings
light it up greedy
codehorses t-shirts greedy implementation
cards and joy dp
reachability from the capital dfs and similar graphs greedy
equalize the remainders data structures greedy implementation
alphabetic removals implementation
reversing encryption implementation
mishka and contest brute force implementation
cutting dp greedy sortings
balloons constructive algorithms implementation
good subsegments data structures
cycles in product combinatorics divide and conquer trees
sky full of stars combinatorics math
roman digits brute force combinatorics dp greedy math
convert to ones brute force greedy implementation math
world cup binary search math
hit the lottery dp greedy
cowmpany cowmpensation combinatorics dp math trees
number clicker divide and conquer graphs meet-in-the-middle number theory
game math
leaving the bar brute force data structures geometry greedy math sortings
suit and tie greedy implementation math
tesla constructive algorithms implementation
knights of a polygonal table greedy implementation sortings
fingerprints implementation
the moral dilemma
nikita and order statistics chinese remainder theorem fft math
compute power binary search dp greedy
careful maneuvering bitmasks brute force geometry
open communication bitmasks brute force
two squares geometry implementation
nastya and king-shamans binary search data structures
nastya and a game brute force implementation math
nastya and a wardrobe math
nastya studies informatics math number theory
nastya and an array implementation sortings
concise and clear brute force greedy implementation math
bus number brute force combinatorics math
bishwock dp greedy
candies binary search implementation
getting an a greedy sortings
if at first you don't succeed... implementation
gcd counting divide and conquer dp dsu number theory trees
flow control dfs and similar dp greedy trees
post lamps brute force greedy
graph and its complement constructive algorithms graphs implementation
bracket sequences concatenation problem implementation
micro-world greedy sortings
commentary boxes implementation math
a trance of nightfall dp geometry matrices probabilities
a shade of moonlight binary search geometry math sortings two pointers
a mist of florescence constructive algorithms graphs
a tide of riverscape constructive algorithms strings
a blend of springtime implementation strings
rain and umbrellas dp
divisibility by 25 brute force greedy
points and powers of two brute force math
equal sums implementation sortings
substrings sort sortings strings
diverse team brute force implementation
three displays brute force dp implementation
high school: become human math
infinity gauntlet implementation
oppa funcan style remastered graphs math number theory shortest paths
prince's problem brute force data structures math number theory trees
perfect encoding fft math
and graph bitmasks dfs and similar dsu graphs
petr and permutations combinatorics math
fair graphs greedy number theory shortest paths
team players combinatorics
isomorphic strings hashing strings
pencils and boxes binary search data structures dp greedy two pointers
sand fortress binary search constructive algorithms math
liebig's barrels greedy
switches and lamps implementation
chess placing implementation
minesweeper implementation
game sortings
nn country binary search data structures trees
arkady and rectangles data structures
elevator dp graphs shortest paths
xor-pyramid dp
finite or not? implementation math
the meeting place cannot be changed dfs and similar graphs
billiard geometry number theory
shark brute force data structures dsu trees
cut 'em all! dfs and similar dp graphs greedy trees
bus of characters data structures greedy implementation
row brute force constructive algorithms
k paths combinatorics data structures dp fft math
magic multisets data structures
round marriage binary search graph matchings greedy
addition on segments bitmasks data structures divide and conquer dp
bookshelves bitmasks dp greedy
useful decomposition implementation trees
businessmen problems sortings
antipalindrome brute force implementation strings
cactus to tree dp graphs trees
the number games data structures greedy trees
perfect groups dp math number theory
posterized games greedy
marlin constructive algorithms
links and pearls implementation math
kuro and topological parity dp
kuro and gcd and xor and sum binary search bitmasks brute force data structures dp dsu greedy math number theory strings trees
kuro and walking route dfs and similar trees
treasure hunt greedy
pizza, pizza, pizza!!! math
petya's exams greedy implementation sortings
mentors binary search data structures implementation
bus video system combinatorics math
almost arithmetic progression brute force implementation math
letters binary search implementation two pointers
file name greedy strings
remove duplicates implementation
consecutive subsequence dp
cyclic components dfs and similar dsu graphs
divide by three, multiply by two dfs and similar math sortings
less or equal sortings
two-gram implementation strings
wrong subtraction implementation
minimal k-covering flows graphs
well played! greedy sortings
degree set constructive algorithms graphs implementation
nested segments greedy implementation sortings
lara croft and the new game implementation math
minimum binary number implementation
hag's khashba geometry
ghosts geometry math
valhalla siege binary search
mancala brute force implementation
aramic script implementation strings
watering system math sortings
mind the gap implementation
short code data structures dp greedy strings trees
single-use stones binary search flows greedy two pointers
greedy arkady math
battleship implementation
paper airplanes math
messages math
splits math
circles of waiting math
frequency of string hashing string suffix structures strings
cutting rectangle brute force math number theory
destruction of a tree constructive algorithms dfs and similar dp greedy trees
alternating sum math number theory
visible black areas data structures dsu geometry trees
simple cycles edges dfs and similar graphs trees
byteland, berland and disputed cities constructive algorithms greedy
merge equals data structures implementation
make a square brute force implementation math
students in railway carriage constructive algorithms greedy implementation
equator implementation
partitions combinatorics math number theory
k-substrings binary search hashing string suffix structures
tufurama data structures
pair of lines geometry
chessboard bitmasks brute force implementation
lecture sleep data structures dp implementation two pointers
tetris implementation
santa's gift data structures trees
bandit blues combinatorics dp fft math
pathwalks data structures dp graphs
alternating tree combinatorics dfs and similar divide and conquer dp probabilities trees
full binary tree queries brute force implementation trees
subsequence counting bitmasks constructive algorithms greedy implementation
minimize the error data structures greedy sortings
check the string implementation
mahmoud and ehab and yet another xor task bitmasks dp math matrices
mahmoud and ehab and the xor-mst bitmasks dp graphs implementation math
mahmoud and ehab and another array construction task constructive algorithms greedy math number theory
mahmoud and ehab and the wrong algorithm constructive algorithms trees
mahmoud and ehab and the message dsu greedy implementation
mahmoud and ehab and the even-odd game games math
lightsabers (hard) fft
lightsabers (medium) binary search two pointers
lightsabers (easy) implementation
guard duty (hard) geometry
guard duty (medium) binary search dp greedy sortings
guard duty (easy) brute force geometry greedy math
hyperspace jump (hard)
hyperspace jump (easy) expression parsing math
encryption (hard) data structures dp
encryption (medium) dp
encryption (easy) brute force
maximum control (medium) data structures dfs and similar graphs greedy trees
maximum control (easy) implementation
death stars (hard)
death stars (medium) hashing strings
death stars (easy) implementation
tritonic iridescence implementation
heaps dp trees
icicles
scissors brute force strings
sad powers binary search math number theory
not simply beatiful strings implementation
feed the cat greedy math
yet another string matching problem fft math
path counting combinatorics dp
castle defense binary search data structures greedy two pointers
runner's problem dp matrices sortings
water taps binary search greedy sortings
fight against traffic dfs and similar graphs shortest paths
matrix walk implementation
string typing implementation strings
diagonal walking implementation
puzzling language constructive algorithms
2 + 2 != 4
cheese board
i'm feeling lucky! probabilities
ravioli sort implementation
a map of the cat brute force interactive
quirky quantifiers math
intercepted message greedy implementation
left-handers, right-handers and ambidexters implementation math
astronomy geometry probabilities
binary cards brute force
curfew binary search brute force greedy sortings
data center maintenance dfs and similar graphs
a leapfrog in the array constructive algorithms math
zebras greedy
protect sheep brute force dfs and similar graphs implementation
almost increasing array data structures dp
fibonacci string subsequences combinatorics dp matrices
largest beautiful number greedy implementation
timetable dp
string transformation greedy strings
weird subtraction process math number theory
partition greedy
machine learning brute force data structures
cashback data structures dp greedy math
alena and the heater binary search implementation
phone numbers constructive algorithms implementation strings
our tanya is crying out loud dp greedy
points on the line brute force greedy sortings
cutlet data structures dp
maximize! binary search greedy ternary search two pointers
love rescue dfs and similar dsu graphs greedy strings
convenient for everybody binary search two pointers
hamster farm implementation
love triangle graphs
shortest path queries bitmasks data structures dsu graphs
erasing substrings bitmasks dp greedy
max history combinatorics math
buy a ticket data structures graphs shortest paths
constructing tests binary search brute force constructive algorithms
run for your prize brute force greedy
word correction implementation
vile grasshoppers brute force math number theory
olympiad implementation sortings
iqea data structures dfs and similar divide and conquer dsu shortest paths trees
world of tank dp greedy
lock puzzle constructive algorithms implementation strings
sleepy game dfs and similar dp games graphs
save energy! binary search implementation math
fafa and array data structures greedy
fafa and ancient mathematics dfs and similar dp trees
fafa and ancient alphabet math probabilities
fifa and fafa geometry
fafa and the gates implementation
fafa and his company brute force implementation
a prosperous lot constructive algorithms implementation
a compatible pair brute force games
a preponderant reunion constructive algorithms dp
a creative cutout brute force combinatorics math
a colourful prospect geometry graphs
a determined cleanup math
a twisty movement dp
palindrome partition dp string suffix structures strings
escape through leaf data structures dp geometry
team work combinatorics dp math
tree binary search dp trees
permutation cycle brute force constructive algorithms
recursive queries binary search data structures dfs and similar
palindromic supersequence constructive algorithms
laboratory work implementation math
world cup constructive algorithms implementation
friends meeting brute force greedy implementation math
coins exhibition data structures dp math
game with tokens data structures games implementation
teodor is not a liar! data structures dp
game with string implementation probabilities strings
peculiar apple-tree dfs and similar graphs trees
пограничные врата
красивая команда *special combinatorics math
места в самолёте *special implementation
прокат велосипедов *special greedy implementation
autocompletion *special strings trees
dependency management *special graphs implementation
chat *special dp
login verification *special strings
buberpool taxi optimization *special interactive
segments data structures
a vital problem
endless roses most beautiful
large bouquets
mobile communications
merge equal elements constructive algorithms data structures
choose place
is this a zebra? implementation
add points math number theory
2-3-numbers implementation math
parametric circulation binary search flows
may holidays data structures trees
aztec catacombs constructive algorithms
big secret constructive algorithms math
resource distribution binary search implementation sortings
stairs and elevators binary search
minimal subset difference dp
wardrobe dp greedy
contact atc
riverside curio data structures dp greedy
three-level laser binary search greedy two pointers
mystical mosaic greedy implementation
public service constructive algorithms graphs trees
perpetual subtraction fft math matrices
picking strings constructive algorithms implementation strings
perfect security data structures greedy strings trees
producing snow binary search data structures
primal sport math number theory
divisibility constructive algorithms dp greedy number theory
birds dp
robot vacuum cleaner greedy sortings
cave painting brute force number theory
magic forest brute force
cloning toys implementation
labyrinth-14
labyrinth-13
labyrinth-12
labyrinth-11
labyrinth-10
labyrinth-9
labyrinth-8
labyrinth-7
labyrinth-6
labyrinth-5
labyrinth-4
labyrinth-3
labyrinth-2
labyrinth-1
list of integers binary search bitmasks brute force combinatorics math number theory
sum and replace brute force data structures dsu number theory
connected components? data structures dfs and similar dsu graphs
tanks dp greedy implementation
swap adjacent elements dfs and similar greedy math sortings two pointers
tea queue implementation
water the garden implementation
a game with numbers games graphs shortest paths
congruence equation chinese remainder theorem math number theory
substring dfs and similar dp graphs
seat arrangements brute force implementation
perfect number binary search brute force dp implementation number theory
supermarket brute force greedy implementation
radio station implementation strings
eleven brute force implementation
upside down data structures string suffix structures strings trees
stranger trees dp math matrices trees
pollywog combinatorics dp matrices
madmax dfs and similar dp games graphs
the monster dp greedy implementation math
jamie and tree data structures trees
jamie and to-do list data structures interactive trees
jamie and interesting graph constructive algorithms graphs shortest paths
jamie and binary sequence (changed after round) bitmasks greedy math
jamie and alarm snooze brute force implementation math
coprime arrays math number theory
imbalance value of a tree data structures dsu graphs trees
physical education lessons data structures implementation sortings
almost acyclic graph dfs and similar graphs
permute digits dp greedy
browser implementation
garden implementation
ember and storm's tree game combinatorics dp games trees
sum the fibonacci bitmasks divide and conquer dp fft math
substrings in a string bitmasks brute force data structures string suffix structures strings
palindromes in a tree bitmasks data structures divide and conquer trees
bash and a tough math puzzle data structures number theory
travelling salesman and special numbers brute force combinatorics dp
conan and agasa play a card game games greedy implementation
perfect squares brute force implementation math
don't exceed math probabilities
power substring math number theory
strongly connected tournament dp graphs math probabilities
logical expression bitmasks dp shortest paths
too easy problems binary search brute force data structures greedy sortings
party lemonade bitmasks dp greedy
christmas spruce implementation trees
modular exponentiation implementation math
prime gift binary search dfs and similar math meet-in-the-middle number theory two pointers
fishes data structures graphs greedy probabilities shortest paths
perun, ult! brute force greedy sortings
new year's eve bitmasks constructive algorithms number theory
tricky alchemy implementation
mass change queries data structures
tree destruction constructive algorithms dfs and similar graphs greedy trees
stack sorting constructive algorithms data structures greedy implementation
inversion counting brute force math
three garlands brute force constructive algorithms
two cakes binary search brute force implementation
nearest minimums implementation
minimum sum constructive algorithms greedy math
door frames greedy implementation
the way to home dfs and similar dp greedy implementation
and-permutations constructive algorithms
coprocessor dfs and similar dp graphs greedy
colorful points data structures greedy implementation
python indentation dp
segments constructive algorithms math
generate login brute force greedy sortings
new year and boolean bridges
new year and original order dp math
new year and rainbow roads graphs greedy implementation
new year and entity enumeration bitmasks combinatorics dp math
new year and arbitrary arrangement dp math probabilities
new year and curling brute force geometry implementation math
new year and buggy bot brute force implementation
new year and counting cards brute force implementation
tic-tac-toe implementation
masha and bears brute force implementation
reverses dp string suffix structures strings
power tower chinese remainder theorem math number theory
party bitmasks brute force dp graphs
seating of students brute force constructive algorithms math
shockers implementation strings
yet another maxflow problem data structures flows graphs
clear the matrix bitmasks dp
swapping characters brute force hashing implementation strings
almost difference data structures math
boxes packing greedy
the modcrab greedy implementation
hungry student problem greedy implementation
coloring a tree dfs and similar dsu greedy
visiting a friend greedy implementation
cyclic cipher fft math
weighting a tree constructive algorithms dfs and similar graphs
bipartite segments binary search data structures dfs and similar dsu graphs two pointers
gcd of polynomials constructive algorithms math
hashing trees constructive algorithms trees
maximum questions data structures dp strings
unusual sequences bitmasks combinatorics dp math number theory
remove extra one brute force data structures math
position in fraction math number theory
find extra one geometry implementation
letters removing data structures strings
segments removal data structures dsu flows implementation two pointers
shovel sale constructive algorithms math
dividing the numbers constructive algorithms graphs math
months and years implementation
splitting in teams constructive algorithms greedy math
restoring the expression brute force hashing math
squares and not squares constructive algorithms greedy
alarm clock greedy
phone numbers implementation strings
proper nutrition brute force implementation number theory
rounding implementation math
chtholly's request brute force
scarborough fair implementation
welcome home, chtholly data structures dsu
nephren runs a cinema chinese remainder theorem combinatorics math number theory
willem, chtholly and seniorious data structures probabilities
ithea plays with chtholly binary search constructive algorithms games greedy interactive
nephren gives a riddle binary search dfs and similar
eyes closed data structures probabilities
string mark combinatorics math strings
square subsets bitmasks combinatorics dp math
xk segments binary search math sortings two pointers
pizza separation brute force implementation
ralph and mushrooms dp graphs
ralph and his tour in binary country brute force data structures trees
marco and gcd sequence constructive algorithms math
ralph and his magic field combinatorics constructive algorithms math number theory
qaq brute force dp
subtree minimum query data structures trees
counting arrays combinatorics dp math number theory
credit card data structures dp greedy implementation
rumor dfs and similar graphs greedy
beautiful divisors brute force implementation
chess for three implementation
wrath greedy implementation two pointers
greed greedy implementation
lust combinatorics math matrices
sloth dfs and similar dp graph matchings trees
envy data structures dsu graphs
gluttony constructive algorithms greedy
pride brute force dp greedy math number theory
mod mod mod binary search dp math
xor-mst bitmasks constructive algorithms data structures
connecting vertices dp graphs
maximum subsequence bitmasks divide and conquer meet-in-the-middle
almost identity permutations combinatorics dp math
k-dominant character binary search implementation two pointers
buggy robot greedy
local extrema brute force implementation
row of models greedy sortings
little brother binary search geometry sortings
ratings and reality shows data structures two pointers
solution for cube brute force implementation
cubes for masha brute force implementation
div. 64 implementation
symmetric projections geometry
maximum element combinatorics dp math
restoration of string constructive algorithms graphs implementation
petya and catacombs dsu greedy implementation trees
vlad and cafes
acm icpc brute force
anti-palindromize flows graphs greedy
binary matrix dsu
boxes and balls data structures greedy
bertown subway dfs and similar greedy math
japanese crosswords strike back implementation
book reading implementation
quadcopter competition greedy math
berland.taxi data structures
road widening constructive algorithms greedy implementation
renovation constructive algorithms greedy sortings
photo processing binary search dp
palindromic cut brute force implementation strings
orientation of edges dfs and similar graphs
lost in transliteration implementation
field of wonders implementation strings
packmen strike back binary search dp math
downloading b++ binary search implementation
berland army constructive algorithms graphs greedy
automatic door implementation
table tennis data structures implementation
borya's diagnosis implementation
numbers on the blackboard combinatorics dp
magic breeding bitmasks
tournament data structures graphs
teams formation data structures implementation
short program bitmasks constructive algorithms
ann and books data structures flows hashing
danil and a part-time job bitmasks data structures trees
olya and energy drinks data structures dfs and similar graphs shortest paths
slava and tanks constructive algorithms
nikita and string brute force dp
alex and broken contest implementation strings
divisiblity of differences implementation math number theory
trip for meal math
royal questions dsu graphs greedy
delivery club binary search data structures dp
high cry binary search bitmasks combinatorics data structures divide and conquer
national property 2-sat dfs and similar graphs implementation
sorting the coins dsu implementation sortings two pointers
classroom watch brute force math
forbidden indices dsu string suffix structures strings
awards for contestants brute force data structures dp
merge sort constructive algorithms divide and conquer
strange game on matrix greedy two pointers
balanced substring dp implementation
chores implementation
restore the tree graphs greedy trees
paths data structures number theory
points, lines and ready-made titles dfs and similar dsu graphs trees
something with xor queries brute force interactive probabilities
maximum splitting dp greedy math number theory
maximum of maximums of minimums greedy
search for pretty integers brute force implementation
the untended antiquity data structures hashing
the overdosing ubiquity brute force dfs and similar graphs
the intriguing obsession combinatorics dp math
the eternal immortality math
the artful expedient brute force implementation
el toll caves math
yet another minimization problem divide and conquer dp
policeman and a tree dp graphs trees
huge strings bitmasks brute force dp implementation strings
qualification rounds bitmasks brute force constructive algorithms dp
race against time implementation
bark to unlock brute force implementation strings
between the offices implementation
flowers and chocolate combinatorics math matrices
egg roulette bitmasks brute force divide and conquer math meet-in-the-middle
hex dyslexia bitmasks brute force dp graphs
buy low sell high constructive algorithms data structures greedy
gotta go fast binary search dp
ordering pizza binary search sortings ternary search
save the problem! constructive algorithms
cities excursions dfs and similar graphs trees
fire dp sortings
make a permutation! greedy implementation math
bus greedy implementation math
polycarp and letters brute force implementation strings
fair game implementation sortings
graphic settings
almost permutation flows
turn off the tv data structures sortings
yet another array queries problem data structures implementation
1-2-3 graphs implementation
kayaking brute force greedy sortings
quasi-palindrome brute force implementation
mahmoud and ehab and the final stage data structures strings
mahmoud and ehab and the function binary search data structures sortings
mahmoud and ehab and the binary string binary search divide and conquer interactive
mahmoud and ehab and the xor constructive algorithms
mahmoud and ehab and the bipartiteness dfs and similar graphs trees
mahmoud and ehab and the mex greedy implementation
arkady and a nobody-men data structures dfs and similar trees
circle of numbers math
ordering t-shirts greedy
desk disorder combinatorics dfs and similar dsu graphs trees
third month insanity dp probabilities trees
pie rules dp games
lazy security guard brute force geometry math
declined finalists greedy implementation
wizard's tour constructive algorithms dfs and similar graphs
tests renumeration greedy implementation
polycarp's phone book data structures implementation sortings
did you mean... dp greedy implementation
which floor? brute force implementation
k-rounding brute force math number theory
to play or not to play greedy
satellites
masha and cactus dp trees
eleventh birthday combinatorics dp math
similar words dp hashing strings trees
set theory brute force constructive algorithms
harry vs voldemort dfs and similar dp graphs trees
nagini binary search data structures
salazar slytherin's locket bitmasks dp
rowena ravenclaw's diadem trees
helga hufflepuff's cup dp trees
marvolo gaunt's ring brute force data structures dp
tom riddle's diary brute force implementation strings
maxim buys an apartment constructive algorithms math
fraction brute force constructive algorithms math
lada malina data structures geometry
michael and charging stations binary search dp greedy
boredom data structures
jury meeting greedy sortings two pointers
planning greedy
dating brute force dfs and similar graphs trees
bob and stages dp geometry
bathroom terminal implementation
product transformation combinatorics math number theory
casinos and travel dp
exploration plan binary search flows graph matchings shortest paths
property greedy sortings
neural network country dp matrices
digits brute force implementation math
arpa and an exam about geometry geometry math
arpa and a research in mexican wave implementation math
rainbow balls math
random elections bitmasks brute force divide and conquer fft math
tournament construction constructive algorithms dp graphs greedy math
arpa and a game with mojtaba bitmasks dp games
arpa and a list of numbers implementation number theory
five dimensional points brute force geometry math
tell your world brute force geometry
odds and ends implementation
days of floral colours combinatorics divide and conquer dp fft math
shake it! combinatorics dp flows graphs
goodbye souvenir data structures divide and conquer
rooter's song constructive algorithms data structures geometry implementation sortings two pointers
from y to y constructive algorithms
weather tomorrow implementation math
berland su computer network constructive algorithms dfs and similar graphs hashing trees
travel cards greedy implementation sortings
students initiation binary search flows graphs
noise level dfs and similar implementation math
load testing greedy
university classes implementation
berland elections greedy sortings
packmen binary search dp
dog show constructive algorithms data structures greedy
sum of nestings constructive algorithms
preparing for merge sort binary search data structures
union of doubly linked lists implementation
random query data structures math probabilities two pointers
chemistry in berland dfs and similar greedy trees
monitor binary search data structures
four segments brute force data structures dp
math show brute force greedy
curriculum vitae brute force implementation
shortest path problem? dfs and similar graphs math
guards in the storehouse bitmasks dp
fire in the city binary search data structures
driving test data structures dp greedy
two tvs data structures greedy sortings
luba and the ticket brute force greedy implementation
chess tourney implementation sortings
rectangles combinatorics math
diversity greedy implementation strings
maximum flow flows graphs
dynamic shortest path graphs shortest paths
upgrading tree constructive algorithms dfs and similar graphs math trees
interactive lowerbound brute force interactive probabilities
sorting by subsequences dfs and similar dsu implementation math sortings
nikita and game binary search dfs and similar divide and conquer graphs trees
vitya and strange lesson binary search data structures
ilya and the tree dfs and similar graphs math number theory trees
gleb and pizza geometry
kirill and the game brute force two pointers
godsend games math
generous kefa brute force implementation
in a trap trees
destiny data structures probabilities
on the bench combinatorics dp
leha and another game about graph constructive algorithms data structures dfs and similar dp graphs
leha and function combinatorics greedy math number theory sortings
mother of dragons brute force graphs math meet-in-the-middle
winter is here combinatorics dp math number theory
journey dfs and similar dp graphs probabilities trees
game of the rows brute force greedy implementation
arya and bran implementation
expected earnings
convex countour dp
airplane arrangements math number theory
future failure dp games
diverging directions data structures dfs and similar trees
binary blocks brute force
functions on the segments data structures
prefix sums binary search brute force combinatorics math matrices
vasya's function binary search implementation math
round subset dp math
two seals brute force implementation
flag of berland brute force implementation
text volume implementation
roads in the kingdom dfs and similar dp graphs trees
the penguin's game binary search constructive algorithms interactive
palindromic characteristics brute force dp hashing strings
star sky dp implementation
the number on the board greedy
key races math
the festive evening data structures implementation
the useless toy implementation
caramel clouds data structures dp sortings
red-black cobweb data structures divide and conquer implementation trees
ever-hungry krakozyabra brute force combinatorics greedy math
the bakery binary search data structures divide and conquer dp two pointers
the meaningless game math number theory
vasya and shifts matrices
misha, grisha and underground dfs and similar graphs trees
strange radiation binary search implementation math
petya and exam implementation strings
sasha and sticks games math
jury marks brute force constructive algorithms
keyboard layouts implementation strings
unimodal array implementation
perpetual motion machine constructive algorithms dp graphs implementation math trees
singer house combinatorics dp graphs trees
bamboo partition brute force data structures implementation math number theory sortings two pointers
cards sorting data structures implementation sortings
office keys binary search brute force dp greedy sortings
black square implementation
restaurant tables implementation
dirty arkady's kitchen data structures dp graphs shortest paths
rusty string fft math strings
best edge weight data structures dfs and similar graphs trees
dna evolution data structures strings
high load constructive algorithms greedy implementation trees
string reconstruction data structures greedy sortings strings
tree queries dfs and similar graphs trees
string compression dp hashing string suffix structures strings
minimal labels data structures dfs and similar graphs greedy
suitable replacement binary search greedy implementation
multi-judge solving greedy implementation
five-in-a-row brute force implementation
binary protocol implementation
madness constructive algorithms dfs and similar trees
liar binary search dp hashing string suffix structures
my pretty girl noora brute force dp greedy math number theory
hacker, pack your bags! binary search greedy implementation sortings
crossword solving brute force implementation strings
i'm bored with life implementation math number theory
okabe and el psy kongroo dp matrices
okabe and city dfs and similar graphs shortest paths
okabe and boxes data structures greedy trees
okabe and banana trees brute force math
okabe and future gadget laboratory implementation
mister b and angle in polygon constructive algorithms geometry math
mister b and book reading implementation
mister b and flight to the moon constructive algorithms graphs
mister b and astronomers number theory
mister b and beacons on field number theory
mister b and pr shifts data structures implementation math
mister b and boring game games greedy
four melodies flows graphs
level generation binary search math ternary search
card game again binary search data structures number theory two pointers
multicolored cars data structures implementation
sofa thief brute force implementation
permutation game implementation
diplomas and certificates implementation math
mex queries binary search data structures trees
choosing the commander bitmasks data structures trees
imbalanced array data structures divide and conquer dsu sortings
really big numbers binary search brute force dp math
makes and the product combinatorics implementation math sortings
treasure hunt implementation math number theory
karen and coffee binary search data structures implementation
karen and morning brute force implementation
karen and neighborhood binary search constructive algorithms implementation
karen and cards binary search combinatorics data structures geometry
karen and supermarket brute force dp trees
karen and test brute force combinatorics constructive algorithms math
karen and game brute force greedy implementation
an unavoidable detour for home combinatorics dp graphs shortest paths
an overnight dance in discotheque dfs and similar dp geometry greedy trees
an impassioned circulation of affection brute force dp strings two pointers
an express train to reveries constructive algorithms
an abandoned sentiment from past constructive algorithms greedy implementation sortings
bipartite checking data structures dsu graphs
army creation binary search data structures
two melodies dp flows
the tag game dfs and similar graphs
the golden age brute force math
the contest implementation
sagheer and apple tree games trees
sagheer and kindergarten dfs and similar graphs implementation trees
sagheer and nubian market binary search sortings
sagheer, the hausmeister bitmasks brute force dp
sagheer and crossroads implementation
vladik and entertaining flags data structures dsu graphs
vladik and favorite game constructive algorithms dfs and similar graphs interactive
vladik and memorable trip dp implementation
vladik and complicated book implementation sortings
vladik and courtesy brute force implementation
summer sell-off greedy sortings
straight <<a>> implementation math
surprise me! divide and conquer math number theory trees
hitchhiking in the baltic states data structures dp
find a car combinatorics divide and conquer dp
glad to see you! binary search interactive
do you want a date? implementation math sortings
anthem of berland dp strings
card game binary search flows graphs
selling souvenirs binary search dp greedy ternary search
array division binary search data structures implementation
tea party constructive algorithms greedy sortings
average sleep time data structures implementation math
lucky year implementation
t-shirt hunt brute force implementation
is it rated? implementation sortings
3-palindrome constructive algorithms
fake np greedy math
fake bullions combinatorics dfs and similar dp graphs number theory
the same permutation constructive algorithms
expected diameter of a tree binary search brute force dfs and similar dp sortings trees
ice cream coloring constructive algorithms dfs and similar greedy
minimum number of steps combinatorics greedy implementation math
find amir constructive algorithms greedy math
periodic rmq problem data structures
coprime subsequences bitmasks combinatorics number theory
roma and poker dp graphs
magazine ad binary search greedy
maximal gcd constructive algorithms greedy math
distances to zero constructive algorithms
maximal binary matrix constructive algorithms
april fools' problem (hard) binary search data structures flows
april fools' problem (medium) binary search flows graphs
april fools' problem (easy) greedy sortings
send the fool further! (hard) dfs and similar dp math trees
send the fool further! (medium) dp trees
send the fool further! (easy) dfs and similar graphs trees
fake news (hard) string suffix structures
fake news (medium) constructive algorithms strings
fake news (easy) implementation strings
marmots (hard) math probabilities
marmots (medium) math
marmots (easy) math
heidi and library (hard) flows
heidi and library (medium) data structures greedy
heidi and library (easy) greedy
valued keys constructive algorithms greedy strings
vicious keyboard brute force
cut the pie binary search data structures geometry
beautiful fountains rows data structures
aquarium decoration data structures greedy two pointers
field expansion brute force dp meet-in-the-middle
fountains binary search data structures implementation
t-shirt buying data structures implementation
carrot cakes brute force implementation
mike and code of a permutation constructive algorithms data structures graphs sortings
mike and distribution constructive algorithms sortings
mike and gcd problem dp greedy number theory
mike and strings brute force dp strings
mike and palindrome brute force constructive algorithms strings
mice and holes data structures dp greedy sortings
array queries brute force data structures dp
broken bst data structures dfs and similar
minimal string data structures greedy strings
odd sum dp greedy implementation
k-factorization implementation math number theory
sequence recovery bitmasks data structures greedy
exam cheating binary search dp
police stations constructive algorithms dfs and similar dp graphs shortest paths trees
bank hacking constructive algorithms data structures dp trees
find the bone implementation
buying a house brute force implementation
replace all combinatorics dp math
leha and security system data structures
choosing carrot games math
labelling cities dfs and similar graphs hashing
naming company games greedy sortings
cutting carrot geometry math
bank robbery brute force implementation
oleg and chess data structures divide and conquer flows graph matchings
julia the snail data structures divide and conquer dp
problem of offices constructive algorithms dfs and similar dp trees
presents in bankopolis dp graphs shortest paths
mice problem geometry implementation math sortings
igor and his way to work dfs and similar graphs implementation shortest paths
oleg and shares implementation math
mages and monsters data structures geometry
colored balls greedy math number theory
paths in a complete binary tree bitmasks trees
divide by three dp greedy math number theory
counting-out rhyme implementation
new bus route implementation sortings
bear and big brother implementation
masha and geometric depression brute force implementation math
anastasia and pebbles implementation math
new task data structures
finding lines constructive algorithms divide and conquer interactive
the great mixing dfs and similar graphs shortest paths
weird journey combinatorics constructive algorithms dfs and similar dsu graphs
functions again dp two pointers
not afraid greedy implementation math
the monster brute force math number theory
alt data structures flows graphs trees
rap god data structures dfs and similar hashing strings trees
till i collapse data structures divide and conquer
legacy data structures graphs shortest paths
berzerk dfs and similar dp games
anton and permutation brute force data structures
anton and school - 2 combinatorics dp math number theory
anton and fairy tale binary search math
anton and classes greedy sortings
anton and polyhedrons implementation strings
bf calculator *special
crunching numbers just for you *special implementation
twisted circuit *special brute force implementation
touchy-feely palindromes *special implementation
intercalc *special implementation
kids' riddle *special
numbers joke *special
intranet of buses binary search geometry implementation two pointers
andryusha and nervous barriers data structures dp
axel and marston in bitland bitmasks dp graphs matrices
underground lab constructive algorithms dfs and similar graphs
innokenty and a football league 2-sat graphs greedy implementation shortest paths strings
andryusha and colored balloons dfs and similar graphs greedy trees
the meeting place cannot be changed binary search
andryusha and socks implementation
dishonest sellers constructive algorithms greedy sortings
weird rounding brute force greedy
pupils redistribution constructive algorithms math
selling numbers dp sortings
parquet re-laying constructive algorithms
peterson polyglot brute force dfs and similar dsu hashing strings trees
bitwise formula bitmasks brute force dfs and similar expression parsing implementation
string game binary search greedy strings
hanoi factory brute force data structures dp greedy sortings
cloud of hashtags binary search greedy implementation strings
alyona and spreadsheet binary search data structures dp greedy implementation two pointers
game of credit cards data structures dp greedy sortings
shell game constructive algorithms implementation math
sherlock and the encrypted data bitmasks combinatorics dp
sherlock's bet to moriarty constructive algorithms data structures divide and conquer geometry graphs implementation trees
the holmes children math number theory
the door problem 2-sat dfs and similar dsu graphs
molly's chemicals binary search brute force data structures implementation math
sherlock and his girlfriend constructive algorithms number theory
a serial killer brute force implementation strings
university schedule *special
bars *special binary search
stepan and vowels *special implementation strings
stepan's series *special dp
composing of string *special dp
repairing of string *special constructive algorithms
perfectionist arkadiy *special number theory
pens and days of week *special binary search number theory
big number and remainder *special math number theory
lie or truth *special constructive algorithms implementation sortings
maximum number *special constructive algorithms greedy implementation
significant cups *special binary search data structures two pointers
amusement park *special ternary search
test data generation combinatorics divide and conquer dp fft math number theory
blog post rating data structures sortings
perishable roads dp graphs shortest paths
prairie partition binary search constructive algorithms greedy math
dynamic problem scoring brute force greedy
success rate binary search math
verifying kingdom binary search divide and conquer interactive trees
varying kibibits bitmasks dp
vulnerable kerbals constructive algorithms dp graphs math number theory
volatile kite geometry
voltage keepsake binary search math
bear and isomorphic points geometry two pointers
bear and rectangle strips dp greedy
bear and company dp
bear and tree jumps dfs and similar dp trees
bear and different names constructive algorithms greedy
bear and friendship condition dfs and similar dsu graphs
draw brackets! *special implementation
online courses in bsu *special dfs and similar graphs implementation
maximize sum of digits *special implementation math
new password *special implementation
k-interesting pairs of integers *special bitmasks brute force meet-in-the-middle
cycle in maze *special dfs and similar graphs greedy shortest paths
news about credit *special greedy two pointers
year of university entrance *special implementation sortings
the winds of winter binary search data structures
barrels and boxes brute force combinatorics math number theory probabilities
game of stones bitmasks dp games
jon and orbs dp math probabilities
jon snow and his favourite number brute force dp implementation sortings
code for 1 constructive algorithms dfs and similar divide and conquer
oath of the night's watch constructive algorithms sortings
change-free greedy
cartons of milk binary search data structures greedy sortings two pointers
garland dfs and similar graphs greedy trees
the queue brute force greedy
snacktower data structures implementation
mahmoud and a xor trip bitmasks constructive algorithms data structures dfs and similar dp math trees
mahmoud and a dictionary data structures dfs and similar dp dsu graphs
mahmoud and a message brute force dp greedy strings
mahmoud and a triangle constructive algorithms geometry greedy math number theory sortings
mahmoud and longest uncommon subsequence constructive algorithms strings
math, math everywhere brute force dp math meet-in-the-middle number theory
souvenirs data structures
tree folding dfs and similar dp greedy implementation trees
artsem and saunders constructive algorithms dsu math
table tennis game 2 math
code obfuscation greedy implementation strings
neverending competitions implementation math
timofey and cubes constructive algorithms implementation
taymyr is calling you brute force implementation math
timofey and our friends animals data structures divide and conquer dsu
timofey and a flat tree data structures graphs hashing shortest paths trees
timofey and remoduling brute force implementation math number theory
timofey and rectangles constructive algorithms geometry
timofey and a tree dfs and similar dp dsu graphs implementation trees
tree nesting combinatorics graphs trees
radio stations binary search data structures
maximum path dp greedy implementation
two strings binary search hashing strings two pointers
usb vs. ps/2 greedy implementation sortings two pointers
k-th divisor math number theory
dasha and photos brute force data structures dp implementation
dasha and puzzle constructive algorithms dfs and similar graphs greedy trees
dasha and very difficult problem binary search brute force constructive algorithms greedy sortings
dasha and password brute force dp implementation
dasha and friends brute force implementation math
dasha and stairs brute force constructive algorithms implementation math
frodo and pillows binary search greedy
petr and a calendar implementation math
geometrical progression brute force math number theory
broken tree dfs and similar dp graphs greedy trees
ability to convert constructive algorithms dp greedy math strings
unfair poll binary search constructive algorithms implementation math
blown garland brute force implementation number theory
holiday of equality implementation math
can bash save the day? data structures divide and conquer graphs trees
team rocket rises again data structures graphs shortest paths
bash plays with functions brute force combinatorics dp number theory
felicity's big secret revealed bitmasks dp
felicity is coming! data structures hashing sortings strings
bash's big day greedy math number theory
gotta catch em' all! implementation
long number expression parsing math number theory
byteland coins combinatorics dp math
bacterial melee brute force combinatorics dp string suffix structures
nikita and stack data structures
travel card binary search dp
pavel and barbecue constructive algorithms dfs and similar
polandball and many other balls combinatorics divide and conquer dp fft math number theory
polandball and gifts bitmasks dp greedy
polandball and white-red graph constructive algorithms graphs shortest paths
polandball and polygon data structures
polandball and forest dfs and similar dsu graphs interactive trees
polandball and game binary search data structures games greedy sortings strings
polandball and hypothesis brute force graphs math number theory
dasha and cyclic table bitmasks brute force fft strings trees
fedor and coupons binary search data structures greedy sortings
vladik and chat brute force constructive algorithms dp implementation strings
ilya and tic-tac-toe game brute force implementation
lesha and array splitting constructive algorithms greedy implementation
interactive bulls and cows (hard) brute force constructive algorithms interactive
interactive bulls and cows (easy) brute force constructive algorithms implementation
santa claus and candies dp greedy math
new year and snowy grid dfs and similar dsu graphs interactive
new year and binary tree paths bitmasks brute force combinatorics dp
new year and finding roots constructive algorithms implementation interactive trees
new year and old subsequence data structures divide and conquer dp matrices
new year and fireworks brute force data structures dfs and similar dp implementation
new year and rating binary search greedy math
new year and north pole geometry implementation
new year and hurry binary search brute force implementation math
inversions after shuffle data structures probabilities
leaving auction binary search data structures
voting greedy implementation two pointers
parallelogram is back brute force constructive algorithms geometry
bachgold problem greedy implementation math number theory
santa clauses and a soccer championship constructive algorithms dfs and similar graphs trees
santa claus and tangerines binary search data structures greedy two pointers
santa claus and a palindrome constructive algorithms data structures greedy
santa claus and robot constructive algorithms math
santa claus and keyboard check implementation strings
santa claus and a place in a class implementation math
igor and interesting numbers brute force combinatorics dp math
comments dfs and similar expression parsing implementation strings
winter is coming dp greedy sortings
servers implementation
mammoth's genome decoding implementation strings
display size brute force math
new roads constructive algorithms graphs trees
music in car data structures greedy two pointers
numbers exchange greedy implementation math
green and black tea constructive algorithms greedy math
tram constructive algorithms implementation math
decoding implementation strings
compote implementation math
hongcow solves a puzzle implementation
hongcow learns the cyclic shift implementation strings
hongcow masters the cyclic shift strings two pointers
hongcow draws a circle geometry
hongcow buys a deck of cards bitmasks brute force dp
hongcow's game bitmasks divide and conquer interactive
hongcow builds a nation dfs and similar graphs
vladik and cards binary search bitmasks brute force dp
chloe and pleasant prizes dfs and similar dp graphs trees
vladik and fractions brute force constructive algorithms math number theory
chloe and the sequence binary search bitmasks constructive algorithms implementation
vladik and flights constructive algorithms greedy implementation
arpa’s obvious problem and mehrdad’s terrible solution brute force math number theory
arpa’s hard exam and mehrdad’s naive cheat implementation math number theory
arpa’s abnormal dna and mehrdad’s deep interest data structures string suffix structures
arpa’s letter-marked tree and mehrdad’s dokhtar-kosh paths data structures dfs and similar trees
arpa’s overnight party and mehrdad’s silent entering constructive algorithms dfs and similar graphs
arpa's weak amphitheater and mehrdad's valuable hoses dfs and similar dp dsu
arpa's loud owf and mehrdad's evil plan dfs and similar math
alyona and flowers constructive algorithms
alyona and copybooks brute force implementation
gosha is hunting brute force data structures dp flows math probabilities sortings
recover a functional graph graph matchings
alyona and towers data structures
alyona and a tree binary search data structures dfs and similar graphs trees
alyona and mex constructive algorithms greedy
dirty plates constructive algorithms math
tanya is 5! graph matchings graphs greedy schedules
chess championship constructive algorithms flows greedy math
permutations math matrices
ostap and tree dp trees
taxes math number theory
tennis championship combinatorics constructive algorithms greedy math
urbanization greedy number theory sortings
ostap and grasshopper implementation strings
anton and school bitmasks constructive algorithms implementation math
anton and tree dfs and similar dp trees
anton and chess implementation
anton and making potions binary search dp greedy two pointers
anton and digits brute force greedy implementation math
anton and danik implementation strings
drivers dissatisfaction data structures dsu graphs trees
sleep in class constructive algorithms data structures math two pointers
kostya the sculptor data structures hashing
epidemic in monstropolis constructive algorithms dp greedy two pointers
parade math
grasshopper and the string implementation
tourist reform dfs and similar graphs
sockets greedy sortings
exams binary search greedy sortings
sanatorium binary search constructive algorithms greedy implementation math
cormen --- the best friend of a man dp greedy
buy a shovel brute force constructive algorithms implementation math
video cards brute force data structures implementation math number theory
funny game dp games
80-th level archeology brute force data structures greedy sortings
socks dfs and similar dsu graphs greedy
coupons and discounts constructive algorithms greedy
night at the museum implementation strings
expression queries data structures
roads orientation problem graphs
bottles dp
olympiad in programming and sports dp flows graphs greedy
delete them constructive algorithms implementation
car repair shop implementation
ber patio
award ceremony greedy implementation
running over the bridges greedy implementation math
bulmart binary search dfs and similar
minimum and maximum constructive algorithms interactive
toda 2 greedy implementation
financiers game dp
subordinates constructive algorithms data structures graphs greedy sortings
sea battle constructive algorithms greedy math
road to cinema binary search greedy sortings
spotlights dp implementation
interview with oleg implementation strings
polycarp's problems binary search dp greedy
games on a cd data structures hashing string suffix structures strings
t-shirts distribution constructive algorithms flows greedy
guess the array constructive algorithms interactive math
bill total value expression parsing implementation strings
transformation: from a to b brute force dfs and similar math
messages on a tree
family photos games greedy
too much money brute force greedy
contest balloons data structures greedy
hidden word brute force constructive algorithms implementation strings
food on the plane implementation math
jumping ball implementation
xor-matic number of the graph bitmasks graphs math number theory trees
uniformly branched trees combinatorics dp trees
goods transportation dp flows greedy
dense subsequence data structures greedy strings
ray tracing greedy hashing implementation math number theory sortings
batch sort brute force greedy implementation math
checking the calendar implementation
st-spanning tree dsu graphs greedy implementation
one-way reform constructive algorithms dfs and similar flows graphs greedy
lakes in berland dfs and similar dsu graphs greedy implementation
polycarp at the radio greedy
text document analysis expression parsing implementation strings
the new year: meeting friends implementation math sortings
cyclic cipher chinese remainder theorem data structures implementation number theory two pointers
research rover combinatorics dp
generating sets binary search data structures dfs and similar greedy strings trees
destroying array data structures dsu
verse pattern implementation strings
broken clock brute force implementation
road to home binary search dp
maxim and array constructive algorithms data structures greedy math
journey dp graphs
passwords implementation math sortings strings
one-dimensional japanese crossword implementation
array covering data structures
cipher implementation
slalom data structures dp sortings
homework constructive algorithms
cactusophobia dfs and similar flows
closing ceremony greedy
anatoly and cockroaches greedy
vitya in the countryside implementation
matvey's birthday bitmasks graphs
andrew and chemistry dp hashing trees
sasha and array data structures math matrices
efim and strange grade dp implementation math
cowboy beblop at his computer geometry
pokermon league challenge math probabilities
underfail flows
heroes of making magic iii data structures
paint it really, really dark gray dfs and similar
dexterina’s lab games matrices probabilities
potions homework implementation sortings
r3d3’s summer adventure dp greedy
festival organization combinatorics math number theory
complete the word greedy two pointers
crazy computer implementation
complete the permutations combinatorics fft graphs math
create a maze constructive algorithms
digit tree dfs and similar divide and conquer dsu trees
complete the graph binary search constructive algorithms graphs shortest paths
plus and square root constructive algorithms math
filya and homework implementation sortings
meeting of old friends implementation math
sonya partymaker binary search dp
animals and puzzle binary search data structures
sonya and problem wihtout a legend dp sortings
searching rectangles binary search constructive algorithms interactive
sonya and queries data structures implementation
memory and casinos data structures math probabilities
memory and scores combinatorics dp math
memory and de-evolution greedy math
memory and trident implementation strings
memory and crow implementation math
zs and the birthday paradox math number theory probabilities
directed roads combinatorics dfs and similar graphs math
coloring trees dp
chris and magic square constructive algorithms implementation
bus to udayland brute force implementation
string set queries brute force data structures hashing interactive string suffix structures strings
generate a string dfs and similar dp
two arithmetic progressions math number theory
magic odd square constructive algorithms math
optimal point on a line brute force sortings
king moves implementation
checkpoints greedy implementation sortings
juicer implementation
student's camp dp math
incorrect flow flows
centroids data structures dfs and similar dp graphs greedy trees
recover the string constructive algorithms greedy implementation math
letters cyclic shift constructive algorithms greedy implementation strings
garlands data structures
persistent bookcase bitmasks data structures dfs and similar implementation
pythagorean triples math number theory
bakery graphs
brain's photos implementation
working routine data structures implementation
vasiliy's multiset binary search bitmasks data structures trees
hard problem dp strings
interesting drink binary search dp implementation
beru-taxi brute force geometry implementation
spider man games math
hulk implementation
iron man data structures geometry trees
captain america flows greedy
black widow dp graphs implementation math
ant man dp graphs greedy
thor brute force data structures implementation
mishka and divisors dp number theory
mishka and interesting sum data structures
chris and road geometry implementation
mishka and trip implementation math
mishka and game implementation
t-shirts data structures
analysis of pathes in functional graph data structures graphs
road to post office math
cellular network binary search implementation two pointers
powers of two brute force data structures implementation math
maximum increase dp greedy implementation
they are everywhere binary search strings two pointers
cells not under attack data structures math
cards greedy implementation
cool slogans string suffix structures strings
huffman coding on segment data structures greedy
break up dfs and similar graphs
connecting universities dfs and similar dp graphs trees
as fast as possible binary search math
one bomb implementation
launch of collider implementation
coprime permutation combinatorics number theory
cron
limak and shooting points brute force geometry math
lru bitmasks dp math probabilities
fix a tree constructive algorithms dfs and similar dsu graphs trees
vacations dp
barnicle brute force implementation math strings
pineapple incident implementation math
...dary! binary search geometry two pointers
...wait for it... data structures dsu trees
legen... data structures dp matrices strings
please combinatorics dp implementation math matrices
puzzles dfs and similar math probabilities trees
lorenzo von matterhorn brute force data structures implementation trees
couple cover brute force dp number theory
xor-sequences matrices
swaps in permutation dfs and similar dsu math
exponential notation implementation strings
s-palindrome implementation strings
fashion in berland implementation
tree of life (hard) trees
tree of life (medium) constructive algorithms hashing trees
tree of life (easy)
photographs (ii)
photographs (i)
the wall (hard) dp
the wall (medium) combinatorics
the wall (easy)
brain network (hard) trees
brain network (medium) dfs and similar graphs trees
brain network (easy)
recover polygon (hard) data structures
recover polygon (medium) geometry
recover polygon (easy)
collective mindsets (hard)
collective mindsets (medium)
collective mindsets (easy)
mike and geometry problem combinatorics data structures dp geometry implementation
friends and subsequences binary search data structures
mike and chocolate thieves binary search combinatorics math
mike and shortcuts dfs and similar graphs greedy shortest paths
mike and cellphone brute force constructive algorithms implementation
lovely palindromes constructive algorithms math
opponents implementation
tof dfs and similar graphs
dividing kingdom ii brute force data structures dsu graphs sortings
the values you can make dp
remainders game chinese remainder theorem math number theory
np-hard problem dfs and similar graphs
little robber girl's zoo constructive algorithms implementation sortings
free ice cream constructive algorithms implementation
travelling through the snow queen's kingdom bitmasks brute force divide and conquer graphs
kay and eternity brute force implementation sortings
optimal point binary search math
kay and snowflake data structures dfs and similar dp trees
robbers' watch brute force combinatorics dp math
the hero with bombs *special
loader *special graphs
exchange of books *special
the fraction *special
reformat the string *special
hammer throwing *special
chocolate bar *special math
symmetric difference *special
the teacher of physical education *special
the check of the point *special geometry
alyona and triangles geometry two pointers
alyona and strings dp strings
alyona and the tree dfs and similar dp graphs trees
alyona and mex sortings
alyona and numbers constructive algorithms math number theory
runaway to a shadow geometry sortings
gifts by the list constructive algorithms dfs and similar graphs trees
heap operations constructive algorithms data structures greedy
economy game brute force
a good contest implementation
bear and finding criminals constructive algorithms implementation
bear and five cards constructive algorithms implementation
bear and bad powers of 42 data structures
bear and chase brute force dfs and similar graphs implementation math probabilities
bear and square grid dfs and similar dsu implementation
bear and tower of cubes binary search dp greedy
bear and prime 100 constructive algorithms interactive math
lena and queries data structures divide and conquer geometry
another sith tournament bitmasks dp math probabilities
iterated linear function math number theory
joty and chocolate implementation math number theory
the same calendar implementation
johny likes numbers implementation math
vanya and balloons binary search brute force dp implementation
vanya and treasure data structures dp graphs shortest paths
vanya and label bitmasks combinatorics implementation strings
vanya and food processor implementation math
vanya and fence implementation
the last fight between human and ai math
theseus and labyrinth graphs implementation shortest paths
vasya and string binary search dp strings two pointers
pyramid of glasses implementation math math
nicholas and permutation constructive algorithms implementation
trains and statistic data structures dp greedy
tree construction data structures trees
money transfers constructive algorithms data structures greedy sortings
restoring painting brute force constructive algorithms math
infinite sequence math
problems for round greedy implementation
bear and game implementation
different is good constructive algorithms implementation strings
summer camp implementation
organizing a race data structures greedy
roads in yusland data structures dp greedy
ultimate weirdness of an array data structures number theory
robin hood binary search greedy
recycling bottles dp geometry greedy implementation
restore a number brute force constructive algorithms strings
correct bracket sequence editor data structures dsu strings
magic powder - 2 binary search implementation
magic powder - 1 binary search brute force implementation
cinema implementation sortings
game of robots implementation
holidays brute force constructive algorithms greedy math
little artem and presents math
coat of anticubism constructive algorithms geometry
pouring rain geometry math
forensic examination data structures string suffix structures
chain reaction brute force geometry
codeword combinatorics strings
world tour graphs shortest paths
reberland linguistics dp implementation strings
four divisors data structures dp math number theory sortings two pointers
beautiful subarrays data structures divide and conquer strings trees
simple subset constructive algorithms greedy number theory
simple strings dp greedy strings
shopping brute force
buses between cities implementation
complicated gcd math number theory
rebus constructive algorithms expression parsing greedy math
to hack or not to hack brute force dp greedy
international olympiad constructive algorithms greedy implementation math
binary table bitmasks brute force divide and conquer dp fft math
graph coloring dfs and similar graphs
gambling nim bitmasks math matrices probabilities
rotate matrix *special
hungarian notation *special
primes in interval *special
divisibility check *special
maximal difference *special
array sum *special
seasons *special
lazy caterer sequence *special
bear and bowling 4 binary search data structures divide and conquer geometry ternary search
different subsets for all tuples combinatorics math
number of parallelograms geometry
hard process binary search dp two pointers
seating on bus implementation
co-prime array greedy implementation math number theory
fence divercity combinatorics dp number theory
polycarp and hay dfs and similar dsu graphs greedy sortings
new reform data structures dfs and similar dsu graphs greedy
bicycle race geometry implementation math
tanya and toys greedy implementation
qualifying contest constructive algorithms sortings
round house implementation math
bear and reverse radewoosh implementation
you're a professional *special
ace it! *special
out of controls *special
rosetta problem *special
without text *special
scrambled *special implementation
da vinci powers *special
move by prime combinatorics math number theory
paper task data structures string suffix structures strings
bear and forgotten tree 2 dfs and similar dsu graphs trees
delivery bears binary search flows graphs
bear and up-down brute force implementation
bear and compressing brute force dfs and similar dp strings
bear and three balls brute force implementation sortings
ants on a circle constructive algorithms math
pursuit for artifacts dfs and similar dsu graphs trees
nested segments data structures sortings
foe pairs combinatorics sortings two pointers
z-sort sortings
gabriel and caterpillar implementation math
beautiful paintings greedy sortings
joysticks dp greedy implementation math
clockwork bomb data structures dfs and similar dsu greedy trees
zip-line binary search data structures dp hashing
table compression dfs and similar dp dsu graphs greedy
image preview binary search brute force dp two pointers
watchmen data structures geometry math
автобус binary search data structures greedy sortings
дефрагментация памяти constructive algorithms greedy implementation
печать условий constructive algorithms greedy sortings
этажи constructive algorithms
любимые числа поликарпа constructive algorithms implementation
собери число graphs shortest paths
собачки и миски data structures greedy sortings
путь робота constructive algorithms dfs and similar graphs
собери стол constructive algorithms sortings
наибольший подъем constructive algorithms implementation
armistice area apportionment binary search geometry
cowslip collections combinatorics math number theory
intellectual inquiry dp greedy strings
robot rapping results report binary search dp graphs
enduring exodus binary search two pointers
mischievous mess makers greedy math
amity assessment brute force constructive algorithms implementation
hostname aliases *special binary search data structures implementation sortings strings
processing queries *special constructive algorithms data structures two pointers
parliament of berland *special constructive algorithms
choosing ads data structures
bears and juice dp math meet-in-the-middle
bear and destroying subtrees dp math probabilities trees
bearish fanpages
levels and regions dp
bear and two paths constructive algorithms graphs
bear and colors implementation
little artem and graph
little artem and 2-sat
little artem and time machine data structures
little artem and random variable dp implementation math probabilities
little artem and dance brute force constructive algorithms implementation
little artem and matrix implementation
little artem and grasshopper implementation
bear and chemistry data structures dfs and similar graphs trees
bear and paradox binary search greedy math sortings
bear and contribution data structures greedy sortings two pointers
bear and polynomials hashing implementation math
bear and forgotten tree 3 constructive algorithms graphs trees
bear and displayed friends implementation
three-dimensional turtle super computer brute force dfs and similar graphs
road improvement *special dfs and similar graphs greedy trees
making genome in berland *special dfs and similar strings
home numbers *special constructive algorithms math
running with obstacles *special data structures dp greedy
promocodes with mistakes *special brute force constructive algorithms implementation
chat order *special binary search constructive algorithms data structures sortings
voting for photos *special constructive algorithms implementation
orchestra brute force implementation
island puzzle constructive algorithms implementation
fibonacci-ish ii data structures implementation
yash and trees bitmasks data structures dfs and similar math number theory
the chocolate spree dfs and similar dp graphs trees
startup funding binary search constructive algorithms data structures probabilities two pointers
fibonacci-ish brute force dp hashing implementation math
spy syndrome 2 data structures dp hashing implementation sortings string suffix structures strings
a trivial problem brute force constructive algorithms math number theory
ebony and ivory brute force math number theory
magic matrix brute force divide and conquer graphs matrices trees
thief in a shop divide and conquer dp fft math
longest subsequence brute force math number theory
the smallest string concatenation sortings strings
alice, bob, two teams brute force constructive algorithms
grandma laura and apples
product sum data structures dp geometry
messenger data structures hashing implementation string suffix structures strings
report data structures sortings
print check constructive algorithms implementation
interview brute force implementation
game games math
pyramids geometry math
area of a star geometry
arrow geometry
forecast math
turn geometry math
cracking the code implementation math
indivisibility math number theory
divisibility math number theory
parking lot combinatorics math
benches combinatorics math
challenge pennants combinatorics math
selection of personnel combinatorics math
a rectangle math
hexagons! math
lucky numbers combinatorics math
moore's law math
again twenty five! number theory
famil door and roads combinatorics data structures dfs and similar dp probabilities trees
babaei and birthday cake data structures dp
famil door and brackets dp strings
far relative’s problem brute force
far relative’s birthday cake brute force combinatorics constructive algorithms implementation
bear and fair set flows graphs
zbazi in zeydabad data structures implementation
magic numbers dp
bear and string distance greedy strings
new skateboard dp
tennis tournament implementation math
island puzzle dfs and similar dsu graphs trees
orchestra two pointers
preorder test binary search dfs and similar dp graphs greedy trees
package delivery data structures divide and conquer greedy
factory repairs data structures
xor equation dp math
raffles data structures dp greedy math
group projects dp
simple skewness binary search math ternary search
jerry's protest brute force combinatorics dp probabilities
block towers brute force greedy math number theory
cards constructive algorithms dp math
robot sequence brute force implementation
frog fights data structures greedy
finals in arithmetic constructive algorithms implementation math
k-special tables constructive algorithms implementation
war of the corporations constructive algorithms greedy strings
guest from the past implementation math
making a string greedy sortings
save luke math
transforming sequence combinatorics dp fft math
birthday greedy math probabilities
electric charges binary search dp
array gcd dp greedy number theory
graph and string constructive algorithms graphs
the sum of the k-th powers math
ants in leaves dfs and similar greedy sortings trees
optimal number permutation constructive algorithms
not equal on a segment data structures implementation
the time implementation
infinite sequence implementation math
wet shark and blocks dp matrices
rat kwesh and cheese brute force constructive algorithms math
wet shark and flowers combinatorics math number theory probabilities
wet shark and bishops combinatorics implementation
wet shark and odd and even implementation
xors on segments data structures strings trees
new year tree bitmasks data structures trees
professor gukiz and two arrays binary search two pointers
pearls in a row greedy
grandfather dovlet’s calculator implementation
professor gukiz's robot implementation math
combining slimes dp math matrices probabilities
double knapsack constructive algorithms two pointers
robot arm data structures geometry
hamiltonian spanning tree dfs and similar dp graph matchings greedy trees
constellation geometry implementation
guess the permutation constructive algorithms
slime combining implementation
xor and favorite number data structures
polyline constructive algorithms implementation
watering flowers implementation
chocolate combinatorics
elephant math
expensive strings data structures sortings string suffix structures strings
sum of remainders implementation math number theory
longest k-good segment binary search data structures two pointers
the labyrinth dfs and similar
dinner with emma games greedy
comparing two long integers implementation strings
hexagons binary search implementation math
multipliers math number theory
running track dp greedy strings trees
longtail hedgehog dp graphs
bulbs implementation
gena's code implementation math
link/cut tree brute force implementation
puzzle lover dp hashing strings
kingdom and its cities dfs and similar divide and conquer dp graphs sortings trees
necklace constructive algorithms math
skills binary search brute force dp greedy sortings two pointers
peter and snow blower binary search geometry ternary search
simba on the circle dp
square root of permutation combinatorics constructive algorithms dfs and similar graphs math
the union of k-segments greedy sortings
replace to make regular bracket sequence data structures expression parsing math
hdd is outdated technology implementation math
the text splitting brute force implementation strings
new year and forgotten tree constructive algorithms flows graphs
new year and cake geometry two pointers
new year and cleaning binary search implementation
new year and three musketeers data structures greedy sortings
new year and ancient prophecy dp hashing strings
new year and domino dp implementation
new year and old property bitmasks brute force implementation
new year and days implementation
alphabet permutations data structures strings
vika and segments constructive algorithms data structures geometry two pointers
harmony analysis constructive algorithms
vika and squares constructive algorithms implementation
pasha and stick combinatorics math
frogs and mosquitoes data structures greedy
minimum spanning tree for each edge data structures dfs and similar dsu graphs trees
gadgets for dollars and pounds binary search greedy two pointers
load balancing implementation math
the best gift constructive algorithms implementation
usb flash drives greedy implementation sortings
hamming distance sum combinatorics strings
saitama destroys hotel implementation math
cross sum binary search geometry
power tree data structures trees
marbles hashing strings
zuma dp
chain reaction binary search dp
testing robots implementation
magic spheres implementation
intergalaxy trips probabilities shortest paths
board game data structures dfs and similar
freelancer's dreams geometry
lazy student constructive algorithms data structures graphs
sorting railway cars constructive algorithms greedy
more cowbell binary search greedy
uncowed forces implementation
pastoral oddities data structures divide and conquer dsu math trees
ruminations on ruminants geometry math
lieges of legendre games math
moodular arithmetic combinatorics dfs and similar dsu math number theory
alternative thinking dp greedy math
approximating a constant range dp implementation two pointers
two bases brute force implementation
a museum robbery data structures dp
acyclic organic compounds data structures dfs and similar dsu hashing strings trees
kleofáš and the n-thlon dp math probabilities
lipshitz sequence data structures math
the two routes graphs shortest paths
edge coloring of bipartite graph graphs
lomsat gelral data structures dfs and similar dsu trees
area of two circles' intersection geometry
make palindrome constructive algorithms greedy strings
queries about less or equal elements binary search data structures sortings two pointers
extract numbers implementation strings
sandy and nuts bitmasks dp trees
spongebob and squares brute force math
day at the beach sortings
spongebob and joke implementation
patrick and shopping implementation
cut length geometry
chocolate bar brute force dp
igor in the museum dfs and similar graphs shortest paths
nearest vectors geometry sortings
queries on a string implementation strings
tricky sum math
subsequences data structures dp
restaurant dp greedy sortings
divisibility math
wilbur and strings dfs and similar dp graphs strings
wilbur and trees dp math probabilities sortings
wilbur and points combinatorics greedy sortings
wilbur and array greedy implementation
wilbur and swimming pool geometry implementation
pasha and phone binary search math
vitaly and night constructive algorithms implementation
cutting the line string suffix structures strings
req data structures number theory
edo and magnets brute force greedy implementation two pointers
max and bike binary search geometry
warrior and archer games
strange calculation and cats dp matrices
happy tree party data structures dfs and similar graphs math trees
beautiful function constructive algorithms math
anton and lines geometry sortings
2char brute force implementation
bcpc binary search geometry two pointers
super m dfs and similar dp graphs trees
the big race math
the monster and the squirrel math
pawnchess implementation
rebranding implementation strings
wizards' duel implementation math
birthday graph matchings strings
top secret task dp
three states dfs and similar graphs shortest paths
chip 'n dale rescue rangers binary search geometry math
median smoothing implementation
duff in love math
duff and meat greedy
duff is mad data structures strings
duff as a queen data structures
duff in mafia 2-sat binary search
duff in the army data structures trees
duff in beach dp
duff and weight lifting greedy
laurenty and shop implementation
alena's schedule implementation
digits of number pi dp implementation strings
present for vitalik the philatelist combinatorics math number theory
lizard era: beginning meet-in-the-middle
alice, bob, oranges and apples number theory
phillip and trains dfs and similar graphs shortest paths
gennady the dentist brute force implementation
anton and ira constructive algorithms greedy math
dima and lisa brute force math number theory
marina and vasya constructive algorithms greedy strings
kolya and tanya combinatorics
olesya and rodion math
robot's task greedy implementation
asphalting roads implementation
boolean function bitmasks dp expression parsing
number of binominal coefficients dp math number theory
superior periodic subarrays number theory
once again... constructive algorithms dp matrices
gcd table constructive algorithms greedy number theory
zublicanes and mumocrates dp trees two pointers
kojiro and furrari dp greedy
three logos bitmasks brute force constructive algorithms geometry implementation math
developing skills implementation math sortings
luxurious houses implementation math
vasya the hipster implementation math
kefa and watch data structures hashing strings
kefa and dishes bitmasks dp
kefa and park dfs and similar graphs trees
kefa and company binary search sortings two pointers
kefa and first steps brute force dp implementation
finding team member brute force implementation sortings
raising bacteria bitmasks
mirror box matrices trees
walking! constructive algorithms greedy
lcs again dp greedy
weakness and poorness ternary search
"or" game brute force greedy
a problem about polyline geometry math
modulo sum combinatorics data structures dp two pointers
multiplication table implementation number theory
painting edges binary search data structures
flights for regular customers dp matrices
points on plane constructive algorithms divide and conquer geometry greedy sortings
invariance of tree constructive algorithms dfs and similar greedy trees
vasya and petya's game math number theory
robots protection data structures
bots combinatorics dp math number theory
run for beer dfs and similar shortest paths
bulbo dp greedy
spectator riots geometry
tablecity constructive algorithms implementation
party bitmasks brute force graph matchings
bribes dfs and similar graphs trees
fibonotci data structures math matrices
bear and three musketeers brute force dfs and similar graphs hashing
bear and elections greedy implementation
bear and bowling data structures greedy
bear and cavalry data structures divide and conquer dp
bear and drawing constructive algorithms dfs and similar trees
bear and blocks binary search data structures dp math
bear and poker implementation math number theory
order book data structures greedy implementation sortings
arrays sortings
geometric progressions math
campus binary search data structures dsu trees
cnf 2 constructive algorithms dfs and similar graphs greedy
minimization dp greedy sortings
lengthening sticks combinatorics implementation math
pig and palindromes combinatorics dp
tree requests binary search bitmasks constructive algorithms dfs and similar graphs trees
replacement constructive algorithms data structures implementation
simple game constructive algorithms games greedy implementation math
elections implementation
inventory greedy math
music implementation math
longest increasing subsequence data structures dp
sign posts brute force geometry math
new language 2-sat greedy
symmetric and transitive combinatorics dp math
primes or palindromes? brute force implementation math number theory
mausoleum dp
president and roads dfs and similar graphs hashing shortest paths
one-dimensional battle ships binary search data structures greedy sortings
geometric progression binary search data structures dp
berland national library implementation
lineland mail greedy implementation
max and min geometry
clique in the divisibility graph dp math number theory
restoring map bitmasks constructive algorithms trees
restructuring company data structures dsu
logistical questions dfs and similar divide and conquer trees
replicating processes constructive algorithms greedy
matching names dfs and similar strings trees
gerald is into art constructive algorithms implementation
currency system in geraldion implementation sortings
gerald and path dp sortings
randomizer combinatorics geometry probabilities
gerald and giant chess combinatorics dp math number theory
equivalent strings divide and conquer hashing sortings strings
gerald's hexagon brute force geometry math
a simple task data structures sortings strings
guess your way out! ii data structures implementation sortings
amr and chemistry brute force graphs greedy math shortest paths
amr and the large array implementation
lala land and apple trees brute force implementation sortings
ann and half-palindrome data structures dp graphs string suffix structures strings trees
vitaly and cycle combinatorics dfs and similar graphs math
arthur and table brute force data structures dp greedy math sortings
pasha and tea constructive algorithms implementation math sortings
ilya and diplomas greedy implementation math
case of fake numbers brute force implementation
case of the zeros and ones greedy
case of computer network dfs and similar graphs trees
case of a top secret binary search implementation math
case of chocolate data structures
case of fugitive data structures greedy sortings
case of matryoshkas implementation
ohana cleans up brute force greedy strings
kyoya and photobooks brute force math strings
kyoya and train dp fft graphs math probabilities
nudist beach binary search graphs greedy
love triangles dfs and similar dsu graphs
kyoya and permutation binary search combinatorics constructive algorithms greedy implementation math
kyoya and colored balls combinatorics dp math
vanya and brackets brute force dp expression parsing greedy implementation strings
vanya and triangles brute force combinatorics data structures geometry math sortings
vanya and scales brute force dp greedy math meet-in-the-middle number theory
vanya and books implementation math
vanya and table implementation math
gukiz and gukiziana binary search data structures implementation
gukiz and binary operations combinatorics implementation math matrices number theory
gukiz hates boxes binary search greedy
zgukistringz brute force constructive algorithms implementation strings
gukiz and contest brute force implementation sortings
brackets in implications constructive algorithms greedy implementation math
regular bridge constructive algorithms graphs implementation
divisibility by eight brute force dp math
preparing olympiad bitmasks brute force
two substrings brute force dp greedy implementation strings
degenerate matrix binary search math
happy line constructive algorithms greedy sortings
yura and developers data structures divide and conquer
sasha circle geometry math
haar features greedy implementation
the game of parity games
looksery party constructive algorithms dfs and similar graphs greedy
face detection implementation strings
mike and fun brute force dp greedy implementation
mike and fax brute force implementation strings
mike and friends data structures string suffix structures strings trees
mike and fish constructive algorithms dfs and similar graphs
mike and foam bitmasks combinatorics dp math number theory
mike and feet binary search data structures dp dsu
mike and frog brute force greedy implementation math
soldier and traveling flows graphs math
soldier and number game constructive algorithms dp math number theory
soldier and cards brute force dfs and similar games
soldier and badges brute force greedy implementation sortings
soldier and bananas brute force implementation math
paths and trees graphs greedy shortest paths
queue greedy implementation sortings
woodcutters dp greedy
equidistant string greedy
toy cars implementation
sea and islands constructive algorithms implementation
set of strings implementation strings
listening to music constructive algorithms data structures
road improvement dp trees
remembering strings bitmasks dp
destroying roads constructive algorithms graphs shortest paths
writing code dp
quest dp greedy
playing on graph graphs shortest paths
superhero's job dfs and similar dp hashing math number theory
idempotent functions constructive algorithms graphs math
duck hunt data structures
place your ad here data structures sortings
infinite inversions binary search data structures implementation sortings trees
bad luck island dp probabilities
ice cave dfs and similar
school marks greedy implementation
combination lock implementation
summer dichotomy 2-sat data structures dfs and similar greedy
berserk robot constructive algorithms math sortings
a heap of heaps brute force data structures math sortings
demiurges play again dfs and similar dp math trees
weird chess brute force constructive algorithms implementation
tourist's notes binary search brute force greedy implementation math
quasi binary constructive algorithms dp greedy implementation
cutting banner brute force implementation
tavas on the path data structures divide and conquer trees
tavas in kansas dp games
tavas and pashmaks geometry math
tavas and malekas greedy hashing string suffix structures strings
tavas and karafs binary search greedy math
tavas and saddas bitmasks brute force combinatorics implementation
tavas and nafas brute force implementation
simplified nonogram bitmasks dp hashing meet-in-the-middle
berland local positioning system constructive algorithms greedy hashing implementation
handshakes binary search constructive algorithms data structures greedy
polycarpus' dice math
covered path dp greedy math
exam constructive algorithms implementation math
encoding hashing string suffix structures strings
correcting mistakes constructive algorithms dp greedy hashing strings two pointers
landmarks data structures dp
board game games greedy implementation math
work group dfs and similar dp graphs strings trees
berland miners binary search data structures dfs and similar greedy trees
different variables *special
points in triangle *special geometry
levenshtein distance *special
jumping frogs *special
sum and product *special
set subtraction *special
diophantine equation *special
string inside out *special
quadratic equation *special
group photo 2 (online mirror version) brute force greedy sortings
triangles 3000 geometry sortings
fuzzy search bitmasks brute force fft
data center drama dfs and similar graphs
clique problem data structures dp greedy implementation sortings
glass carving binary search data structures implementation
error correct system greedy
playing with paper implementation math
spiders evil plan greedy trees
pudding monsters data structures divide and conquer
transmitting levels dp implementation
om nom and necklace hashing string suffix structures strings
om nom and candies brute force greedy math
om nom and dark park dfs and similar greedy implementation
king of thieves brute force implementation
anya and cubes binary search bitmasks brute force dp math meet-in-the-middle
arthur and walls constructive algorithms data structures graphs greedy shortest paths
ilya and sticks greedy math sortings
pasha and string constructive algorithms greedy math strings
vitaliy and pie greedy hashing strings
and yet another bracket sequence data structures greedy hashing string suffix structures strings
rooks and rectangles data structures sortings
social network greedy two pointers
the art of dealing with atm binary search sortings
фото на память - 2 (round version) dp greedy
возможно, вы знаете этих людей? implementation
statistics of recompressing videos *special data structures implementation
name quest *special greedy
mean requests *special implementation
rotate, flip and zoom *special implementation
closest equals *special data structures
chicken or fish? greedy
photo to remember *special data structures dp implementation
reposts *special dfs and similar dp graphs trees
cycling city dfs and similar graphs
shop greedy
pluses everywhere combinatorics dp math number theory
cubes games greedy implementation
dna alignment math strings
two buttons dfs and similar graphs greedy implementation math shortest paths
pangram implementation strings
a and b and lecture rooms binary search data structures dfs and similar dp trees
a and b and interesting substrings data structures dp two pointers
a and b and team training greedy implementation math number theory
a and b and compilation errors data structures implementation sortings
a and b and chess implementation
pasha and pipe binary search brute force combinatorics dp implementation
arthur and questions greedy implementation math ternary search
ilya and escalator combinatorics dp math probabilities
anya and smartphone constructive algorithms data structures implementation
tanya and postcard greedy implementation strings
vitaly and strings constructive algorithms strings
drazil and his happy friends math number theory
drazil and morning exercise dfs and similar dp dsu trees two pointers
drazil and park data structures
drazil and tiles constructive algorithms greedy
drazil and factorial greedy math sortings
drazil and his happy friends brute force dsu meet-in-the-middle number theory
drazil and date math
darth vader and tree dp matrices
r2d2 and droid army binary search data structures two pointers
watto and mechanism binary search data structures hashing string suffix structures strings
han solo and lazer gun brute force data structures geometry implementation math
chewbaсca and number greedy implementation
inversions problem dp
inversions problem dp probabilities
inversions problem brute force dfs and similar dp meet-in-the-middle
scaygerboss flows
scaygerboss flows
subarray cuts dp
subarray cuts dp
constrained tree constructive algorithms data structures
constrained tree dfs and similar
second price auction bitmasks probabilities
permutations bitmasks divide and conquer math
permutations brute force
game constructive algorithms math
fox and polygon constructive algorithms divide and conquer
fox and travelling dp trees
fox and dinner flows
fox and jumping bitmasks brute force dp math
fox and names dfs and similar graphs sortings
fox and two dots dfs and similar
fox and snake implementation
progress monitoring dp trees
pretty song math strings
restoring numbers constructive algorithms math
sums of digits dp greedy implementation
painting pebbles constructive algorithms greedy implementation
maximum in table brute force implementation
arthur and brackets dp greedy
tanya and password dfs and similar graphs
anya and ghosts constructive algorithms greedy
anton and currency you all know greedy math strings
pasha and pixels brute force
breaking good dfs and similar dp graphs shortest paths
the maths lecture dp implementation
guess your way out! implementation math trees
amr and pins geometry math
amr and music greedy implementation sortings
mr. kitayuta's gift combinatorics dp matrices strings
mr. kitayuta's colorful graph brute force dfs and similar dsu graphs
mr. kitayuta vs. bamboos binary search greedy
mr. kitayuta's technology dfs and similar
mr. kitayuta, the treasure hunter dfs and similar dp two pointers
mr. kitayuta's colorful graph dfs and similar dp dsu graphs
mr. kitayuta's gift brute force implementation strings
misha and lcp on tree binary search dfs and similar hashing string suffix structures trees
misha and xor bitmasks
misha and palindrome degree binary search combinatorics implementation
misha and permutations summation data structures
misha and forest constructive algorithms data structures greedy sortings trees
misha and changing handles data structures dsu strings
contest implementation
new year running number theory trees
new year shopping divide and conquer dp
new year domino data structures dp dsu
new year santa network combinatorics dfs and similar graphs trees
new year book reading constructive algorithms greedy implementation math
new year permutation dfs and similar dsu graphs greedy math sortings
new year transportation dfs and similar graphs implementation
lecture implementation strings
watching a movie greedy implementation
stairs and lines dp matrices
traffic jams in the land data structures dp number theory
array and operations flows graph matchings number theory
name that tune dp probabilities two pointers
crazy town geometry
subsequences return dp matrices
gears brute force geometry math
distributing parts greedy sortings
tennis game binary search
removing columns brute force constructive algorithms implementation
secret combination brute force constructive algorithms implementation
minimum difficulty brute force implementation math
modular equations math number theory
digital counter implementation
sharti data structures games
birthday data structures dfs and similar dp trees
helping people dp probabilities
obsessive string dp strings
treasure greedy
vasya and polynomial math
vasya and chess constructive algorithms games math
vasya and basketball binary search brute force data structures implementation sortings two pointers
vasya and wrestling implementation
vasya and football implementation
vanya and field math
vanya and computer game binary search implementation math sortings
vanya and exams greedy sortings
vanya and lanterns binary search implementation math sortings
vanya and cubes implementation
deciphering flows graph matchings
new york hotel greedy math
up the hill constructive algorithms implementation
treeland tour data structures dfs and similar dp trees
restoring increasing sequence binary search brute force greedy implementation
chocolate brute force dfs and similar math meet-in-the-middle number theory
hacking cypher brute force math number theory strings
queue dsu implementation
team olympiad greedy implementation sortings
special matrices combinatorics dp
hiking binary search dp
unbearable controversy of being brute force combinatorics dfs and similar graphs
given length and sum of digits... dp greedy implementation
bersu ball dfs and similar dp graph matchings greedy sortings two pointers
swapsort greedy implementation sortings
candy boxes brute force constructive algorithms math
giga tower brute force
tourists data structures dfs and similar graphs trees
conveyor belts data structures
prefix product sequence constructive algorithms math number theory
strip binary search data structures dp two pointers
fight the monster binary search brute force implementation
lis of sequence data structures dp greedy hashing math
valid sets dfs and similar dp math trees
palindrome transformation brute force greedy implementation
or in matrix greedy hashing implementation
calculating function implementation math
valuable resources brute force greedy
factory implementation math matrices
sign on fence binary search constructive algorithms data structures
kindergarten data structures dp greedy
strange sorting implementation math
maximum value binary search math sortings two pointers
bits bitmasks constructive algorithms
friends and presents binary search math
counterexample brute force implementation math number theory
elca data structures trees
random function and tree combinatorics dp trees
game with strings bitmasks dp probabilities
interesting array constructive algorithms data structures trees
diverse permutation constructive algorithms greedy
parking lot data structures divide and conquer
parcels dp graphs
riding in a lift combinatorics dp
long jumps binary search greedy implementation
exams greedy sortings
towers brute force constructive algorithms greedy implementation sortings
expression brute force math
wavy numbers brute force dfs and similar meet-in-the-middle sortings
red-green towers dp
table decorations greedy
random teams combinatorics constructive algorithms greedy math
initial bet implementation
dreamoon and notepad data structures
dreamoon and binary dp strings
dreamoon and strings dp strings
dreamoon and sets constructive algorithms greedy math
dreamoon and sums math
dreamoon and wifi bitmasks brute force combinatorics dp math probabilities
dreamoon and stairs implementation math
meta-universe data structures
strongly connected city 2 dfs and similar
cgcdssq brute force data structures math
kamal-ol-molk's painting brute force constructive algorithms greedy
strongly connected city brute force dfs and similar graphs implementation
bayan bus implementation
ant colony data structures math number theory
pillars binary search data structures dp sortings trees
flowers dp
captain marmot brute force geometry
worms binary search implementation
keyboard implementation
design tutorial: increase the constraints bitmasks data structures fft
design tutorial: change the goal constructive algorithms math matrices
design tutorial: learn from a game constructive algorithms implementation
design tutorial: inverse the problem dfs and similar dsu shortest paths trees
design tutorial: make it nondeterministic greedy
design tutorial: learn from life
design tutorial: learn from math math number theory
muh and lots and lots of segments data structures dsu
muh and cube walls string suffix structures strings
muh and house of cards binary search brute force greedy math
muh and important things implementation sortings
muh and sticks implementation
array sorting *special
hamming distance *special
pairwise sums *special
chessboard *special
caesar cipher *special
eval *special
hexakosioihexekontahexaphobia *special
crystal ball sequence *special implementation
chat online implementation
i wanna be the guy greedy implementation
permanent dp graph matchings math meet-in-the-middle
tree graph matchings
hack it! binary search constructive algorithms math
two sets 2-sat dfs and similar dsu graph matchings greedy
24 game constructive algorithms greedy math
alex and complicated task data structures dp greedy
fedor and essay dfs and similar dp graphs hashing strings
george and job dp implementation
fedor and new game bitmasks brute force constructive algorithms implementation
george and accommodation implementation
information graph dfs and similar dsu graphs trees
increase sequence combinatorics dp
number of ways binary search brute force data structures dp two pointers
wonder room brute force math
cheap travel implementation
inbox (100500) implementation
inc arg implementation
the classic problem data structures graphs shortest paths
world of darkraft - 2 dp probabilities
substitutes in number dp
restore cube brute force geometry
no to palindromes! greedy strings
caisa and tree brute force dfs and similar math number theory trees
gargari and permutations dfs and similar dp graphs implementation
gargari and bishops greedy hashing implementation
caisa and pylons brute force implementation math
caisa and sugar brute force implementation
appleman and card game greedy
appleman and easy task brute force implementation
appleman and a game binary search shortest paths strings
appleman and complicated task dsu math
appleman and a sheet of paper data structures implementation
appleman and tree dfs and similar dp trees
appleman and toastman greedy sortings
roland and rose brute force geometry math sortings
little victor and set brute force constructive algorithms math
present binary search data structures greedy
little dima and equation brute force implementation math number theory
vasya and socks brute force implementation math
pashmak and graph dp sortings
pashmak and parmida's problem data structures divide and conquer sortings
pashmak and buses combinatorics constructive algorithms math
pashmak and flowers combinatorics implementation sortings
pashmak and garden implementation
an easy problem about trees dp games greedy trees
flow optimality constructive algorithms flows math
bingo! combinatorics math probabilities
elections brute force
distributed join greedy
golden system math meet-in-the-middle
fedya and maths math number theory
laptops sortings
function data structures
serega and fun data structures
civilization dfs and similar dp dsu ternary search trees
a lot of games dfs and similar dp games implementation strings trees
boredom dp
little pony and sort by shift implementation
little pony and crystal mine implementation
little pony and lord tirek data structures
little pony and elements of harmony dp matrices
little pony and summer sun celebration constructive algorithms dfs and similar graphs
little pony and harmony chest bitmasks brute force dp
little pony and expected maximum probabilities
permutation data structures divide and conquer hashing
three strings data structures dsu string suffix structures strings
washer, dryer, folder greedy implementation
magic trick combinatorics math probabilities
4-point polyline brute force constructive algorithms geometry trees
eevee brute force implementation strings
devu and flowers bitmasks combinatorics number theory
count good substrings math
predict outcome of the game brute force implementation math
sort the array implementation sortings
game with sticks implementation
jzzhu and sequences implementation math
jzzhu and children implementation
jzzhu and squares dp math number theory
jzzhu and numbers bitmasks combinatorics dp
jzzhu and apples constructive algorithms number theory
jzzhu and cities graphs greedy shortest paths
jzzhu and chocolate greedy math
divisors brute force dfs and similar implementation number theory
multiplication table binary search brute force
painting fence divide and conquer dp greedy
suffix structures implementation strings
rewards implementation
dzy loves strings greedy implementation
dzy loves hash implementation
dzy loves bridges math matrices
dzy loves games math matrices probabilities
dzy loves fibonacci numbers data structures math number theory
dzy loves modification brute force data structures greedy
dzy loves sequences dp implementation two pointers
dzy loves chemistry dfs and similar dsu greedy
dzy loves chessboard dfs and similar implementation
dzy loves planting binary search dsu trees
dzy loves strings binary search hashing strings two pointers
dzy loves colors data structures
dzy loves fft probabilities
dzy loves physics greedy math
kolya and tandem repeat brute force implementation strings
anton and letters constructive algorithms implementation
gena and second distance geometry
adam and tree data structures trees
artem and array data structures greedy
andrey and problem greedy math probabilities
borya and hanabi bitmasks brute force implementation
valera and number bitmasks dp math probabilities
valera and swaps constructive algorithms dsu graphs implementation math string suffix structures
valera and tubes constructive algorithms dfs and similar implementation
valera and fruits greedy implementation
valera and antique items implementation
berland federalization dp trees
one-based arithmetic brute force dfs and similar divide and conquer
balancer greedy implementation
forgotten episode implementation
devu and birthday celebration combinatorics dp math
devu and his brother binary search sortings ternary search two pointers
devu and partitioning of the array brute force constructive algorithms implementation number theory
devu, the dumb guy implementation sortings
devu, the singer and churu, the joker greedy implementation
the child and binary tree combinatorics divide and conquer fft number theory
the child and sequence data structures math
the child and polygon dp geometry
the child and zoo dsu sortings
the child and toy graphs greedy sortings
the child and set bitmasks greedy implementation sortings
the child and homework implementation
banners brute force data structures dp
cardboard box data structures greedy
pudding monsters dp
dungeons and candies dsu graphs greedy trees
om nom and spiders implementation math
feed with candy greedy
special graph
special grid brute force dp greedy
cardiogram implementation
pasha maximizes greedy
queue on bus stop implementation
furukawa nagisa's tree binary search divide and conquer sortings trees
nanami's power plant flows
tachibana kanade's tofu dp
nanami's digital board dsu implementation
ryouko's memory note implementation math sortings
kuriyama mirai's stones dp implementation sortings
kitahara haruki's gift brute force implementation
square tiling constructive algorithms greedy
prefixes and suffixes dp string suffix structures strings two pointers
prime swaps greedy sortings
football kit brute force greedy implementation
choosing teams greedy implementation sortings
chemistry experiment binary search data structures ternary search
random task binary search bitmasks combinatorics dp math
k-tree dp implementation trees
shower line brute force implementation
black square implementation
balls game brute force two pointers
points and segments (easy) constructive algorithms sortings
points and segments graphs
tricky function data structures divide and conquer geometry
guess the tree bitmasks constructive algorithms dp greedy trees
working out dp
xor-tree dfs and similar trees
police patrol greedy implementation math ternary search
match & catch dp string suffix structures strings
checkposts dfs and similar graphs two pointers
prison transfer data structures implementation
police recruits implementation
sereja and mirroring implementation
sereja and mugs implementation
sereja and sets dp
sereja and squares binary search data structures hashing
sereja and two sequences data structures dp
sereja and table bitmasks greedy
sereja and swaps brute force sortings
colored jenga dfs and similar dp probabilities
biathlon track binary search brute force constructive algorithms data structures dp
magic formulas math
megacity binary search greedy implementation sortings
squats implementation
bug in code binary search data structures sortings
pasha and hamsters constructive algorithms implementation
playing the ball geometry
cup trick data structures
bug in code data structures graphs implementation two pointers
online meeting implementation
start up implementation
tricky password data structures
big problems for organizers data structures graphs trees
square table constructive algorithms math probabilities
cunning gena bitmasks dp greedy sortings
football constructive algorithms graphs implementation
crash implementation
elimination dp implementation math
president's path dp graphs shortest paths
population size greedy implementation math
booking system binary search dp greedy implementation
art union brute force dp implementation
guess a number! greedy implementation two pointers
mashmokh and tokens binary search greedy implementation math
mashmokh and lights implementation
mashmokh's designed problem data structures
mashmokh and water tanks binary search data structures greedy trees two pointers
mashmokh and reverse operation combinatorics divide and conquer
mashmokh and acm combinatorics dp number theory
mashmokh and numbers constructive algorithms number theory
maze 2d data structures divide and conquer
2048 bitmasks dp
jeopardy! greedy math
spyke chatting implementation
data recovery implementation
e-mail addresses implementation
giving awards dfs and similar
pattern implementation strings
network configuration greedy sortings
poster greedy implementation
kicker implementation
multi-core processor implementation
password check *special implementation
feed the golorp *special
a + b strikes back *special brute force constructive algorithms dsu implementation
on a plane *special geometry
000001 *special
dome *special
big data *special
magnum opus *special
mysterious language *special
the great game *special
garland implementation
line to cashier implementation
k-d-sequence data structures
largest submatrix 3 dp hashing
curious array brute force combinatorics implementation math
long path dp implementation
triangle brute force geometry implementation math
hamming triples implementation math two pointers
hill climbing dfs and similar geometry trees
graph cutting dfs and similar graphs
toy sum greedy implementation math
unusual product implementation math
domino effect
gravity flip greedy implementation sortings
maze 1d binary search greedy implementation
minesweeper 1d dp implementation
restore graph dfs and similar graphs sortings
marathon implementation math
valera and x implementation
two rooted trees data structures implementation trees
beautiful pairs of numbers combinatorics dp
strictly positive matrix graphs math
upgrading array dp greedy math number theory
searching for graph brute force constructive algorithms graphs
trees in a row brute force implementation
nuts greedy math
olympic games math
roman and numbers bitmasks brute force combinatorics dp number theory
team constructive algorithms greedy implementation
sereja and contests greedy implementation math
vanya and cards implementation math
inna and binary logic binary search bitmasks data structures
dima and bacteria dsu graphs shortest paths
inna and huge candy matrix implementation math
inna and new matrix of candies brute force implementation schedules
inna and choose options implementation
red and blue balls
pages implementation
sorting permutations
instant messanger data structures
tree and array constructive algorithms
painting the wall dp probabilities
cards constructive algorithms implementation
on corruption and numbers constructive algorithms implementation math
on segment's own points implementation
on iteration of one well-known function math
on sum of number of inversions in permutations combinatorics math
on changing tree data structures graphs trees
on sum of fractions math number theory
on number of decompositions into multipliers combinatorics math number theory
lightbulb for minister geometry
physical education and buns brute force implementation math
dominoes constructive algorithms greedy
very beautiful number math
counting sticks brute force implementation
three matrices
nineteen
deleting substrings
three arrays data structures
yet another number sequence combinatorics math matrices
tower of hanoi dp
blocked points math
stock trading
stock trading greedy
stock trading dp
three trees
three trees
supercollider data structures
supercollider brute force
the tournament
the tournament greedy
the tournament brute force
word folding brute force
genetic engineering implementation two pointers
inna and large sweet matrix
inna and sweet matrix constructive algorithms
inna and candy boxes data structures
inna, dima and song implementation
inna and alarm clock implementation
fox and cross greedy implementation
fox and number game greedy math
fox and meteor shower geometry
fox and perfect sets math
fox and card game games greedy sortings
fox and minimal path bitmasks constructive algorithms graphs implementation math
fox and box accumulation greedy sortings
george and cards binary search data structures
george and interesting graph graph matchings
george and number greedy implementation
george and round brute force greedy two pointers
george and sleep implementation
game with points dp graphs implementation shortest paths
diverse substrings dp strings two pointers
fly, freebies, fly! binary search brute force implementation
second-price auction implementation
bear in the field math matrices
bear and floodlight bitmasks dp geometry
bear and prime numbers binary search brute force data structures dp implementation math number theory
bear and strings brute force greedy implementation math strings
bear and raspberry brute force greedy implementation
multitasking greedy implementation sortings two pointers
coder implementation
vowels combinatorics divide and conquer dp
antimatter dp
propagating tree data structures dfs and similar trees
volcanoes binary search implementation sortings two pointers
milking cows data structures greedy
ksenia and combinatorics combinatorics dp
ksenia and pawns dfs and similar graphs implementation trees
arithmetic progression implementation sortings
number busters binary search math
ksenia and pan scales greedy implementation
sereja and stairs greedy implementation sortings
sereja and dima greedy implementation two pointers
sereja and dividing data structures
sereja and cinema combinatorics math
sereja and brackets data structures schedules
sereja and tree graphs implementation
sereja and prefixes binary search brute force
new year cactus dp
new year tree data structures divide and conquer trees
new year tree decorations geometry schedules sortings
new year letter bitmasks brute force dp
new year ratings change greedy sortings
new year present constructive algorithms implementation
new year candles implementation
semifinals implementation sortings
playing with dice brute force
cookie clicker dp geometry
developing game data structures
captains mode bitmasks dp games
preparing for the contest binary search data structures greedy sortings
maze dfs and similar
i.o.u. implementation
lever implementation math
red and black tree dp implementation math
tree and queries data structures dfs and similar trees
circling round treasures bitmasks shortest paths
maximum submatrix 2 data structures dp implementation sortings
divisible by seven math number theory
inna and babies binary search data structures dsu geometry implementation
inna and sequence binary search data structures dp trees
inna and dima dfs and similar dp graphs implementation
inna and nine combinatorics greedy
inna and pink pony greedy implementation
making sequences is fun binary search implementation math
collecting beats is fun implementation
drawing circles is fun combinatorics geometry
choosing subtree is fun binary search data structures dfs and similar trees two pointers
watching fireworks is fun data structures dp math
counting rectangles is fun brute force divide and conquer dp
counting kangaroos is fun binary search greedy sortings two pointers
subway innovation greedy math two pointers
vessels data structures dsu implementation trees
hamburgers binary search brute force
fox dividing cheese math number theory
k-periodic array greedy implementation math
summer reading dp greedy
broken monitor brute force constructive algorithms greedy implementation
mittens constructive algorithms greedy sortings
berland bingo implementation
rook, bishop and king graphs math shortest paths
valera and queries binary search data structures
valera and fools dfs and similar dp graphs shortest paths
valera and elections dfs and similar graphs trees
valera and contest constructive algorithms implementation math
valera and plates greedy implementation
sereja and suffixes data structures dp
sereja and coat rack implementation
sereja and intervals combinatorics dp
sereja and sets bitmasks dfs and similar
sereja and the arrangement of numbers graphs greedy sortings
sereja ans anagrams binary search data structures
sereja and algorithm data structures implementation
dima and magic guitar brute force implementation math
dima and trap graph binary search data structures dfs and similar dsu shortest paths two pointers
dima and salad dp
dima and to-do list brute force implementation
dima and guards implementation
the fibonacci segment implementation
good number implementation
empty rectangles divide and conquer two pointers
ghd brute force math probabilities
beautiful set brute force number theory
free market dp greedy
matrix combinatorics data structures implementation
two circles brute force data structures implementation
renting bikes binary search greedy
fixing typos greedy implementation
fence brute force dp
soroban implementation
petya and pipes flows graphs shortest paths
fools and foolproof roads data structures dfs and similar dsu graphs greedy
insertion sort data structures dp implementation math
petya and staircases implementation sortings
two semiknights meet greedy math
levko and permutation constructive algorithms math number theory
levko and table constructive algorithms implementation
levko and game graphs greedy shortest paths
levko and sets number theory
levko and strings combinatorics dp
levko and array binary search dp
levko and array recovery greedy implementation
neatness constructive algorithms dfs and similar
pair of numbers binary search brute force data structures math two pointers
prime number math number theory
permutation constructive algorithms dp math
table constructive algorithms greedy implementation
dima and kicks brute force dsu graphs implementation
dima and hares dp greedy
dima and containers constructive algorithms greedy implementation
dima and text messages brute force strings
dima and continuous line brute force implementation
flag day constructive algorithms implementation
group of students brute force greedy implementation
xenia and string problem dp hashing implementation string suffix structures strings
bags and coins bitmasks constructive algorithms dp greedy
compartments combinatorics constructive algorithms greedy implementation
xenia and hamming implementation math
knight tournament data structures dsu
vasya and public transport greedy implementation
vasya and digital root constructive algorithms implementation
lucky number representation constructive algorithms dfs and similar dp
transferring pyramid dp
vasya and beautiful arrays brute force dp number theory
game with strings bitmasks dp games
vasya and robot brute force greedy math
antichain dp graph matchings greedy
queue constructive algorithms dp
find maximum implementation math number theory
two heaps combinatorics constructive algorithms greedy implementation math sortings
domino implementation math
jeff and periods implementation sortings
jeff and digits brute force implementation math
jeff and permutation greedy
jeff and removing periods data structures
jeff and brackets dp matrices
jeff and furik combinatorics dp probabilities
jeff and rounding dp greedy implementation math
wrong floyd brute force constructive algorithms dfs and similar graphs
looking for owls binary search data structures geometry hashing sortings
bombs greedy implementation sortings
resort graphs
tl brute force greedy implementation
color the fence data structures dp greedy implementation
cinema line greedy implementation
pilgrims dfs and similar dp trees
turtles dp matrices
subset sums brute force data structures
apple tree dfs and similar number theory trees
mafia binary search math sortings
fixed points brute force implementation math
difference row constructive algorithms implementation sortings
doodle jump math number theory
robot control dp graphs shortest paths
number transformation ii greedy math
lucky common subsequence dp strings
alice and bob games math number theory
suffix subgroup *special strings
superstitions inspection *special
black cat rush *special
chain letter *special dfs and similar graphs
counting fridays *special
triskaidekaphobia *special
expecting trouble *special probabilities
simple molecules brute force graphs math
magnets implementation
pumping stations brute force dfs and similar divide and conquer flows graphs greedy trees
water tree data structures dfs and similar graphs trees
read time binary search greedy two pointers
alternating current data structures greedy implementation
rational resistance math number theory
xenia and tree data structures divide and conquer trees
xenia and dominoes bitmasks dfs and similar dp
cupboard and balloons geometry
xenia and spies brute force greedy implementation
xenia and divisors greedy implementation
candies game constructive algorithms greedy
iahub and xors data structures
iahub and permutations combinatorics math
bubble sort graph binary search data structures dp
tourist problem combinatorics implementation math
maximal area quadrilateral brute force geometry
the wall math
three swaps constructive algorithms dfs and similar greedy
xenia and bit operations data structures trees
xenia and weights constructive algorithms dfs and similar dp graphs greedy shortest paths
xenia and ringroad implementation
helpful maths greedy implementation sortings strings
optimize! data structures
gcd table chinese remainder theorem math number theory
divisor tree brute force number theory trees
book of evil dfs and similar divide and conquer dp trees
quiz binary search greedy math matrices number theory
routine problem greedy math number theory
puzzles greedy
vasily the bear and painting square bitmasks combinatorics dp implementation
vasily the bear and beautiful strings combinatorics math number theory
vasily the bear and sequence brute force greedy implementation number theory
vasily the bear and fly math
vasily the bear and triangle implementation math
buy one, get one free dp greedy
counting skyscrapers dp math probabilities
rectangles and square brute force dp
more reclamation games
palindrome constructive algorithms dp
banana binary search constructive algorithms greedy
eight point sets sortings
candy bags implementation
summer earnings binary search bitmasks brute force geometry sortings
characteristics of rectangles binary search bitmasks brute force implementation sortings
lucky tickets brute force constructive algorithms
chips greedy
secrets greedy
binary key dp greedy implementation
theft of blueprints graphs math
students' revenge data structures greedy sortings
maximum absurdity data structures dp implementation
down the hatch! implementation
deja vu constructive algorithms dp
deja vu constructive algorithms graphs implementation
escaping on beaveractor data structures implementation trees
escaping on beaveractor graphs
escaping on beaveractor dfs and similar implementation
the great julya calendar dp
the great julya calendar dp
the great julya calendar dp
shave beaver! data structures
shave beaver! implementation
oh sweet beaverette data structures sortings
oh sweet beaverette brute force implementation
road construction constructive algorithms graphs
cakeminator brute force implementation
evil math
the evil temple and the moving rocks constructive algorithms
graph reconstruction constructive algorithms
biridian forest dfs and similar shortest paths
purification constructive algorithms greedy
sheldon and ice pieces greedy
iq test implementation
axis walking bitmasks combinatorics constructive algorithms dp meet-in-the-middle
block tower constructive algorithms dfs and similar graphs
magic five combinatorics math
hungry sequence math
flipping game brute force dp implementation
the red button combinatorics dfs and similar dsu graphs greedy
reclamation dsu
monsters and diamonds dfs and similar graphs shortest paths
stadium and games binary search math
square and rectangles implementation
two permutations data structures
tournament-graph constructive algorithms graphs
black-and-white cube combinatorics constructive algorithms
ciel and flowers combinatorics math
ciel and dancing greedy
ciel and gondolas data structures divide and conquer dp
ciel and flipboard dp greedy math
ciel the commander constructive algorithms dfs and similar divide and conquer greedy trees
ciel and duel dp flows greedy
ciel and robot binary search implementation math
ping-pong (easy version) dfs and similar graphs
magic numbers brute force greedy
ping-pong data structures
have you ever heard about the word? greedy hashing string suffix structures strings
kalila and dimna in the logging industry dp geometry
psychos in a line data structures implementation
malek dance club combinatorics math
strings of power implementation strings two pointers
even odds math
princess and her shadow constructive algorithms shortest paths
game with powers dp games
balance constructive algorithms dfs and similar graphs trees
ants brute force implementation
perfect pair brute force
good substrings string suffix structures
good substrings string suffix structures
good substrings hashing strings
suns and rays constructive algorithms dfs and similar implementation
suns and rays
suns and rays dfs and similar implementation
summer homework data structures math
summer homework data structures math
summer homework brute force data structures
pe lesson dp math
pe lesson dp
pe lesson brute force dp
tidying up flows graph matchings
tidying up flows
ekg dfs and similar dp
ekg brute force dfs and similar
special task math
special task greedy
sereja and array implementation
sereja and bottles brute force
sereja and squares dp
sereja and straight lines binary search data structures geometry sortings two pointers
sereja and subsequences data structures dp
sereja and periods binary search dfs and similar strings
sereja and contest implementation
ilya and two numbers constructive algorithms data structures dsu greedy
ilya and roads dp
ilya and matrix constructive algorithms greedy implementation sortings
ilya and queries dp implementation
ilya and bank account implementation number theory
archer math probabilities
whose sentence is it? implementation strings
biologist flows
interval cubing data structures math
fetch the treasure brute force data structures graphs shortest paths
cats transport data structures dp
the closest pair constructive algorithms implementation
sheep binary search greedy
tennis rackets brute force geometry
memory for arrays binary search bitmasks greedy
context advertising dp two pointers
morning run binary search math two pointers
polygon constructive algorithms geometry
white, black and white again combinatorics number theory
optimizer data structures greedy sortings
candies implementation
playing with string games
olya and graph combinatorics math
ivan and powers of two greedy implementation
continued fractions brute force implementation math
strange addition brute force constructive algorithms implementation
calendar brute force implementation
pythagorean theorem ii brute force math
random ranking dp math probabilities
rotatable number math number theory
minimum modular brute force graphs math number theory
rectangle puzzle ii implementation math
lucky permutation triple constructive algorithms implementation math
eugeny and play list binary search implementation two pointers
eugeny and array implementation
yaroslav and arrangements dp
yaroslav and divisors data structures
yaroslav and algorithm constructive algorithms
yaroslav and time binary search graphs shortest paths
yaroslav and sequence constructive algorithms
empire strikes back binary search math number theory
painting square dp fft
beautiful numbers brute force combinatorics
coach brute force dfs and similar graphs
array brute force constructive algorithms implementation
ksusha the squirrel brute force implementation
ksusha and array brute force number theory sortings
sail brute force greedy implementation
snow footprints greedy implementation
mystic carvings data structures
color the carpet constructive algorithms
splitting the uniqueness constructive algorithms
fish weight constructive algorithms greedy
parity game constructive algorithms
yaroslav and two strings combinatorics dp
yaroslav and permutations greedy math
yaroslav and points data structures
greg and caves combinatorics dp
greg and friends combinatorics dp graphs shortest paths
greg and graph dp graphs shortest paths
greg and array data structures implementation
shaass the great dp trees
shaass and painter robot brute force implementation number theory
shaass and lights combinatorics number theory
shaass and bookshelf dp greedy
shaass and oskols implementation math
close vertices data structures divide and conquer trees
ksusha and square geometry math probabilities two pointers
cube problem brute force math number theory
distinct paths brute force combinatorics
weird game games greedy
copying data data structures
connected components data structures dfs and similar dp dsu
beautiful ip addresses brute force
network topology graphs implementation
smsc implementation
tree-string problem *special dfs and similar hashing strings
parallel programming *special greedy
network mask *special bitmasks brute force implementation
command line arguments *special implementation strings
spyke talks *special implementation sortings
greedy petya *special dfs and similar graphs greedy
hq *special constructive algorithms
orange *special implementation
wtf? *special graph matchings implementation trees
qr code *special implementation
mysterious strings *special implementation
polo the penguin and matrix brute force dp implementation sortings ternary search
polo the penguin and segments brute force implementation
polo the penguin and lucky numbers dp implementation math
polo the penguin and trees combinatorics dfs and similar trees
polo the penguin and xor operation implementation math
polo the penguin and houses combinatorics
polo the penguin and strings greedy
pipeline binary search math
iq test brute force implementation
ladies' shop constructive algorithms fft math
tourists data structures sortings
main sequence greedy implementation
shifting implementation
lucky permutation constructive algorithms math
positions in permutations combinatorics dp math
permutation sum bitmasks combinatorics dp implementation meet-in-the-middle
building permutation greedy implementation sortings
find marble implementation
slightly decreasing permutations greedy implementation
cows and poker game brute force implementation
cows and primitive roots implementation math number theory
cow tennis tournament combinatorics data structures math
cows and cool sequences dp math number theory
coin troubles dp
cow program dfs and similar dp graphs
cows and sequence constructive algorithms data structures implementation
sausage maximization bitmasks data structures trees
yet another number game dp games
xor and or constructive algorithms implementation math
painting eggs greedy math
bit++ implementation
nearest fraction brute force implementation two pointers
word capitalization implementation strings
sequence transformation brute force data structures dp implementation math
k-maximum subsequence sum data structures flows graphs implementation
game on tree implementation math probabilities trees
maximum xor secondary data structures implementation two pointers
rectangle puzzle geometry
beautiful decomposition dp games greedy number theory
the minimum number of variables bitmasks dp
ladder dp implementation two pointers
books binary search brute force implementation two pointers
point on spiral brute force geometry implementation
new problem brute force strings
circle line implementation
binary tree on plane flows trees
google code jam dp probabilities
game games implementation
set of points constructive algorithms geometry
learning languages dfs and similar dsu
little girl and problem on trees data structures graphs trees
little girl and maximum xor bitmasks dp greedy implementation math
little girl and maximum sum data structures greedy implementation sortings
little girl and game games greedy
lunch rush implementation
convex shape constructive algorithms implementation
lights out implementation
mirror room data structures implementation
lovely matrix dfs and similar graphs greedy sortings
the last hole! brute force geometry
zero tree dfs and similar dp greedy trees
k-multiple free set binary search greedy sortings
dima and game dp games
dima and figure dp
dima and horses combinatorics constructive algorithms graphs
dima and two sequences combinatorics math sortings
dima and staircase data structures implementation
dima and sequence implementation math
dima and friends implementation math
three horses constructive algorithms math number theory
good substrings data structures strings
secret constructive algorithms implementation
prime matrix binary search brute force math number theory
beautiful year brute force
multithreading data structures greedy implementation
fancy fence geometry implementation math
string theory geometry math strings
maximum waterfall data structures dp graphs sortings
flawed flow constructive algorithms flows graphs greedy
greenhouse effect dp
magical boxes greedy math
playlist math probabilities sortings
wall bars dp
beautiful sets of points constructive algorithms implementation
buttons implementation math
games brute force
berland traffic math matrices
dominoes dfs and similar graphs
subtractions math number theory
more queries to array... data structures math
berdonalds graphs math shortest paths
below the diagonal constructive algorithms greedy math
queue at the school constructive algorithms graph matchings implementation shortest paths
stones on the table implementation
roadside trees (simplified edition) greedy implementation
colorful stones (simplified edition) implementation
roadside trees data structures dp
colorful stones dp two pointers
choosing balls dp
good sequences dp number theory
escape from stones constructive algorithms data structures implementation two pointers
rhombus brute force data structures dp
cycle in graph dfs and similar graphs
circle of numbers brute force dfs and similar implementation
squares greedy implementation sortings
beautiful matrix implementation
roma and changing signs greedy
roma and lucky numbers implementation
maxim and calculator brute force dp two pointers
maxim and increasing subsequence dp
maxim and matrix constructive algorithms dp math
maxim and restaurant dp math probabilities
maxim and discounts greedy sortings
dividing kingdom binary search brute force data structures
black and white tree constructive algorithms dsu graphs greedy trees
balls and boxes constructive algorithms greedy implementation
ancient prophesy brute force implementation strings
adding digits implementation math
little elephant and magic square brute force implementation
little elephant and chess brute force strings
little elephant and tree data structures dfs and similar trees
little elephant and broken sorting dp math probabilities
little elephant and lcm binary search combinatorics dp math
little elephant and elections brute force combinatorics dp
little elephant and bits greedy math
greedy elevator data structures implementation
sum greedy math
view angle brute force geometry math
playing cubes games greedy implementation
sockets greedy implementation sortings
lucky arrays data structures
liars and serge dp
furlo and rublo and game games implementation math
mr. bender and square binary search implementation math
almost arithmetical progression brute force dp
code parsing implementation
greg's workout implementation
dormitory dp implementation
rats brute force dfs and similar graphs implementation shortest paths
anagram greedy strings
jury size brute force implementation
cards with numbers constructive algorithms sortings
printer binary search data structures implementation sortings
table with letters - 2 brute force two pointers
text editor data structures dfs and similar graphs greedy shortest paths
physics practical binary search dp sortings two pointers
boys and girls greedy
unsorting array brute force sortings
little xor brute force implementation
tree and table dfs and similar dp implementation trees
two sets bitmasks math
number transformation dp greedy number theory
playing with permutations implementation math
points on line binary search combinatorics two pointers
mad joe brute force
building bridge geometry ternary search two pointers
movie critics greedy
restoring ipv6 implementation strings
paper work greedy
endless matrix math
donkey and stars data structures dp geometry math sortings
piglet's birthday dp math probabilities
sweets for everyone! binary search greedy implementation
robo-footballer binary search geometry
chilly willy math number theory
cupboards implementation
blood cousins return binary search data structures dfs and similar dp sortings
colorful graph brute force dfs and similar graphs
beauty pageant brute force constructive algorithms greedy
increase and decrease greedy math
buggy sorting constructive algorithms greedy sortings
queries for number of palindromes dp hashing strings
suggested friends brute force graphs
log stream analysis binary search brute force implementation strings
mishap in club greedy implementation
restoring table constructive algorithms greedy
game with coins greedy
internet address implementation strings
system administrator implementation
undoubtedly lucky numbers bitmasks brute force dfs and similar
dividing orange implementation
matrix data structures
cubes data structures dp geometry two pointers
colorado potato beetle dfs and similar implementation
hydra graphs sortings
the brand new function bitmasks
xor on segment bitmasks data structures
dispute dfs and similar graphs greedy
king's path dfs and similar graphs hashing shortest paths
big segment implementation sortings
heads or tails brute force implementation
challenging balloons constructive algorithms
race brute force implementation
flights graphs shortest paths
numbers
mirror box geometry implementation
friends binary search bitmasks data structures math
old peykan greedy
torcoder data structures
road repairs dfs and similar graphs greedy
easy tape programming brute force implementation
two bags of potatoes greedy implementation math
meeting her dp graphs shortest paths
tape programming data structures implementation
world eater brothers dfs and similar dp greedy trees
boring partition constructive algorithms
not wool sequences constructive algorithms math
build string flows graphs
t-decomposition dfs and similar graphs greedy trees
primes on interval binary search number theory two pointers
young table implementation sortings
free cash implementation
easy number challenge implementation number theory
boy or girl brute force implementation strings
number challenge combinatorics dp implementation math number theory
graph game graphs
cyclical quest data structures string suffix structures strings
let's play osu! dp math probabilities
lcm challenge number theory
merging two decks constructive algorithms greedy
practice constructive algorithms divide and conquer implementation
fence dp
champions' league implementation
cinema implementation
weather dp implementation
reading sortings
lefthanders and righthanders implementation
non-square equation binary search brute force math
perfect permutation implementation math
quick tortoise bitmasks divide and conquer dp
fence binary search data structures string suffix structures
doe graphs constructive algorithms divide and conquer dp graphs shortest paths
table bitmasks combinatorics dp math
cycles binary search constructive algorithms graphs greedy
cactus data structures dfs and similar dp graphs trees
magic box brute force geometry
to add or not to add binary search sortings two pointers
magic, wizardry and wonders constructive algorithms greedy
team brute force greedy
t-primes binary search implementation math number theory
dragons greedy sortings
gifts combinatorics dp math probabilities
towers dp greedy two pointers
triangles combinatorics graphs math
planets binary search data structures graphs shortest paths
shifts brute force two pointers
the road to berland is paved with good intentions 2-sat dfs and similar dsu graphs
zigzag data structures
fractal detector dp hashing
two tables brute force implementation
is your horseshoe on the other hoof? implementation
effective approach implementation
where do i turn? geometry
noble knight's path data structures trees
the table constructive algorithms greedy
anniversary data structures implementation math matrices number theory
naughty stone piles greedy
flying saucer segments math
unsolvable math number theory
snake bitmasks dfs and similar graphs implementation
barcode dp matrices
well-known numbers binary search greedy number theory
dice tower constructive algorithms greedy
array bitmasks implementation two pointers
parallelepiped brute force geometry math
planar graph flows geometry graphs
spider geometry graphs
partial sums combinatorics math number theory
two strings data structures dp strings
bracket sequence data structures expression parsing implementation
decoding genome dp matrices
olympiad binary search greedy sortings two pointers
reducing fractions implementation math number theory sortings
cosmic tables data structures implementation
shooshuns and sequence brute force implementation
little elephant and numbers implementation
little elephant and function implementation math
little elephant and inversions data structures two pointers
little elephant and triangle geometry math
little elephant and shifts data structures
little elephant and array constructive algorithms data structures
little elephant and problem implementation sortings
parking lot data structures
choosing capital for treeland dfs and similar dp graphs trees
color stripe brute force dp greedy
special offer! super price 999 bourles! implementation
k-string implementation strings
airport implementation
mountain scenery brute force constructive algorithms implementation
alien dna data structures dsu trees
bitonix' patrol bitmasks brute force combinatorics dfs and similar math
formurosa divide and conquer dp expression parsing
blackboard fibonacci brute force math
ice skating brute force dfs and similar dsu graphs
martian luck math number theory
spider's web binary search sortings two pointers
hiring staff greedy
forming teams dfs and similar implementation
tiling with hexagons implementation math
periodical numbers combinatorics dp number theory
hot days greedy
crosses brute force implementation
olympic medal greedy math
bicycle chain brute force implementation
hometask brute force constructive algorithms greedy math
system of equations brute force
two permutations data structures hashing strings
stars constructive algorithms geometry
relay race dp
numbers combinatorics dp
game dfs and similar greedy
it restaurants dfs and similar dp trees
cutting a fence binary search data structures dsu
cowboys combinatorics dp math
polycarpus is looking for good substrings bitmasks hashing implementation
privatization flows graphs
trails and glades constructive algorithms dsu graphs greedy
pixels constructive algorithms math
multicolored marbles dp math
blood cousins binary search data structures dfs and similar trees
prizes, prizes, more prizes implementation
police station dp graphs shortest paths
solitaire dfs and similar dp
dubstep strings
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
the beaver's problem - 3
game with two trees data structures
game with two trees
game with two trees
military trainings
military trainings
military trainings
beaver's calculator 1.0 greedy
beaver's calculator 1.0 greedy
beaver's calculator 1.0 greedy
little elephant and sorting brute force greedy
little elephant and rozdil brute force implementation
little elephant and strings data structures implementation string suffix structures two pointers
little elephant and retro strings dp
little elephant and furik and rubik math probabilities
little elephant and cards binary search data structures
little elephant and interval binary search combinatorics dp
transportation greedy sortings two pointers
hit ball geometry implementation math
photographer greedy sortings
game on paper brute force implementation
two problems brute force implementation
brand new easy problem brute force
llps binary search bitmasks brute force greedy implementation strings
thoroughly bureaucratic organization binary search combinatorics
brand new problem bitmasks brute force dp
fragile bridges dp
guess that car! math ternary search
clear symmetry constructive algorithms dp math
tractor college implementation math number theory ternary search
programming language binary search brute force expression parsing implementation
football championship brute force implementation
drinks implementation math
cinema brute force data structures
special olympics geometry
hexadecimal's theorem brute force constructive algorithms implementation number theory
gripping story binary search data structures sortings
cube snake constructive algorithms
delivering carcinogen binary search geometry
jumping on walls shortest paths
about bacteria implementation math
limit math
plate game constructive algorithms games math
opening portals dsu graphs shortest paths
the next good string data structures greedy hashing strings
paint tree constructive algorithms divide and conquer geometry sortings trees
infinite maze dfs and similar graphs
lexicographically maximum subsequence greedy strings
building forest data structures dsu graphs
analyzing polyline geometry math sortings
try and catch expression parsing implementation
after training data structures implementation math
let's watch football binary search brute force math
square math
exams implementation math
fibonacci number brute force math matrices
two segments data structures
hamming distance constructive algorithms greedy math matrices
xor brute force
cutting figure constructive algorithms graphs trees
walking in the rain brute force implementation
funky numbers binary search brute force implementation
thwarting demonstrations binary search data structures trees
metro scheme graphs greedy
fools and roads data structures dfs and similar trees
demonstration greedy
dynasty puzzles dp
counter attack data structures dsu graphs hashing sortings
non-secret cypher two pointers
stl dfs and similar
surrounded geometry
vasya and the bus greedy math
counting rhombi brute force math
cut ribbon brute force dp
stack *special expression parsing implementation
array sorting *special implementation
binary notation *special implementation
hq9+ *special implementation
asterisks *special implementation
lcm *special implementation math
a + reverse b *special implementation
hexagonal numbers *special
heaven tour data structures greedy
brt contract data structures
weak memory dfs and similar dsu
algorace dp shortest paths
permutations greedy
growing mushrooms greedy sortings
comparing strings implementation strings
soap time! - 2 binary search data structures
visit of the great math number theory
clever fat rat dp
mushroom scientists math ternary search
plant math
candy shop greedy
t-shirt dp greedy probabilities
cyclic coloring dfs and similar
zoo brute force geometry
headquarters constructive algorithms math
wooden fence dp
common divisors brute force hashing implementation math strings
optimal sum data structures greedy
vasya's calendar implementation
battlefield geometry graphs implementation shortest paths
number of triplets binary search brute force
series of crimes brute force geometry implementation
mathematical analysis rocks! constructive algorithms implementation math
cubes binary search dp two pointers
name greedy strings
letter dp
divisibility rules math number theory
defragmentation implementation
representative sampling
representative sampling dp sortings strings
representative sampling
the beaver's problem - 2
the beaver's problem - 2
the beaver's problem - 2
magic squares
magic squares
magic squares
smart beaver and resolving collisions
smart beaver and resolving collisions
smart beaver and resolving collisions
greedy merchants
greedy merchants
greedy merchants
educational game greedy
educational game greedy
educational game
fibonacci strings matrices strings
fibonacci strings strings
script generation
script generation
space voyage binary search
space voyage binary search
encrypting messages data structures
encrypting messages brute force
party brute force dfs and similar dsu graphs
party dfs and similar dsu graphs
rectangular game number theory
rectangular game number theory
good matrix elements implementation
good matrix elements implementation
archaeology data structures dfs and similar trees
hyper string dp
playing with superglue combinatorics constructive algorithms
word cut dp
trading business greedy sortings
gnomes of might and magic data structures graphs implementation shortest paths
power defence brute force dp geometry greedy
plane of tanks: duel brute force dp math probabilities
geometry horse greedy implementation sortings two pointers
plane of tanks: pro implementation
robot bicorn attack brute force implementation
range increments data structures greedy
file list dp greedy implementation
problem about equation math
camping groups data structures sortings
deputies constructive algorithms graphs greedy implementation
spiral maximum brute force dp
chamber of secrets dfs and similar shortest paths
rock-paper-scissors implementation math
bhtml+bcss *special dfs and similar expression parsing
calendar reform *special number theory
bus *special implementation sortings
pseudorandom sequence period *special implementation number theory
phone code *special brute force implementation
a polyline *special implementation
mysterious numbers - 2 *special
ucyhf *special brute force implementation number theory
mysterious language *special
broken checker *special brute force
a piece of cake *special implementation
star *special combinatorics
mysterious numbers - 1 *special constructive algorithms
replacing digits greedy
chores sortings
wizards and minimal spell implementation strings
wizards and demonstration implementation math
wizards and bets dfs and similar graphs math matrices
wizards and roads data structures divide and conquer graph matchings graphs greedy
wizards and numbers games math
wizards and huge prize dp math probabilities
wizards and trolleybuses implementation math
tetrahedron dp math matrices
shoe store dp graph matchings greedy sortings two pointers
median greedy math sortings
polygons geometry sortings
rank list binary search implementation sortings
compatible numbers bitmasks brute force dfs and similar dp
beard graph data structures dsu trees
another problem on strings binary search brute force dp math strings two pointers
burning midnight oil binary search implementation
supercentral point implementation
polycarpus and tasks
minimum diameter binary search brute force
machine programming flows graphs
ancient berland hieroglyphs two pointers
variable, or there and back again dfs and similar graphs
e-government data structures dfs and similar dp strings trees
large refrigerator brute force
conveyor sortings two pointers
lemmings binary search
substring and subsequence dp
brackets *special
truncatable primes *special
alternating case *special
non-decimal sum *special
factorial zeros *special
hq9+ *special
remove digits *special
prime factorization *special
binary notation *special
pentagonal numbers *special implementation
polycarpus the safecracker brute force dp
distance in tree dfs and similar dp trees
abracadabra divide and conquer
discounts constructive algorithms greedy sortings
dress'em in vests! binary search brute force greedy two pointers
buses and people binary search data structures sortings
edges in mst dfs and similar dsu graphs sortings
find pair implementation math sortings
unlucky ticket greedy sortings
twins greedy sortings
zebra tower *special data structures greedy sortings
palindrome pairs *special brute force dp strings
string manipulation 1.0 *special binary search brute force data structures strings
matchmaker *special greedy sortings
friends or not *special greedy implementation
phone talks *special dp sortings
ice sculptures *special brute force number theory
cd and pwd commands *special data structures implementation
taxi *special greedy implementation
next round *special implementation
trace geometry sortings
game outcome brute force
mrs. hudson's pancakes brute force dp
clues combinatorics graphs
cipher combinatorics dp
suspects constructive algorithms data structures implementation
message brute force
combination greedy sortings
i_love_\%username\% brute force
martian colony geometry
flatland fencing games math
double profiles graphs hashing sortings
colliders math number theory
hometask greedy
euclidean distance *special
date change *special
caesar cipher *special
binary notation *special
a + b *special
garden bitmasks dp graphs trees
frames brute force
pocket book combinatorics
steps binary search implementation
marks implementation
phone numbers implementation strings
soft drinking implementation math
freezing with style binary search data structures divide and conquer trees
mission impassable dp strings
smart cheater data structures math probabilities
quantity of strings combinatorics dfs and similar graphs math
win or freeze games math number theory
martian strings string suffix structures strings
coloring brackets dp
division into teams greedy math sortings
martian clock implementation
business trip greedy implementation sortings
porcelain dp
bag of mice dp games math probabilities
terse princess constructive algorithms greedy
escape implementation math
insomnia cure constructive algorithms implementation math
smile house binary search graphs matrices
punctuation implementation strings
lucky mask brute force implementation
lucky ticket implementation
lucky queries data structures
lucky pair combinatorics data structures implementation
lucky subsequence combinatorics dp math
lucky number 2 constructive algorithms
lucky conversion greedy implementation
competition data structures greedy
missile silos data structures dfs and similar graphs shortest paths
anagram search implementation strings
meeting implementation
arrival of the general implementation
help kingdom of far far away 2 implementation strings
help vasilisa the wise 2 brute force math
help greg the dwarf 2 geometry
help shrek and donkey 2 games
help caretaker brute force dp
help general constructive algorithms greedy implementation
help farmer brute force math
clearing up constructive algorithms dp dsu graphs
take-off ramps graphs shortest paths
queue constructive algorithms greedy sortings
hopscotch geometry math
amusing joke implementation sortings strings
new year snowflake geometry sortings
new year garland combinatorics dp
new year contest greedy sortings
new year snowmen binary search data structures greedy
new year cards brute force greedy implementation
new year table geometry math
wallpaper implementation math
petr and book implementation
hellish constraints brute force dp two pointers
world of darkraft dp games
mushroom gnomes - 2 binary search data structures probabilities sortings
digits permutations greedy
literature lesson implementation
last chance data structures implementation strings
palindromes dp strings
history sortings
permutation greedy
postcards and photos implementation
ternary logic implementation math
presents implementation
weak subsequence combinatorics
cycle brute force dfs and similar implementation
zero-one constructive algorithms games greedy
rectangle and square brute force geometry math
replacement greedy implementation sortings
swaps constructive algorithms graphs greedy
pairs of numbers brute force dfs and similar math number theory
average numbers brute force implementation
unary implementation
hq9+ implementation
bits of merry old england flows graphs
constants in the language of shakespeare constructive algorithms dp greedy
logo turtle dp
piet implementation
turing tape implementation
present to mom binary search two pointers
yet another task with queens sortings
subway dfs and similar graphs
the world is a theatre combinatorics math
opposites attract implementation math
caps lock implementation strings
date calculation *special
array sorting *special sortings
balanced brackets *special
caps lock on *special
prime factorization *special
tribonacci numbers *special
exponentiation *special
decimal sum *special
gnikool ssalg *special implementation strings
hexagonal numbers *special implementation
students and shoelaces brute force dfs and similar graphs implementation
cookies implementation
birthday geometry math
numbers constructive algorithms implementation
games with rectangle combinatorics dp
string brute force constructive algorithms hashing implementation string suffix structures strings
statues dfs and similar
canvas frames implementation
wasted time geometry
pills brute force flows
fibonacci sums dp math
e-reader display constructive algorithms greedy
password binary search dp hashing string suffix structures strings
hot bath binary search brute force math
mst company binary search graphs
two progressions constructive algorithms greedy
hobbits' party constructive algorithms greedy
simple xml implementation
measuring lengths in baden math
permutations brute force combinatorics implementation
the number of positions math
maze dfs and similar dp probabilities trees
string string suffix structures
brackets combinatorics dp greedy
squares math
prime permutation implementation number theory strings
lucky substring brute force implementation
lucky division brute force number theory
lucky array data structures
lucky segments binary search implementation two pointers
lucky permutation brute force combinatorics number theory
lucky transformation strings
lucky sum implementation
minimum sum divide and conquer geometry sortings
luck is in numbers greedy
brevity is soul of wit graph matchings
boom implementation
spiders dp greedy trees
put knight! games math
three sons brute force
winnie-the-pooh and honey implementation math
quiz league implementation
elevator brute force implementation math
alternative reality geometry
string transformation hashing strings
education reform dp
before exam constructive algorithms implementation sortings
epic game implementation
bertown roads dfs and similar graphs
caesar's legions dp
fancy number brute force greedy sortings strings
present from lena constructive algorithms implementation
string task implementation strings
tree or not tree data structures divide and conquer implementation trees
not quick transformation divide and conquer math
cycle dfs and similar graphs
very interesting game brute force number theory
elevator implementation math
little pigs and wolves greedy implementation
tram implementation
linear kingdom races data structures dp
unambiguous arithmetic expression dp expression parsing
plumber math
lawnmower greedy sortings
party dfs and similar graphs trees
pfast inc. bitmasks brute force graphs
cifera math
sleeping combinatorics implementation math
museum math matrices probabilities
double happiness brute force math number theory
petr# brute force data structures hashing strings
grammar lessons implementation strings
petya and square implementation math
petya and strings implementation strings
petya and rectangle
petya and coloring combinatorics dp
petya and spiders bitmasks dp dsu
petya and divisors binary search data structures number theory
petya and inequiations greedy
lucky string constructive algorithms strings
nearly lucky number implementation
lucky interval brute force math
lucky sorting constructive algorithms sortings
lucky tree dp dsu trees
lucky probability brute force probabilities
lucky sum of digits brute force implementation
datatypes math sortings
palindromic times implementation strings
darts geometry probabilities
crime management dp graphs matrices
arrangement bitmasks dp
basketball team combinatorics dp math probabilities
dorm water supply dfs and similar graphs
space rescuers geometry ternary search
treasure island brute force implementation
buns dp
choosing laptop brute force implementation
card game implementation
lift and throw brute force
entertaining geodetics brute force dsu implementation
item world brute force implementation sortings
dark assembly brute force probabilities
transmigration implementation
blackjack implementation
buying sets flows graph matchings
time to raid cowavans brute force data structures sortings
russian roulette constructive algorithms greedy
cthulhu dfs and similar dsu graphs
testing pants for sadness greedy implementation math
sum of digits implementation
clothes brute force
candies and stones divide and conquer dp
castle dp greedy probabilities sortings trees
vectors implementation math
buses binary search data structures dp
homework greedy
interval coloring *special greedy math
rotation *special geometry math
battleship *special dfs and similar implementation
name the album *special data structures implementation
polynom *special implementation
lamps in a line *special math
world of mouth *special strings
a+b *special implementation
friendly numbers *special implementation
carpeting the room *special implementation
help chef gerasim implementation sortings
help far away kingdom strings
help shrek and donkey dp games math probabilities
help monks constructive algorithms
help greg the dwarf geometry ternary search
help king implementation probabilities trees
help victoria the wise brute force implementation
leaders dfs and similar dsu graphs trees
robot in basement bitmasks brute force implementation
winning strategy binary search graphs math shortest paths
superset constructive algorithms divide and conquer
domino brute force implementation
lucky numbers (easy) binary search bitmasks brute force
football implementation strings
lucky country dp dsu graphs
horse races dp math
volleyball shortest paths
lucky numbers dp greedy
hockey implementation strings
friends graphs implementation math
restoring password implementation strings
lostborn dp math number theory
flags dp math matrices
azembler brute force implementation
end of exams greedy
frames implementation
binary number greedy
chips implementation math
igloo skyscraper data structures geometry
grocer's problem constructive algorithms graphs greedy
ski base combinatorics dsu graphs
queue binary search data structures
newspaper headline greedy strings
african crossword implementation strings
cableway greedy math
fire and ice greedy
space mines geometry
chip play brute force data structures implementation
widget library dp expression parsing graphs implementation
robbery greedy
keyboard implementation
chord brute force implementation
mogohu-rea idol geometry
beautiful road dfs and similar dp dsu graphs implementation sortings trees
interesting game dp games math
vasya and types implementation strings
trains implementation math
long sequence brute force math matrices
powerful array data structures implementation math two pointers
genetic engineering dp string suffix structures trees
tetris revisited constructive algorithms graph matchings greedy math
reflection math
guard towers binary search dsu geometry graphs sortings
sum of medians binary search brute force data structures implementation
petya and tree binary search dfs and similar probabilities sortings trees
embassy queue data structures greedy
domino constructive algorithms implementation
biathlon binary search implementation
toy army math number theory
two subsequences bitmasks dp
numbers dp math number theory
track graphs greedy shortest paths
doctor binary search math sortings
magical array math
corridor geometry
two out of three dp
general mobilization data structures dfs and similar sortings
sets constructive algorithms hashing implementation
double cola implementation math
pairs dfs and similar dp dsu graphs implementation trees
polycarp's picture gallery constructive algorithms greedy
average score greedy math sortings
sequence formatting implementation strings
plug-in implementation
depression geometry math
panoramix's prediction brute force
security system math
password bitmasks dp shortest paths
beaver data structures dp greedy hashing strings two pointers
colorful field implementation sortings
bus game greedy
evacuation flows graphs shortest paths
archer's shot binary search geometry math two pointers
beaver game dp games number theory
easter eggs constructive algorithms implementation
haiku implementation strings
martian food geometry
domino carpet dp implementation
beavermuncher-0xff dfs and similar dp dsu greedy trees
falling anvils math probabilities
heroes brute force implementation
tourist binary search data structures dp
points implementation math
plus and xor dp greedy math
mutation bitmasks dp math
mice greedy two pointers
gift dsu graphs sortings trees
ship's shortest path geometry shortest paths
big maximum sum data structures dp greedy implementation math trees
modified gcd binary search number theory
facetook priority wall expression parsing implementation strings
life without zeros implementation
shift it! constructive algorithms
hanger data structures
chessboard billiard dfs and similar dsu graphs number theory
train dp games greedy
room leader implementation
plane of tanks brute force geometry
morrowindows math number theory
freediv dfs and similar graphs greedy
lionage ii dp
need for brake binary search greedy sortings
the elder trolls iv: oblivon greedy math
goofy numbers *special implementation
reverse it! *special implementation
fibonacci army *special dp
oil *special greedy math
ali goes shopping *special brute force strings
perse-script *special expression parsing
extraordinarily nice numbers *special math
ini-file *special implementation
goshtasp, vishtasp and eidi *special greedy math
nuclear fusion bitmasks dp
solitaire brute force implementation
round table knights dp math number theory
progress bar implementation math
way too long words strings
information reform dp implementation trees
professor's task data structures geometry
lucky tickets binary search data structures sortings two pointers
text messaging expression parsing greedy strings
cookies math
subsegments data structures implementation
dot dp games
game implementation
bets greedy implementation
young physicist implementation math
contact geometry
half-decay tree data structures divide and conquer dp math probabilities
synchrophasotron brute force
energy exchange binary search
irrational problem implementation number theory
save the city! geometry
optical experiment binary search data structures dp
sequence of balls dp
restoration of the permutation greedy
partial teacher dp graphs greedy implementation
petya and post data structures dp
petya and his friends constructive algorithms math number theory
petya and file system data structures implementation
petya and countryside brute force implementation
petya and java implementation strings
harry potter and moving staircases dfs and similar implementation
harry potter and the sorting hat brute force dfs and similar hashing
harry potter and the golden snitch binary search geometry
harry potter and the history of magic brute force greedy implementation
harry potter and three spells implementation math
sort the table *special sortings
table bowling *special sortings
path canonization *special
domain *special expression parsing
prime segment *special brute force math number theory
presents *special greedy
table *special greedy implementation math
expression *special expression parsing
factorial *special implementation
sweets game bitmasks dfs and similar dp games implementation
dividing island constructive algorithms
bulls and cows brute force implementation
settlers' training implementation
sinking ship implementation sortings strings
world evil dp flows
wormhouse dfs and similar graphs
inquisition geometry implementation sortings
tyndex.brome binary search implementation
a student's dream greedy math
enemy is weak data structures trees
eternal victory dfs and similar graphs greedy shortest paths trees
capture valerian math
hard work strings
ultra-fast mathematician implementation
mushroom gnomes math matrices
savior brute force dsu math
mushroom strife brute force dfs and similar
serial time! dfs and similar dsu
where are my flakes? implementation two pointers
shortest path graphs shortest paths
team arrangement constructive algorithms greedy implementation
title expression parsing
fortune telling implementation number theory
word implementation strings
expression dp
calendar greedy strings
trees brute force
coins greedy
chat room greedy strings
chess math shortest paths
journey dp math
array combinatorics math
martian architecture implementation
square earth? dfs and similar greedy implementation
domino principle binary search data structures sortings
changing a string dp
corporation mail data structures expression parsing implementation
spoilt permutation implementation
bar implementation
very simple problem geometry two pointers
beautiful numbers dp number theory
pie or die games
smallest number brute force
flea travel implementation math
vacuum сleaner geometry
writing a song brute force dp strings
first digit law dp math probabilities
cutting jigsaw puzzle hashing implementation
presents implementation
dead ends bitmasks dp
physical education sortings
little frog constructive algorithms
blog photo binary search implementation
autocomplete implementation
circular rmq data structures
right triangles combinatorics
123-sequence implementation
caterpillar dfs and similar dp graphs trees
pentagon combinatorics graphs matrices
geometrical problem implementation
three base stations binary search greedy
bhtml tables analisys expression parsing
cheaterius's problem implementation
square equation roots math
bombing binary search dp probabilities
happy farm 5 geometry
choosing symbol pairs strings
domino piling greedy math
common ancestor dp
game brute force dp implementation
disposition constructive algorithms math
sum math
sleuth implementation
black and white constructive algorithms
galaxy union dp trees two pointers
snow sellers greedy sortings
ivan the fool vs gorynych the dragon dp games graphs
permutations greedy
the race math
land lot brute force implementation
rock-paper-scissors implementation schedules
cannon data structures geometry sortings
safe brute force
crossword implementation
coins implementation
triangular numbers brute force math
emperor's problem geometry
hercule poirot problem dsu graphs
comb data structures dp
parking lot data structures implementation
hamsters and tigers two pointers
t-shirts from sponsor implementation
ball game brute force implementation
planting trees constructive algorithms
tcmcf+++ greedy
road problem graphs
prime problem number theory
goats and wolves greedy
director constructive algorithms greedy
event dates greedy meet-in-the-middle sortings
dancing lessons data structures
school dp dsu
codecraft iii implementation
triminoes constructive algorithms greedy
toys brute force combinatorics
phone number dp
shooting gallery data structures implementation
berpaint geometry graphs
anfisa the monkey dp
hyperdrive math
holidays implementation
cola implementation
indian summer implementation
race brute force implementation two pointers
journey brute force constructive algorithms implementation
lucky tickets greedy
letter implementation strings
football strings
baldman and the military dfs and similar graphs trees
strange town constructive algorithms math
safe cracking brute force constructive algorithms
game of chess unfinished implementation
guilty --- to the kitchen! greedy implementation
3-cycles constructive algorithms graphs greedy
pawn dp
email address expression parsing implementation
martian dollar brute force
translation implementation strings
number table combinatorics
interesting sequence math
berland square implementation math
repaintings math
find color constructive algorithms geometry implementation math
testing
spelling check hashing implementation strings
tram
multiplication table implementation
inverse function implementation
pacifist frogs implementation
what has dirichlet got to do with that? dp games
cubical planet math
moon craters dp sortings
company income growth greedy
c*++ calculations expression parsing greedy
the great marathon dp
queue data structures
smart boy dp games strings
let's go rolling! dp sortings
vasya the architect implementation
blinds brute force
chess brute force implementation math
army implementation
trial for chief graphs greedy shortest paths
lesson timetable combinatorics dp math
old berland language data structures greedy trees
computer game greedy implementation
towers sortings
two paths constructive algorithms dsu graphs implementation
new game with a chess piece games
bowls geometry implementation
fractal implementation
extra-terrestrial intelligence implementation
parade data structures sortings
animals dp greedy
fire again brute force dfs and similar shortest paths
warehouse implementation
shell game implementation
collisions brute force implementation math
road map dfs and similar graphs
page numbers expression parsing implementation sortings strings
sale greedy sortings
reconnaissance 2 implementation
helper
knights geometry graphs shortest paths sortings
wonderful randomized sum greedy
string problem shortest paths
what is for dinner? greedy implementation
hide-and-seek geometry implementation
constellation implementation
flea math
borze expression parsing implementation
reconnaissance brute force
tv game dp
chocolate dfs and similar implementation
schedule implementation
sysadmin bob greedy implementation strings
worms evolution implementation
tricky and clever password binary search constructive algorithms data structures greedy hashing strings
king's problem? geometry greedy
shooting gallery dp probabilities
codeforces world finals implementation
accounting brute force math
quarrel graphs shortest paths
ant on the tree constructive algorithms dfs and similar trees
mail stamps data structures dfs and similar graphs implementation
traffic lights implementation
spit problem brute force
dravde saves the world geometry math
don't fear, dravde is kind binary search data structures dp hashing
bath queue combinatorics dp probabilities
psort dfs and similar dsu graphs
bender problem implementation
number with the given amount of divisors brute force dp number theory
ring road 2 2-sat dfs and similar dsu graphs
unordered subsequence constructive algorithms greedy
tournament bitmasks brute force dfs and similar greedy
next test implementation sortings
multithreading constructive algorithms
tickets combinatorics math probabilities
parquet combinatorics constructive algorithms greedy implementation
regular bracket sequence greedy
almost prime number theory
test hashing strings
roads not only in berland dsu graphs trees
roads in berland graphs shortest paths
phone numbers implementation
iq test brute force
berland collider binary search
broken robot dp math probabilities
sequence of points geometry implementation math
f1 champions implementation
ring road graphs
tree dp
tetragon geometry math
oranges and apples constructive algorithms sortings
party constructive algorithms graphs math
you're given a string... brute force greedy
scheme dfs and similar graphs trees
segments greedy sortings
system administrator graphs
bargaining table brute force dp
second order statistics brute force
traveling graph bitmasks graph matchings graphs
stripe 2 binary search dp sortings
intersection implementation math
jabber id implementation strings
dijkstra? graphs shortest paths
equation math
beros file system implementation
fairy dfs and similar divide and conquer dsu
points data structures
deletion of repeats greedy hashing string suffix structures
checkout assistant dp
world football cup implementation
flag 2 dp
seller bob brute force dp greedy
stripe data structures implementation
platforms brute force math
triangle brute force geometry
palisection strings
notepad number theory
balance dp
hierarchy dfs and similar dsu greedy shortest paths
noldbach problem brute force math number theory
fish bitmasks dp probabilities
logging implementation strings
monitor binary search number theory
burglar and matches greedy implementation sortings
flag implementation
triangles combinatorics dp
map data structures implementation sortings
industrial nim games
laser math
cottage village implementation sortings
camels dp
two paths dfs and similar dp graphs shortest paths trees two pointers
four segments brute force constructive algorithms geometry implementation math
young photographer implementation
letter implementation
holes data structures dsu
triangles dp geometry
sequence dp sortings
letter a geometry implementation
numbers implementation math
start of the session constructive algorithms
ball data structures sortings
fruits greedy implementation sortings
correct solution? implementation sortings
super agent implementation
forward, march! binary search dp greedy
a simple task bitmasks dp graphs
how many squares? implementation
jumping jack math
increasing sequence constructive algorithms implementation math
greedy change constructive algorithms
lcis dp
digital root number theory
cinema cashier dp implementation
power consumption calculation implementation
interestring graph and apples dfs and similar dsu graphs
how many trees? combinatorics divide and conquer dp
hexadecimal's numbers brute force implementation math
running student brute force geometry implementation
die roll math probabilities
beads dp graphs
two friends binary search geometry
looking for order bitmasks dp
obsession with robots constructive algorithms graphs implementation
train and peter strings
defining macros dp expression parsing implementation
palindrome degree hashing strings
line math number theory
memory manager implementation
kalevitch and chess brute force constructive algorithms
exposition binary search data structures dsu trees two pointers
lizards and basements 2 brute force dp
alice, bob and chocolate greedy two pointers
president's office implementation
triangle brute force geometry
bindian signalizing data structures
follow traffic rules implementation math
longest regular bracket sequence constructive algorithms data structures dp greedy sortings strings
center alignment implementation strings
chat servers outgoing traffic implementation
mysterious present dp sortings
registration system data structures hashing implementation
before an exam constructive algorithms greedy
watermelon brute force math
least cost bracket sequence greedy
tic-tac-toe brute force games implementation
lorry greedy sortings
shortest path of the king greedy shortest paths
commentator problem geometry
the least round way dp math
winner hashing implementation
ancient berland circus geometry math
spreadsheet implementation math
theatre square math
